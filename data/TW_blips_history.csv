"edition","name","quadrant","ring","description"
"2010-01",ASP.NET MVC,Tools,Adopt,""
"2010-01",IE6 End of Life,Tools,Adopt,"<p>Web browsers continue to evolve as they strive to keep pace with new specifications in HTML, CSS and JavaScript. Alas, many enterprises have yet to embrace the end of life for IE6 and move to a newer and more standards compliant option. Of the browsers available today, Firefox and Opera provide support for the widest range of platforms. The Google browser, Chrome, brings new innovation to the browser space by splitting browser tabs into separate processes while providing a new implementation of JavaScript. These changes appear to give Chrome a significant performance boost over other browsers and have influenced the creation of a netbook OS called Chrome OS. While enterprises may look to move off IE6 and onto Microsoft’s IE8, we remain concerned about IE8’s current level of compliance to web standards.</p>"
"2010-01",Distributed version control,Tools,Trial,"<p>Distributed version control systems such as Git and Mercurial have had significant exposure in the past year or more as open source projects move to this toolset en masse. The social networking aspect that GitHub and Bitbucket have brought to distributed version control has helped to propel these tools forward and into enterprises looking for ways to develop across multiple geographies. The move for many to a distributed version control system has resulted in a move away from tools such as Subversion and other centralized version control systems. As organizations assess and choose between these two different toolsets, we suggest that you evaluate both in relation to your team’s specific needs. While we have seen widespread adoption of distributed version control tools within ThoughtWorks and beyond, we still advocate the use of continuous integration and limits to the amount of time that code is spent outside of the main branch.</p>"
"2010-01",Subversion,Tools,Trial,"<p>Distributed version control systems such as Git and Mercurial have had significant exposure in the past year or more as open source projects move to this toolset en masse. The social networking aspect that GitHub and Bitbucket have brought to distributed version control has helped to propel these tools forward and into enterprises looking for ways to develop across multiple geographies. The move for many to a distributed version control system has resulted in a move away from tools such as Subversion and other centralized version control systems. As organizations assess and choose between these two different toolsets, we suggest that you evaluate both in relation to your team’s specific needs. While we have seen widespread adoption of distributed version control tools within ThoughtWorks and beyond, we still advocate the use of continuous integration and limits to the amount of time that code is spent outside of the main branch.</p>"
"2010-01",Visualization and metrics,Tools,Trial,""
"2010-01",Next-generation test tools,Tools,Assess,""
"2010-01",Google Wave,Tools,Hold,<p>Google Wave has sprung up over the past few months and looks to be a promising platform for collaboration over the Internet. The platform is still in early beta and suffers from some stability issues. Some early developers have integrated with the Google Wave platform but commercial releases of software that utilize Google Wave will likely wait until the beta tag has been lifted from the product.</p>
"2010-01",Language workbenches,Tools,Hold,""
"2010-01",Polyglot development environments,Tools,Hold,"<p>Polyglot programming continues to gain widespread acceptance across the industry reflecting the reality that software developers have many languages and tools at their disposal. One area that we have yet to see take off is the creation of polyglot development environments, capable of satisfying multiple language needs of development teams. While Eclipse, IntelliJ, Visual Studio and others have some cross-language capabilities, their support for a wide range of languages is limited at best.</p>"
"2010-01",Build pipelines,Techniques,Adopt,""
"2010-01",User centered design,Techniques,Adopt,<p>The benefits of user-centered design are often understated. Gaining a broader understanding of data flows and users’ goals simplify the overall architecture of a system while optimizing user interaction. In the past year we have seen a greater uptake of user-centered design in Agile software development practices as experts in both fields have established new ways of working together.</p>
"2010-01",Emergent design,Techniques,Trial,""
"2010-01",Evolutionary database,Techniques,Trial,""
"2010-01",Lean software development,Techniques,Trial,""
"2010-01",Web as platform,Techniques,Trial,"<p>We assist many of our clients in adapting enterprise software architecture practices to fit within an Agile software delivery approach. In the past year we have seen increased interest in evolutionary enterprise architecture and how service oriented architectures shape the boundaries between enterprise units. The value of an evolutionary approach to enterprise architecture is the creation of lighter weight systems that ease integration between disparate parts. By embracing this approach and the notion of the web as an enterprise application platform, we have reduced overall complexity of application architectures, increased quality and scalability, and reduced development costs.</p>"
"2010-01",Continuous deployment,Techniques,Assess,""
"2010-01",Evolutionary architecture,Techniques,Assess,"<p>We assist many of our clients in adapting enterprise software architecture practices to fit within an Agile software delivery approach. In the past year we have seen increased interest in evolutionary enterprise architecture and how service oriented architectures shape the boundaries between enterprise units. The value of an evolutionary approach to enterprise architecture is the creation of lighter weight systems that ease integration between disparate parts. By embracing this approach and the notion of the web as an enterprise application platform, we have reduced overall complexity of application architectures, increased quality and scalability, and reduced development costs.</p>"
"2010-01",Incremental data warehousing,Techniques,Assess,""
"2010-01",Cloud,Platforms,Adopt,""
"2010-01",Firefox,Platforms,Adopt,"<p>Web browsers continue to evolve as they strive to keep pace with new specifications in HTML, CSS and JavaScript. Alas, many enterprises have yet to embrace the end of life for IE6 and move to a newer and more standards compliant option. Of the browsers available today, Firefox and Opera provide support for the widest range of platforms. The Google browser, Chrome, brings new innovation to the browser space by splitting browser tabs into separate processes while providing a new implementation of JavaScript. These changes appear to give Chrome a significant performance boost over other browsers and have influenced the creation of a netbook OS called Chrome OS. While enterprises may look to move off IE6 and onto Microsoft’s IE8, we remain concerned about IE8’s current level of compliance to web standards.</p>"
"2010-01",iPhone,Platforms,Adopt,""
"2010-01",JVM as platform,Platforms,Adopt,""
"2010-01",Android,Platforms,Trial,""
"2010-01",Non-relational databases,Platforms,Trial,"<p>The semantic web and its underlying technologies, including RDF & SPARQL, have been around for 8 years or more. Broader uptake of the Cloud and non-relational databases such Neo4j have helped move the semantic web into the reach of enterprise developers. Outside of the semantic web, nonrelational databases are being adopted as alternatives to relational databases in a number of situations. Leveraging these technologies will require new approaches to architecture and development that suggest widespread adoption will only occur over a number of years.</p>"
"2010-01",Chrome,Platforms,Assess,"<p>Web browsers continue to evolve as they strive to keep pace with new specifications in HTML, CSS and JavaScript. Alas, many enterprises have yet to embrace the end of life for IE6 and move to a newer and more standards compliant option. Of the browsers available today, Firefox and Opera provide support for the widest range of platforms. The Google browser, Chrome, brings new innovation to the browser space by splitting browser tabs into separate processes while providing a new implementation of JavaScript. These changes appear to give Chrome a significant performance boost over other browsers and have influenced the creation of a netbook OS called Chrome OS. While enterprises may look to move off IE6 and onto Microsoft’s IE8, we remain concerned about IE8’s current level of compliance to web standards.</p>"
"2010-01",Chrome OS,Platforms,Assess,"<p>Web browsers continue to evolve as they strive to keep pace with new specifications in HTML, CSS and JavaScript. Alas, many enterprises have yet to embrace the end of life for IE6 and move to a newer and more standards compliant option. Of the browsers available today, Firefox and Opera provide support for the widest range of platforms. The Google browser, Chrome, brings new innovation to the browser space by splitting browser tabs into separate processes while providing a new implementation of JavaScript. These changes appear to give Chrome a significant performance boost over other browsers and have influenced the creation of a netbook OS called Chrome OS. While enterprises may look to move off IE6 and onto Microsoft’s IE8, we remain concerned about IE8’s current level of compliance to web standards.</p>"
"2010-01",Google as corporate platform,Platforms,Assess,""
"2010-01",HTML 5,Platforms,Assess,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-01",Location based services,Platforms,Assess,""
"2010-01",RDF & SPARQL,Platforms,Assess,"<p>The semantic web and its underlying technologies, including RDF & SPARQL, have been around for 8 years or more. Broader uptake of the Cloud and non-relational databases such Neo4j have helped move the semantic web into the reach of enterprise developers. Outside of the semantic web, nonrelational databases are being adopted as alternatives to relational databases in a number of situations. Leveraging these technologies will require new approaches to architecture and development that suggest widespread adoption will only occur over a number of years.</p>"
"2010-01",Rich Internet applications,Platforms,Assess,"<p>Our position on Rich Internet Applications has changed over the past year. Experience has shown that platforms such as Silverlight, Flex and JavaFX may be useful for rich visualizations of data but provide few benefits over simpler web applications. Given that these toolsets have limited support for automated testing, it would suggest that a more traditional web application stack provides greater value for enterprise development. We recommend only using RIA platforms for rich visualizations incorporated into web applications, not as comprehensive development targets.</p>"
"2010-01",IE8,Platforms,Hold,"<p>Web browsers continue to evolve as they strive to keep pace with new specifications in HTML, CSS and JavaScript. Alas, many enterprises have yet to embrace the end of life for IE6 and move to a newer and more standards compliant option. Of the browsers available today, Firefox and Opera provide support for the widest range of platforms. The Google browser, Chrome, brings new innovation to the browser space by splitting browser tabs into separate processes while providing a new implementation of JavaScript. These changes appear to give Chrome a significant performance boost over other browsers and have influenced the creation of a netbook OS called Chrome OS. While enterprises may look to move off IE6 and onto Microsoft’s IE8, we remain concerned about IE8’s current level of compliance to web standards.</p>"
"2010-01",JavaScript as a first class language,languages-and-frameworks,Adopt,""
"2010-01",C# 4.0,languages-and-frameworks,Trial,""
"2010-01",Domain-Specific Languages,languages-and-frameworks,Trial,""
"2010-01",Concurrent languages,languages-and-frameworks,Assess,"<p>The remaining two language types included on the radar are often grouped together. While functional and concurrent languages may be adopted in similar environments, their approaches are different. Functional programming focuses on expressing code in the form of mathematical functions that avoid maintaining state across multiple invocations. While functional languages such as Haskell have been around for a number of years, new functional (themed) languages such as Scala, F# and Clojure have sparked some interest in this paradigm. Due to the way in which functional languages manage state, interest in these languages has increased by many developers seeking to make the most out of multi-core processors. Many concurrent languages are also functional languages. The distinction lies in the emphasis on running operations in parallel. A number of such languages exist; Erlang is currently the most popular of these languages. Concurrent languages commonly provide some means for handling concurrency by using messages to communicate across multiple threads.</p>"
"2010-01",Functional languages,languages-and-frameworks,Assess,"<p>The remaining two language types included on the radar are often grouped together. While functional and concurrent languages may be adopted in similar environments, their approaches are different. Functional programming focuses on expressing code in the form of mathematical functions that avoid maintaining state across multiple invocations. While functional languages such as Haskell have been around for a number of years, new functional (themed) languages such as Scala, F# and Clojure have sparked some interest in this paradigm. Due to the way in which functional languages manage state, interest in these languages has increased by many developers seeking to make the most out of multi-core processors. Many concurrent languages are also functional languages. The distinction lies in the emphasis on running operations in parallel. A number of such languages exist; Erlang is currently the most popular of these languages. Concurrent languages commonly provide some means for handling concurrency by using messages to communicate across multiple threads.</p>"
"2010-04",EC2 & S3,Platforms,Trial,"<p>The Cloud continues to be of interest to us, with Software as a Service the most mature cloud component. Platform and Infrastructure as service offerings have reached different levels of maturity, and we reflect that in our placement of EC2, Google App Engine and Azure.</p>"
"2010-01",Java language end of life,languages-and-frameworks,Assess,"<p>As C# continues to surge ahead, the Java language appears to be moving slowly as the Java community waits for Java 7. Having waited for new language features to surface for almost 3 years, the Java community has begun to innovate in new languages that run on the Java Virtual Machine, languages such as Groovy, JRuby, Scala and Clojure. With the increase in number of languages available on the JVM, we expect enterprises to begin to assess the suitability of reducing the amount of Java specific code developed in their enterprise applications in favor of these newer languages.</p>"
"2010-04",ASP.NET MVC,Tools,Adopt,""
"2010-04",Squid,Tools,Adopt,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-04",Subversion,Tools,Adopt,""
"2010-04",Distributed version control,Tools,Trial,"<p>Subversion moves back into the Adopt section of the radar because it is a solid version control tool suitable for most teams. We consider Subversion’s features to be the basic standard for a modern version control tool. ThoughtWorkers continue to embrace and recommend Distributed Version Control tools such as Git and Mercurial, but we caution that these systems often require deeper understanding to get the most out of them. New to the radar is GitHub, a “social coding” tool supporting both source code hosting and social networking. GitHub is arguably one of the main reasons Git has become the leading DVCS tool, and GitHub’s collaboration features are often used by enterprises that need to support distributed teams.</p>"
"2010-04",Message buses without smarts,Tools,Trial,""
"2010-04",MongoDB,Tools,Trial,""
"2010-04",Neo4J,Tools,Trial,""
"2010-04",Next-generation test tools,Tools,Trial,""
"2010-04",Cross mobile platforms,Tools,Assess,""
"2010-04",GitHub,Tools,Assess,""
"2010-04",NoSQL,Tools,Assess,""
"2010-04",RDF triple stores,Tools,Assess,"<p>Semantic Web W3C standards, and the tools implementing them, are at last worthy of real attention. RDF and RDFa allow anyone to say anything about anything in a sharable, structured format. This proves a much more powerful means of linking and structuring data from disparate sources than the strictness of RDBMS, or the mess that is unstructured Web data. Correspondingly SPARQL is the query standard that allows information to be mined from RDF marked-up data.</p>"
"2010-04",Restfulie,Tools,Assess,""
"2010-04",Visualizations for business data,Tools,Assess,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-04",ESB,Tools,Hold,""
"2010-04",Language workbenches,Tools,Hold,"<p>It is likely that test languages will continue to evolve with the assistance of language workbenches, tools that assist in the creation of domain specific languages. Tools such as Jetbrains’ MPS and Intentional Software’s offering are leading the industry in this area. Both provide ways of creating new languages to map business software more closely to the end user’s domain language.</p>"
"2010-04",Build pipelines,Techniques,Adopt,""
"2010-04",Emergent design,Techniques,Adopt,""
"2010-04",Evolutionary database,Techniques,Adopt,""
"2010-04",Web as platform,Techniques,Adopt,""
"2010-04",Automation of technical tests,Techniques,Trial,"<p>Significant advances in the tools for automating functional testing haven’t been replicated in the technical testing space. Data management for performance, load and soak testing is a particular issue. However, the tools are improving and increased visibility for these tools supports the early and often technical testing that we advocate.</p>"
"2010-04",Continuous deployment,Techniques,Trial,""
"2010-04",Lean software development,Techniques,Trial,"<p>As Agile practices move further toward mainstream adoption, we see significant benefits from the adoption of Lean software development practices as well. These practices have their roots in the Toyota Production System and complement much of our understanding of Agile software development to date. One topic that Lean has also given us greater insight into is that of set-based design. Set-based design leads us to implement similar solutions at the same time while the cost of doing so is constrained. This leads us into the area of emergent design and the ability to let experience shape our design decisions and defer key decisions until the last responsible moment.</p>"
"2010-04",Polyglot programming,Techniques,Trial,"<p>This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-04",Service choreography,Techniques,Trial,""
"2010-04",Visualization and metrics,Techniques,Trial,""
"2010-04",Incremental data warehousing,Techniques,Assess,""
"2010-04",OAuth,Techniques,Assess,"<p>The Web is a global data structure that enables us to share information. However not all data is meant to be shared by everyone and it’s important to be able to share information on the Web in a disciplined and governable manner without requiring massive centralized infrastructure. OAuth provides a way of sharing resources on the Web responsibly and securely. It is a Web protocol (for Web browsers or machine-to-machine interactions), which allows federated authorization of access to Web resources. What’s interesting is that OAuth is a simple protocol to implement and utilize and yet its design goals match many common enterprise authorization problems. OAuth remains in the assessment category, however, because it has fragmented, and the IETF has not yet drawn the community back together under an Internet RFC.</p>"
"2010-04",Scrum certification,Techniques,Hold,""
"2010-04",ALT.NET,Platforms,Adopt,""
"2010-04",Cloud,Platforms,Adopt,"<p>The Cloud continues to be of interest to us, with Software as a Service the most mature cloud component. Platform and Infrastructure as service offerings have reached different levels of maturity, and we reflect that in our placement of EC2, Google App Engine and Azure.</p>"
"2010-04",IE6 End of Life,Platforms,Adopt,""
"2010-04",iPhone,Platforms,Adopt,<p>The iPhone and android operating systems have rapidly become key players in the mobile platform marketplace. Apple’s app store and Google’s open source operating system have helped both companies leapfrog the competition in capturing developer mindshare.</p>
"2010-04",JVM as platform,Platforms,Adopt,""
"2010-04",Platform roadmaps,Platforms,Adopt,""
"2010-04",Android,Platforms,Trial,""
"2010-04",Application appliances,Platforms,Assess,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-04",Facebook as business platform,Platforms,Assess,""
"2010-04",Google App Engine,Platforms,Assess,"<p>The Cloud continues to be of interest to us, with Software as a Service the most mature cloud component. Platform and Infrastructure as service offerings have reached different levels of maturity, and we reflect that in our placement of EC2, Google App Engine and Azure.</p>"
"2010-04",Google as corporate platform,Platforms,Assess,""
"2010-04",Large format mobile devices,Platforms,Assess,"<p>Large format mobile devices, such as the Apple iPad and Amazon Kindle, provide a new model of ubiquitous computing. Their long battery life, simple interfaces and easy connectivity have the potential to change the way we interact with computers. Apple’s new user interfaces discard the familiar desktop metaphors of files and folders that have been standard since the introduction of the Macintosh in 1984.</p>"
"2010-04",Location based services,Platforms,Assess,""
"2010-04",Mobile Web,Platforms,Assess,""
"2010-04",Azure,Platforms,Hold,""
"2010-04",GWT,Platforms,Hold,"<p>Google Web Toolkit (GWT) offers an interesting premise: write Swing-like Java code and generate unit testable JavaScript widgets and user interfaces. From a practical standpoint this doesn’t work well. First, using code-gen to produce the artifacts is time consuming, artificially extending build times and requiring manual changes to obtain optimal package layout. Second, if the JavaScript doesn’t behave exactly as you want you will have to hack the generated code. Third, using Java to generate JavaScript means that you can’t take direct advantage of the powerful features of JavaScript or numerous libraries such as JQuery. Finally, the JUnit support is quite limited, for example code using reflection cannot be tested.</p>"
"2010-04",IE8,Platforms,Hold,""
"2010-04",Rich Internet Applications,Platforms,Hold,""
"2010-04",WS-* beyond basic profile,Platforms,Hold,""
"2010-04",C# 4.0,languages-and-frameworks,Adopt,""
"2010-04",JavaScript as a first class language,languages-and-frameworks,Adopt,""
"2010-04",Ruby/Jruby,languages-and-frameworks,Adopt,""
"2010-04",Domain-Specific Languages,languages-and-frameworks,Trial,""
"2010-04",Groovy,languages-and-frameworks,Trial,""
"2010-04",Clojure,languages-and-frameworks,Assess,"<p>In the previous radar, we lumped functional languages together in a group. For this version, we’ve exploded that group and started calling out the ones interesting to us. Of the current crop of functional languages, the one we like the most is Clojure: a simple, elegant implementation of Lisp on the JVM. The other two that we fi nd interesting are Scala (a re-thinking of Java in functional form) and F#, the OCaml derivative from Microsoft that now appears “in the box” in Visual Studio 2010.</p>"
"2010-04",F#,languages-and-frameworks,Assess,"<p>In the previous radar, we lumped functional languages together in a group. For this version, we’ve exploded that group and started calling out the ones interesting to us. Of the current crop of functional languages, the one we like the most is Clojure: a simple, elegant implementation of Lisp on the JVM. The other two that we fi nd interesting are Scala (a re-thinking of Java in functional form) and F#, the OCaml derivative from Microsoft that now appears “in the box” in Visual Studio 2010.</p>"
"2010-04",HTML 5,languages-and-frameworks,Assess,"<p>HTML 5 offers a large number of improvements over HTML 4 and XHTML 1.0. Many of these improvements are focused on providing support for developing complex web applications, and improving integration of rich content such as audio and video in standard ways. Features such as client-side storage, web sockets and offline use will further establish the position of the web browser as a viable enterprise application platform.</p>"
"2010-04",Java language end of life,languages-and-frameworks,Assess,""
"2010-04",Scala,languages-and-frameworks,Assess,"<p>In the previous radar, we lumped functional languages together in a group. For this version, we’ve exploded that group and started calling out the ones interesting to us. Of the current crop of functional languages, the one we like the most is Clojure: a simple, elegant implementation of Lisp on the JVM. The other two that we fi nd interesting are Scala (a re-thinking of Java in functional form) and F#, the OCaml derivative from Microsoft that now appears “in the box” in Visual Studio 2010.</p>"
"2010-08",ASP,Tools,Adopt,"<p>We have been tracking ASP.NET MVC since its early release candidates. This is an exciting development in the .NET space from Microsoft, both in the programming model and in the open source license under which Microsoft has released the library. ASP.NET MVC is similar to MVC frameworks on the Java platform and is a move away from the ASP.NET Web Forms approach to one that supports greater levels of automated testing.</p>"
"2010-08",Squid,Tools,Adopt,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",Subversion,Tools,Adopt,""
"2010-08",Apache camel,Tools,Trial,""
"2010-08",Git,Tools,Trial,""
"2010-08",Mercurial,Tools,Trial,""
"2010-08",Message buses without smarts,Tools,Trial,""
"2010-08",MongoDB,Tools,Trial,"<p>Document-oriented databases treat each record as a document with the ability to add any number of fields of arbitrary size. A relatively large amount of the attention that has been directed at document databases has landed on mongoDB, a highly scalable option with support for querying, indexing, replication and sharding. Beyond its enterprise feature set, its popularity is aided by its driver support for Java, Ruby, PHP, C#, Python and a number of other languages.</p>"
"2010-08",Neo4J,Tools,Trial,"<p>Graph databases store information as interconnected nodes with arbitrary relations rather than tables and nameless relations. Graph databases are an excellent choice for complex domains with semi-structured data since they’re schema-less and highly extensible. Neo4j is the front-runner in the graph database space being an embedded Java component, which supports fast storage and search of graphs for Java solutions (including server applications). The Neo4j community is highly active and now has a basic REST API enabling it as more general purpose database engine. Neo4j moving into the trial category is representative of our experience trialling it in real-world scenarios and the early successes we’ve achieved.</p>"
"2010-08",Next-generation test tools,Tools,Trial,""
"2010-08",NoSQL,Tools,Trial,""
"2010-08",Puppet,Tools,Trial,"<p>Puppet is a free, open source data center automation tool for managing changes to your production and production-like environments. Using Puppet, you can keep the configuration of your environments in version control and push changes out to your systems in a controlled, automated fashion. Infrastructure automation tools like puppet have the benefits of reducing manual effort allowing ops to focus on higher priorities, providing consistency and repeatability by reducing waste eliminating environmental differences between test and production environments.</p>"
"2010-08",Cross mobile platforms,Tools,Assess,""
"2010-08",Github,Tools,Assess,""
"2010-08",RDF triple stores,Tools,Assess,""
"2010-08",Restfulie,Tools,Assess,""
"2010-08",ESB,Tools,Hold,""
"2010-08",Intentional Software,Tools,Hold,"<p>ThoughtWorks has been working with Intentional Software for the past several years, and we are thrilled at the recent limited availability and production use of the Intentional Domain Workbench. We believe this technology represents a radical departure from the traditional software development approach. We place this technology in the assess ring, since we believe that it is time to begin exploring the application of Intentional’s technology in proofs of concept.</p>"
"2010-08",Build pipelines,Techniques,Adopt,""
"2010-08",Coding architects,Techniques,Adopt,"<p>This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",Emergent design,Techniques,Adopt,""
"2010-08",Evolutionary database,Techniques,Adopt,""
"2010-08",Platform roadmaps,Techniques,Adopt,""
"2010-08",Visualization and metrics,Techniques,Adopt,""
"2010-08",Web as platform,Techniques,Adopt,""
"2010-08",Automation of technical tests,Techniques,Trial,""
"2010-08",Capability modeling,Techniques,Trial,""
"2010-08",Continuous deployment,Techniques,Trial,""
"2010-08",Evolutionary architecture,Techniques,Trial,""
"2010-08",Polyglot programming,Techniques,Trial,"<p>This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",Service choreography,Techniques,Trial,""
"2010-08",DevOps,Techniques,Assess,"<p>DevOps is a new movement seeking to achieve the business need for rapid delivery of software products while maintaining the stability of live environments. It uses two approaches: first, promoting closer collaboration between development and operations; second, applying practices shared with agile (collaboration, automation, simplicity, etc) to operations processes such as provisioning, change management, and production monitoring. It encompasses culture, processes, and tools - all supporting better communication, faster feedback and delivery, and more predictable outcomes.</p>"
"2010-08",Incremental data warehousing,Techniques,Assess,"<p>The industry has seen significant changes to the way we use and store data over the past few years. Agile development practices have lead to greater emphasis on evolutionary database design, requiring new tools that support migration of schemas in line with changes to the domain model of an application. As storage space consistently becomes cheaper and data access speeds increase, many organizations are investigating the use of multiple schemas to hold data for different purposes, e.g. transactional and analysis schemas. Incremental data warehousing is becoming increasingly popular as the cost of moving data between a transactional data store and an analysis environment is less than the value of having access to near real-time reporting of critical business data.</p>"
"2010-08",Database based integration,Techniques,Hold,""
"2010-08",Scrum certification,Techniques,Hold,""
"2010-08",ALT.NET,Platforms,Adopt,"<p>While .NET has proven itself as a solid platform, many practitioners are dissatisfied with many of the default Microsoft tools and practices. This has led to the growth of the Alt.NET community, which champions techniques that we find more effective along with (usually opensource) tools that better support them.</p>"
"2010-08",Android,Platforms,Adopt,""
"2010-08",ATOM,Platforms,Adopt,""
"2010-08",IE6 End of Life,Platforms,Adopt,"<p>IE6 is a significantly deficient browser with many documented security holes and should be phased out as soon as possible. Browsers such as Firefox and Chrome can be installed alongside IE, allowing the user to choose which one to use. We recommend that organizations with intranet applications that require IE6 consider using it only for those specific applications, and install one of these alongside for general use.</p>"
"2010-08",iPhone,Platforms,Adopt,"<p>The iPhone changed the face of the mobile phone. The iPad has the potential to radically alter the way users interact with and consume Web-based resources and applications and will spawn a plethora of similar tablet devices. The addition of wireless application distribution in IOS4 allows organizations to securely host and distribute in-house applications without using the App Store, overcoming one of the main barriers to corporate adoption. IOS4’s introduction of multitasking with applications running in the background has opened up new possibilities for enterprise applications, at the cost of extra battery usage.</p>"
"2010-08",JVM as platform,Platforms,Adopt,"<p>While the radar has called out the possibility of the Java language nearing its end of life, the JVM is demonstrating its resilience as a general-purpose virtual machine for other languages such as Ruby, Groovy, Scala and Clojure.</p>"
"2010-08",KVM,Platforms,Adopt,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",EC2 & S3,Platforms,Trial,""
"2010-08",Facebook as business platform,Platforms,Trial,""
"2010-08",App containers,Platforms,Assess,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",Application appliances,Platforms,Assess,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",Azure,Platforms,Assess,""
"2010-08",Google App Engine,Platforms,Assess,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",Google as corporate platform,Platforms,Assess,"<p>At the start of October 2009, ThoughtWorks became a customer of Google Apps. Although we have heard a wide range of opinions about the user experience offered by Google Mail, Calendar and Documents, the general consensus is that our largely consultant workforce is happy with the move. The next step that we as a company are looking to embrace is Google as a corporate platform beyond the standard Google Apps; in particular we are evaluating the use of Google App Engine for a number of internal systems initiatives. Google App Engine, Amazon EC2 and Salesforce.com all claim to be Cloud providers, yet each of their offerings differ. The Cloud fits into a broad categorization of service offerings split out into Infrastructure as a Service (e.g. Amazon EC2 and Rackspace), Platform as a Service (e.g. App Engine) and Software as a Service (e.g. Salesforce.com). In some cases, providers may span multiple service categories, further diluting the Cloud as a label. Regardless, the value of infrastructure, platform and software in the cloud is difficult to question and although many offerings have hit bumps in the road, they certainly have earned their position on the radar.</p>"
"2010-08",GPGPU,Platforms,Assess,""
"2010-08",iPad,Platforms,Assess,""
"2010-08",Location based services,Platforms,Assess,"<p>Google maps has led the way in bringing mapping mainstream. But businesses, governments and non-profit organizations are now learning to use these location based services to communicate more effectively with customers. With other mapping services providers getting into the act, there is going to be a proliferation of applications built around mapping targeted at customers who are now much more map-savvy.</p>"
"2010-08",Mobile Web,Platforms,Assess,""
"2010-08",OAuth,Platforms,Assess,""
"2010-08",RDFa,Platforms,Assess,""
"2010-08",GWT,Platforms,Hold,""
"2010-08",IE8,Platforms,Hold,"<p>Internet browsers such as Google Chrome, Safari, Opera and Firefox, have made serious inroads in the implementation of the HTML 5 specification. With these advances it is now possible to experience many of the improvements that HTML brings. Unfortunately so far Microsoft has lagged on implementing these new standards. We recommend that organizations favor standards compliant browsers over IE8.</p>"
"2010-08",Rich Internet Applications,Platforms,Hold,"<p>Rich Internet Applications (RIA) are a popular topic, driven by the effort and marketing of big vendors pushing their offerings. RIA is useful for complex visualizations but ill-suited for other programming tasks because it doesn’t fully support the engineering hygiene we require for our tools: testing is difficult and application partitioning is cumbersome. These frameworks also don’t support common elements we take for granted in applications hosted in a browser: bookmarking, addressability, browser controls, and other aspects. We’re not entirely critical of these tools, but think that their sweet spot is rich visualizations, not building traditional data entry CRUD applications.</p>"
"2010-08",WS-* beyond basic profile,Platforms,Hold,""
"2010-08",C# 4.0,languages-and-frameworks,Adopt,""
"2010-08",JavaScript as a first class language,languages-and-frameworks,Adopt,""
"2010-08",JRuby,languages-and-frameworks,Adopt,""
"2010-08",Ruby,languages-and-frameworks,Adopt,"<p>This language/framework was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2010-08",Domain-Specific Languages,languages-and-frameworks,Trial,"<p>A significant amount of innovation occurred in the JavaScript space thanks to the Ruby on Rails community. This same community has helped to move both internal and external DSLs forward as a means for more closely mapping business requirements in code. Ruby’s syntax lends itself easily to the creation of easily readable DSLs, while language tools such as ANTLR help to make the creation of new domain specific languages more accessible to interested developers.</p>"
"2010-08",Groovy,languages-and-frameworks,Trial,""
"2010-08",Clojure,languages-and-frameworks,Assess,""
"2010-08",F#,languages-and-frameworks,Assess,""
"2010-08",HTML 5,languages-and-frameworks,Assess,""
"2010-08",Java language end of life,languages-and-frameworks,Assess,"<p>As we have discussed previously, the Java language appears to be moving slowly as the Java community waits for Java 7. Having waited for new language features to surface for almost 3 years, the Java community has begun to innovate in new languages that run on the Java Virtual Machine, languages such as Groovy, JRuby, Scala and Clojure. With the increase in number of languages available on the JVM, we expect enterprises to begin to assess the suitability of reducing the amount of Java specific code developed in their enterprise applications in favor of these newer languages. This is not to say that enterprises should outright abandon Java as a programming language, we do however suggest that you look for alternatives that may be more fi t for purpose in the area that new development is taking place.</p>"
"2010-08",Scala,languages-and-frameworks,Assess,"<p>The functional languages F#, Clojure and Scala still reside in the assess ring of the radar. Interest in functional languages continues to grow. Two characteristics of functional languages in particular are driving this interest, immutability with its implications for parallelism and functions as first class objects. While the introduction of closures to C# brings some of the latter capability, functional languages are almost synonymous with immutability. The placement of these languages within the assess ring indicates our view of their relative maturity and appropriateness. F#, based on OCaml, is fully supported within the Visual Studio toolset. F# includes support for objects and imperative constructs in addition to functional language constructs in a natural way. Scala, like F#, combines the object and functional paradigms, although the syntax of Scala is more Java-like. Clojure began as a JVM language and is now available on the .NET CLR. Clojure does allow for mutable state although it has an extensive set of immutable persistent data structures, all supporting multi-threaded applications. There are many similarities between these three languages, but at the moment we believe F# and Clojure to be better suited to most organizations for assessing than Scala. More work clearly needs to be done to validate this assertion.</p>"
"2011-01",RDFa,Platforms,Assess,"<p>RDFa, a mechanism for attaching meaningful vocabularies to HTML content that is being quickly and widely adopted by content providers, is the first mainstream success to arise from the Semantic Web stack. RDFa enables tools ranging from custom point integrations to Google spiders to more richly understand your Web content. If you would like to quickly open up your content to a multitude of integration possibilities in a simple, cheap, standards-based fashion, we recommend you try RDFa.</p>"
"2011-01",vFabric,Platforms,Assess,""
"2011-01",Infrastructure as code,Tools,Adopt,"<p>The large number of hosts and devices in a modern datacenter or cloud deployment have made manually installing and configuring infrastructure unwise. Infrastructure as code is an approach whereby infrastructure configuration is scripted or described by files that are stored in version control, and changes are pushed out to the datacenter in a controlled manner. This parallels the discipline of source control and build promotion used in software development, hence ‘as code’. The two front-running open source tools for infrastructure automation are Chef and Puppet. They both use a textual DSL to script automation. Using this approach provides consistent and repeatable environment changes, reducing the manual effort involved, especially in troubleshooting environmental differences.</p>"
"2011-01",Squid,Tools,Adopt,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-01",Subversion,Tools,Adopt,""
"2011-01",Apache camel,Tools,Trial,"<p>In today’s connected systems environments almost all new development needs to integrate with existing applications and services. In conjunction with our adoption of simple message buses and integration techniques at the edges of a system, we have successfully used small libraries such as Apache Camel to perform the protocol bridging, message transformation and message routing tasks common to such integrations. Camel’s fluent Java interface, unit testing support and connectors for many different transports and message formats provide for an effective anti-corruption layer when implementing distributed applications.</p>"
"2011-01",Git,Tools,Trial,<p>In previous radars we recommended Distributed Version Control (DVCS) tools in general while mentioning Git and Mercurial in particular. In this edition we narrow our recommendation to only Mercurial and Git as these two have become the clear front-runners. Due to its success and the associated network effect GitHub remains the recommended option for enterprises that want to interact with the open source community.</p>
"2011-01",Mercurial,Tools,Trial,""
"2011-01",Message buses without smarts,Tools,Trial,""
"2011-01",Next-generation test tools,Tools,Trial,""
"2011-01",NoSQL,Tools,Trial,"<p>NoSQL is about scale, massive datasets, cloud data, social network data, data in buckets, data in graphs i.e. a range of use cases for which “traditional” SQL databases may not be the optimal choice. Unravelling NoSQL and trying to explain what it is and why you should or should not be interested in it is difficult as the term covers a wide range of technologies, data architectures and priorities and represents as much a movement or a school of thought as it does any particular technology. Types of NoSQL technologies include key-value, column and object stores as well as document, graph and XML databases.</p>"
"2011-01",Splunk,Tools,Trial,""
"2011-01",API management services,Tools,Assess,""
"2011-01",Cross mobile platforms,Tools,Assess,"<p>While there has been much publicity around Apple’s squashing cross-platform development options for the iPhone and iPad, there are still perfectly valid options. PhoneGap and Appcelerator Titanium’s approach is to provide a native compatibility layer for all the major mobile platforms to your Web standard HTML+CSS+JS application.</p>"
"2011-01",Deltacloud,Tools,Assess,""
"2011-01",Github,Tools,Assess,"<p>Subversion moves back into the Adopt section of the radar because it is a solid version control tool suitable for most teams. We consider Subversion’s features to be the basic standard for a modern version control tool. ThoughtWorkers continue to embrace and recommend Distributed Version Control tools such as Git and Mercurial, but we caution that these systems often require deeper understanding to get the most out of them. New to the radar is GitHub, a “social coding” tool supporting both source code hosting and social networking. GitHub is arguably one of the main reasons Git has become the leading DVCS tool, and GitHub’s collaboration features are often used by enterprises that need to support distributed teams.</p>"
"2011-01",RDF triple stores,Tools,Assess,"<p>While we are bullish on RDFa, we remain highly guarded on native RDF triple stores as a persistence mechanism. The leading available triple stores vary greatly in their capabilities, capacity, and performance characteristics. If you are exploring the use of a triple store, you must do extensive testing to make sure the triple store fits your needs.</p>"
"2011-01",Restfulie,Tools,Assess,"<p>The hypermedia constraint from REST is now understood as critical in sharing business protocols over the Web. Unfortunately many frameworks for building computer to- computer systems on the Web are ignorant of this constraint and tend towards simple CRUD systems. Restfulie is the first of a new generation of frameworks that natively support hypermedia, for Ruby, Java, and .NET. In Restfulie, business protocols are implemented using DSLs and exposed across the Web through hypermedia representations; clients drive those protocols through a similar declarative mechanism, consuming server-generated representations as they work towards a business goal. As the fi rst framework of its kind, Restfulie is opinionated and provides strict “training wheels” in order to bootstrap newcomers. However, it is an empirical proof that the Web and hypermedia can be used to orchestrate complex business activities.</p>"
"2011-01",Vagrant,Tools,Assess,""
"2011-01",WCF HTTP,Tools,Assess,"<p>Microsoft’s WCF HTTP API, though currently in the early stages of development, is evolving rapidly, and we’re already impressed by its support for HTTP primitives as well as idioms such as content negotiation and conditional requests. The API encourages the development of highly testable solutions with a clear separation of concerns. What is of particular interest to us is the way in which the project is being developed in Codeplex’s open source community. The ability for the community to steer the development of this part of the .NET platform merits this project’s early inclusion in the radar. While the license does allow for using the library in production today, given the current volatility of the API, we caution against taking a dependency at this early stage; many of the features we’ve admired in recent releases, such as its use of an attributelight programming model based on convention over configuration, may not make it into the first version.</p>"
"2011-01",ESB,Tools,Hold,""
"2011-01",GWT,Platforms,Hold,<p>In the last radar we placed the Google Web Toolkit (GWT) on hold and tried to provide a few reasons for that decision. As it turned out the conciseness of the text didn’t allow us to adequately make our points so that they were not misunderstood. We are interested in a discussion but our opinion about the suitability and usability of GWT has still not changed.</p>
"2011-01",RIA,Platforms,Hold,""
"2011-01",Build pipelines,Techniques,Adopt,"<p>The past 2 years or more has seen a proliferation of continuous integration tools and platforms leading to substantial innovation in the build and release space. Distribution of builds is one such innovation and yet another is the way in which builds are now structured to make greater use of automation in various stages of the build. Build pipelines help to provide greater insight into the quality of each build and the environments to which they have been deployed. A natural expansion of the build pipeline meme is the adoption of continuous deployment techniques, where the intention is to extend the build pipeline into the production environment. This relies on automated deployment techniques and authorization mechanisms built into the continuous integration toolset. One of the key benefits is the ability to move new functionality into production rapidly and reliably.</p>"
"2011-01",Coding architects,Techniques,Adopt,"<p>This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-01",Emergent design,Techniques,Adopt,""
"2011-01",Evolutionary database,Techniques,Adopt,"<p>The industry has seen significant changes to the way we use and store data over the past few years. Agile development practices have lead to greater emphasis on evolutionary database design, requiring new tools that support migration of schemas in line with changes to the domain model of an application. As storage space consistently becomes cheaper and data access speeds increase, many organizations are investigating the use of multiple schemas to hold data for different purposes, e.g. transactional and analysis schemas. Incremental data warehousing is becoming increasingly popular as the cost of moving data between a transactional data store and an analysis environment is less than the value of having access to near real-time reporting of critical business data.</p>"
"2011-01",Platform roadmaps,Techniques,Adopt,""
"2011-01",Visualization and metrics,Techniques,Adopt,<p>Evolutionary and emergent design of enterprise systems requires significant vigilance by development and architecture teams. Collecting metrics to capture development trends is a key part of understanding the stress points for a system under development. Assessing this information in its raw form is even more difficult than taking stock of a system at the source code level. To address this concern we have found a number of visualization tools and techniques to get what we refer to as the 1000ft view of the system and its internal quality. This 1000ft view allows us to identify visual patterns that help find and address issues more quickly.</p>
"2011-01",Web as platform,Techniques,Adopt,"<p>Our understanding of the Web has matured to the point where we believe it is a viable platform for building distributed systems. RESTful techniques have advanced past pretty URIs + JSON towards hypermedia systems that project business protocols over the Internet and support seamless business process and service composition. The Web provides a powerful capability for scale, resiliency, and ease of implementation with commodity infrastructure like caches and Web servers with commodity protocols (like HTTP, AtomPub, and OAuth). Moving from trial to adopt is indicative of our position that the Web is ready for primetime, not just for Internet-facing systems but as a practical base for enterprise systems delivery.</p>"
"2011-01",Acceptance test of journeys,Techniques,Trial,""
"2011-01",Automate database deployment,Techniques,Trial,"<p>When moving to continuous delivery, deployment of database changes should also be automated so that the application release that relies on those changes does not have to wait for manual deployment of the database changes. Automated database deployment ensures that the full cycle of deploying application and database changes is automated.</p>"
"2011-01",Automation of technical tests,Techniques,Trial,"<p>We strongly believe that all software delivery organizations need to be making use of automated technical tests. This sort of test spans failover testing, performance testing and soak testing among others; these activities can start early in a project’s life-cycle and continue through to maintenance. The common practice of waiting until near the end of a project is fraught with risk with little time available to find and fix problems. For example the requirement for a comprehensive production-like environment before the start of performance testing is a dangerous fallacy, we can discover bottlenecks, track performance trends and test our performance tests, without waiting for a perfect environment.</p>"
"2011-01",Capability modeling,Techniques,Trial,""
"2011-01",Categorization & prioritization of technical debt,Techniques,Trial,""
"2011-01",Concurrency abstractions and patterns,Techniques,Trial,""
"2011-01",Continuous deployment,Techniques,Trial,"<p>The past 2 years or more has seen a proliferation of continuous integration tools and platforms leading to substantial innovation in the build and release space. Distribution of builds is one such innovation and yet another is the way in which builds are now structured to make greater use of automation in various stages of the build. Build pipelines help to provide greater insight into the quality of each build and the environments to which they have been deployed. A natural expansion of the build pipeline meme is the adoption of continuous deployment techniques, where the intention is to extend the build pipeline into the production environment. This relies on automated deployment techniques and authorization mechanisms built into the continuous integration toolset. One of the key benefits is the ability to move new functionality into production rapidly and reliably.</p>"
"2011-01",DevOps,Techniques,Trial,"<p>The DevOps movement continues to gain traction as people pay more attention to the often-broken relationship between development and operations. DevOps promotes closer collaboration and joint responsibility between development and operations. DevOps applies agile practices to operations processes such as provisioning, change management and production monitoring and also brings productionlike thinking, tools and environments to development. DevOps is a key underpinning for organizations wanting to achieve continuous delivery of application releases into production.</p>"
"2011-01",Evolutionary architecture,Techniques,Trial,"<p>One principle of agile software development is the notion of the last responsible moment. This notion applied to architectural considerations is controversial among traditional architects. We believe that, given properly articulated principles and appropriate test suites, architectures can evolve to meet the changing needs of a system, allowing for architectural decisions to be made at the last responsible moment without compromising the integrity of the system. We call this approach evolutionary architecture, in that we allow the architecture to evolve over time, always respecting the architectural guiding principles.</p>"
"2011-01",Progressive Enhancement,Techniques,Trial,""
"2011-01",Service choreography,Techniques,Trial,"<p>Integrated business processes now routinely span multiple systems and even enterprises. This raises the question of how these processes should be coordinated. In our experience centralized orchestration solutions often fail to deliver the promised benefits. They are costly to implement, and because they maintain application state on behalf of many consumers, they are often difficult to scale. This has lead us to prefer service choreography, where independently distributed participants collaborate according to an application protocol. Using the Web as platform, hypermedia-driven application protocols allow us to implement integrated business processes that are easy to evolve and easy to scale.</p>"
"2011-01",Real-time business intelligence,Techniques,Assess,"<p>Business are running 24x7, but the information needed to make business decisions is being provided by outdated methods using ETL jobs in batch mode. The batch window is shrinking as businesses move to global markets and are open for longer durations. The data provided by these jobs is out of date by the time the business needs to make a decision. There is substantial value in taking the event as it happens in the transactional system and feeding it to the data warehouse so that the business can get near real-time business intelligence.</p>"
"2011-01",Smart Systems,Techniques,Assess,""
"2011-01",Database based integration,Techniques,Hold,""
"2011-01",Scrum certification,Techniques,Hold,""
"2011-01",Android,Platforms,Adopt,<p>The iPhone and android operating systems have rapidly become key players in the mobile platform marketplace. Apple’s app store and Google’s open source operating system have helped both companies leapfrog the competition in capturing developer mindshare.</p>
"2011-01",ATOM,Platforms,Adopt,""
"2011-01",KVM,Platforms,Adopt,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-01",EC2 & S3,Platforms,Trial,"<p>AWS is the most mature and broadest of the current cloud offerings providing scalable services for computation (EC2), storage (S3 & SBS), databases (SimpleDB & RDS), messaging (SQS & SNS), etc. The list of services provided by AWS continues to expand rapidly with new services being added on an almost monthly basis, (http://bit.ly/90887v). While existing applications can be deployed on AWS through the use of Amazon Machine Images the full benefits of this platform will come from applications that are developed to take advantage of AWS. The usage based billing model adopted by AWS allows organizations to scale applications without large upfront investment and avoid the overhead cost of under utilized hardware.</p>"
"2011-01",Facebook as business platform,Platforms,Trial,"<p>Facebook has become popular in part due to its rich API and explosion of third-party applications. ThoughtWorks is now starting to see our clients consider Facebook as a business platform. In addition to having a Facebook presence, businesses are building Facebook applications that are tightly integrated with their own services and offer useful functionality to Facebook users.</p>"
"2011-01",Heroku,Platforms,Trial,"<p>Heroku is a beautifully simple Platform as a Service (PaaS) for Rack-compatible frameworks such as Ruby on Rails. In contrast to similar offerings for other languages, which often limit development to a programming model specific to the service platform, Heroku uses the standard Rails stack and even allows deployment with a plain Git push. Heroku was recently acquired by Salesforce.com and so has significant backing behind their service.</p>"
"2011-01",iPad,Platforms,Trial,"<p>The iPhone changed the face of the mobile phone. The iPad has the potential to radically alter the way users interact with and consume Web-based resources and applications and will spawn a plethora of similar tablet devices. The addition of wireless application distribution in IOS4 allows organizations to securely host and distribute in-house applications without using the App Store, overcoming one of the main barriers to corporate adoption. IOS4’s introduction of multitasking with applications running in the background has opened up new possibilities for enterprise applications, at the cost of extra battery usage.</p>"
"2011-01",Mobile Web,Platforms,Trial,"<p>Mobile Web was in our Assess category on previous radars, but we’ve moved it into Trial in recognition of the fact that the Web is increasingly consumed through iPhone, Android and tablet devices. Many devices can render a fair approximation of a desktop browser experience, but to present the user with a truly optimal experience we recommend adapting a site to the screen size, display and control behaviors particular to the device. Techniques such as progressive enhancement can allow a single site to adapt to both desktop and mobile browsers. Large format mobile devices, such as the Apple iPad and Amazon Kindle, provide a new model of ubiquitous computing. Their long battery life, simple interfaces and easy connectivity have the potential to change the way we interact with computers. Apple’s new user interfaces discard the familiar desktop metaphors of files and folders that have been standard since the introduction of the Macintosh in 1984.</p>"
"2011-01",App containers,Platforms,Assess,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-01",Application appliances,Platforms,Assess,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-01",Azure,Platforms,Assess,"<p>The Cloud continues to be of interest to us, with Software as a Service the most mature cloud component. Platform and Infrastructure as service offerings have reached different levels of maturity, and we reflect that in our placement of EC2, Google App Engine and Azure.</p>"
"2011-01",GPGPU,Platforms,Assess,""
"2011-01",Node.js,Platforms,Assess,""
"2011-01",OAuth,Platforms,Assess,"<p>OAuth is a Web-based authorization protocol that allows applications to access a user’s secured resources in another application without the user having to share their private security credentials. Now an RFC, OAuth represents a significant standards-based attempt to improve privacy and security for Web browser and machine-based access to distributed Web resources. Library support is patchy and adopters can expect to spend some time wrangling their code to achieve true interoperability. OAuth 2.0 is due towards the end of 2010, with specific flows for Web applications, desktop applications, mobile phones, and household devices. Because OAuth 2.0 is not backwardly compatible with version 1 and the implementation challenges around the current version, OAuth is still in the assess ring.</p>"
"2011-01",OpenStack,Platforms,Assess,""
"2011-01",WS-* beyond basic profile,Platforms,Hold,"<p>Web services are now widely used as an enabler for service oriented architectures as well as for the integration of existing applications. We see mature tools and largely interoperable implementations for web service standards covered by WS-I Basic Profile, but we remain skeptical about the proliferation and value of WS-* standards beyond Basic Profile.</p>"
"2011-01",C# 4.0,languages-and-frameworks,Adopt,"<p>When C# first appeared, many saw it as a direct competitor to the Java language’s dominance in enterprise application development. This was often attributed to the syntactical similarities that the two languages shared. Since its introduction, however, C# has continued to move forward with the adoption of language features such as lambda expressions, extension methods, object initializers and automatic property setters and getters, all of which are available in the 3.5 release of the language. With the 4.0 release of C#, we will see the introduction of a dynamic keyword and named and optional parameters, which will continue to bring C# more in line with languages such as Ruby and well ahead of the Java language.</p>"
"2011-01",JavaScript as a first class language,languages-and-frameworks,Adopt,""
"2011-01",JRuby,languages-and-frameworks,Adopt,"<p>Functional languages have a wide range of practical uses, including simulation, computational fi nance, computational science, large scale data processing and parsing. These fields benefit from functional programming techniques that simplify concurrent execution and the expression of complex mathematical functions concisely. Functional programming requires a shift in thinking for enterprise developers experienced in object oriented development. Moving to an often terse syntax for solving complex problems may initially be intimidating to many. As with all forms of programming languages, syntax is just one aspect of the language itself. In functional programming another significant aspect is the use of common idioms. These idioms speed code comprehension and increase overall maintainability. This might not be news to all, but it is worth noting that dynamic languages are long ready for adoption and trial. Ruby, particularly when deployed on JRuby, is ready for adoption. ThoughtWorks uses Ruby and JRuby extensively in both its Services and Product work. Groovy is ready for trial and could prove more accessible than Ruby/JRuby in a Java shop. For the right type of applications, Ruby, JRuby, and Groovy prove far more effective, expressive, and productive than Java and C#.</p>"
"2011-01",Ruby,languages-and-frameworks,Adopt,"<p>This language/framework was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-01",Domain-Specific Languages,languages-and-frameworks,Trial,""
"2011-01",Groovy,languages-and-frameworks,Trial,"<p>Functional languages have a wide range of practical uses, including simulation, computational fi nance, computational science, large scale data processing and parsing. These fields benefit from functional programming techniques that simplify concurrent execution and the expression of complex mathematical functions concisely. Functional programming requires a shift in thinking for enterprise developers experienced in object oriented development. Moving to an often terse syntax for solving complex problems may initially be intimidating to many. As with all forms of programming languages, syntax is just one aspect of the language itself. In functional programming another significant aspect is the use of common idioms. These idioms speed code comprehension and increase overall maintainability. This might not be news to all, but it is worth noting that dynamic languages are long ready for adoption and trial. Ruby, particularly when deployed on JRuby, is ready for adoption. ThoughtWorks uses Ruby and JRuby extensively in both its Services and Product work. Groovy is ready for trial and could prove more accessible than Ruby/JRuby in a Java shop. For the right type of applications, Ruby, JRuby, and Groovy prove far more effective, expressive, and productive than Java and C#.</p>"
"2011-01",HAML,languages-and-frameworks,Trial,""
"2011-01",HTML 5,languages-and-frameworks,Trial,"<p>HTML 5 continues to be the preferred choice for developing complex Web-based applications, with features including improved integration of rich audio and video content, clientside storage, better document structure, Web sockets and offline use. Safari, Chrome, Firefox and Opera each support significant subsets of the proposed standards, with support coming in Internet Explorer 9. HTML 5 is likely to remain in draft for some time to come, however; early adopters may wish to reflect on the bleakly comedic saga of two separate groups attempting to drive its evolution.</p>"
"2011-01","SASS, SCSS, and LESS",languages-and-frameworks,Trial,""
"2011-01",Scala,languages-and-frameworks,Trial,""
"2011-01",Clojure,languages-and-frameworks,Assess,""
"2011-01",F#,languages-and-frameworks,Assess,""
"2011-01",Java language end of life,languages-and-frameworks,Assess,"<p>The purchase of Sun, and thus their Java assets, by Oracle introduced uncertainty regarding the future of Java. This uncertainty continues despite the recent announcements of Oracle’s Java roadmap, which had both encouraging and worrying aspects. As a result we continue to highlight the issue. We recommend monitoring the situation rather than any immediate actions to move off the platform.</p>"
"2011-07",Caching reverse proxies,Tools,Adopt,<p>Application designs that incorporate caching reverse proxies as first class design elements are simpler and more resilient to infrastructure failures. Placing a caching reverse proxy between an application and a web service it consumes reduces the risk of service failures affecting the application while improving overall system performance.</p>
"2011-07",Git,Tools,Adopt,""
"2011-07",Github,Tools,Adopt,""
"2011-07",Infrastructure as code,Tools,Adopt,"<p>The DevOps movement continues to grow, with developers and operations staff working closely together to solve the “software last mile” problem. Infrastructure as code is a technique for treating infrastructure configuration in the same way as code; checking it into source control, then using it to push changes out to the data center. In addition to web server, application server and application configuration, we are seeing network configuration treated in the same way. Network switch, firewall and load balancer configuration can be infrastructure as code, and even changed at runtime.</p>"
"2011-07",Coding architects,Techniques,Adopt,"<p>This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-07",Continuous Delivery (CD),Techniques,Adopt,""
"2011-07",DevOps,Techniques,Adopt,""
"2011-07",Subversion,Tools,Adopt,"<p>Subversion moves back into the Adopt section of the radar because it is a solid version control tool suitable for most teams. We consider Subversion’s features to be the basic standard for a modern version control tool. ThoughtWorkers continue to embrace and recommend Distributed Version Control tools such as Git and Mercurial, but we caution that these systems often require deeper understanding to get the most out of them. New to the radar is GitHub, a “social coding” tool supporting both source code hosting and social networking. GitHub is arguably one of the main reasons Git has become the leading DVCS tool, and GitHub’s collaboration features are often used by enterprises that need to support distributed teams.</p>"
"2011-07",Mercurial,Tools,Trial,<p>In previous radars we recommended Distributed Version Control (DVCS) tools in general while mentioning Git and Mercurial in particular. In this edition we narrow our recommendation to only Mercurial and Git as these two have become the clear front-runners. Due to its success and the associated network effect GitHub remains the recommended option for enterprises that want to interact with the open source community.</p>
"2011-07",Message buses without smarts,Tools,Trial,""
"2011-07",New Relic beyond Rails,Tools,Trial,<p>We have regularly used New Relic hosted performance monitoring with Ruby on Rails systems in development and production. The combination of fast setup and comprehensive reporting has proven extremely valuable in troubleshooting performance. We are now seeing good results from the New Relic monitoring services for Java and .NET systems.</p>
"2011-07",Next-generation test tools,Tools,Trial,"<p>The Ruby language community is responsible for a number of innovations in the area of testing. The next generation of testing tools such as rspec and Cucumber are two such tools that have come out of this community. These tools, along with ThoughtWorks’ Twist, provide a way to express tests in a more natural language syntax that captures the intent of the system in a way that end users can quickly grasp.</p>"
"2011-07",NoSQL,Tools,Trial,"<p>NoSQL technologies are maturing daily, allowing for innovative solutions as businesses need to scale massively or ask intelligent questions of existing data. Technologies like MongoDB, Riak, Neo4J, Cassandra and many others are helping power the NoSQL space.</p>"
"2011-07",Powershell,Tools,Trial,""
"2011-07",Splunk,Tools,Trial,"<p>Application logs are both a blessing and a curse. They are comforting to have when a production issue arises, but actually digging out the data we need usually requires cobbling together scripts written in tools such as AWK and sed. Splunk is an elegant solution that quickly analyzes many standard log file formats like IIS, Log4J and syslog, and is extensible to custom formats. It indexes files, statically or in real time, to generate canned or custom reports. If the raw log fields do not provide what you need, simply use a regular expression, either inline or to define a new field, to get the desired level of detail. Splunk’s full power is difficult to describe, so we recommend downloading and trying it.</p>"
"2011-07",TLB,Tools,Trial,"<p>If your test suites are growing slower and you have already verified that it is not a serious problem with your application, first make your tests faster, then look at parallelization. The Test Load Balancer (TLB) project is a big development in the world of parallel test execution. It removes the inefficiencies of manual work distribution using smart algorithms and historical test execution data to optimize workload distribution and minimize elapsed time. Further, it orders the tests in intelligent ways like executing the test that failed in the previous execution first to get quicker feedback. Parallel execution can occur across a grid of machines or across multiple processes on a single machine. JUnit, RSpec, Test::Unit, Twist and Cucumber are currently supported and NUnit is under development.</p>"
"2011-07",API management services,Tools,Assess,"<p>Exposing APIs to a large developer community creates nonfunctional requirements that are often the same from one business to another. Key management, authentication, access control, traffic management, caching, tracking and reporting are often implemented as commodity functions that can be reused across applications and businesses without modification. Some service providers have spotted this trend and are offering API management via software as a service. Prominent vendors in this space include Mashery and Apigee, who both offer the option of hosting the service on a customer’s own infrastructure. API management services may also be interesting to enterprise customers who are using Web as platform techniques for their internal SOA, providing a lighter weight alternative to traditional SOA management tools.</p>"
"2011-07",Backbone.js,Tools,Assess,"<p>Even though JavaScript increasingly plays a more important role in today’s world of software development, it is still troublesome to organize in a clean structure. Backbone.js is a library which provides an MVC (model view controller) framework for JavaScript heavy applications. It allows developers to write JavaScript code in a more manageable and testable way.</p>"
"2011-07",Deltacloud,Tools,Assess,"<p>Every Infrastructure as a Service (IaaS) cloud offering provides their own API for performing common tasks. Deltacloud aims to abstract those APIs and provide a RESTful interface for performing common cloud management functions, making it possible to migrate virtual infrastructure between clouds.</p>"
"2011-07",Gradle,Tools,Assess,"<p>Gradle is an attempt to bring sanity to the enterprise build space by marrying best-of-breed tools with cutting edge techniques. Gradle allows you to interact with your existing Maven repositories, but adds scriptability to your builds with a clean domain specific language.</p>"
"2011-07",jQuery Mobile,Tools,Assess,""
"2011-07",Open source BI/ETL tools,Tools,Assess,""
"2011-07",Selenium 2 testing of mobile websites,Tools,Assess,"<p>When building mobile web applications we can now use Selenium 2 mobile tests to run the same acceptance tests on iOS, Android and Blackberry. This works on emulators, simulators and physical devices. We have successfully used this approach on production software for all 3 platforms. While the Blackberry driver is still in beta, we found it stable enough for use. The key challenge is the different ways to install the driver and start the browser, but this only needs to be solved once. We suggest that companies doing mobile web for these devices try this approach. We see no reason why this approach cannot be extended to Windows Phone in the future.</p>"
"2011-07",Sonar,Tools,Assess,""
"2011-07",Vagrant,Tools,Assess,""
"2011-07",Code in configuration,Tools,Hold,""
"2011-07",Cross-platform mobile toolkits,Tools,Hold,""
"2011-07",ESB,Tools,Hold,""
"2011-07",VCS with “implicit workflow”,Tools,Hold,""
"2011-07",Automate database deployment,Techniques,Adopt,""
"2012-10",In-process acceptance testing,Techniques,Adopt,""
"2011-07",Emergent design,Techniques,Adopt,"<p>As Agile practices move further toward mainstream adoption, we see significant benefits from the adoption of Lean software development practices as well. These practices have their roots in the Toyota Production System and complement much of our understanding of Agile software development to date. One topic that Lean has also given us greater insight into is that of set-based design. Set-based design leads us to implement similar solutions at the same time while the cost of doing so is constrained. This leads us into the area of emergent design and the ability to let experience shape our design decisions and defer key decisions until the last responsible moment.</p>"
"2011-07",Evolutionary architecture,Techniques,Adopt,"<p>In contrast to traditional up-front, heavy-weight enterprise architectural designs, we recommend adopting evolutionary architecture. It provides the benefits of enterprise architecture without the problems caused by trying to accurately predict the future. Instead of guessing how components will be re-used, evolutionary architecture supports adaptability, using proper abstractions, database migrations, test suites, continuous integration and refactoring to harvest re-use as it occurs within a system. The driving technical requirements for a system should be identified early to ensure they are properly handled in subsequent designs and implementations. We advocate delaying decisions to the latest responsible moment, which might in fact be up-front for some decisions.</p>"
"2011-07",Evolutionary database,Techniques,Adopt,""
"2011-07",Platform roadmaps,Techniques,Adopt,"<p>Almost every enterprise has “legacy systems” that are expensive to operate and upgrade. Often a system will become legacy over the course of several years, through neglect or atrophy. We recommend using platform roadmaps to maximize the value of a systems portfolio and plan for the upgrade and eventual retirement of systems.</p>"
"2011-07",Progressive Enhancement,Techniques,Adopt,<p>Recent use of progressive enhancement with mobile applications has been very effective and demonstrates the universal nature of this web design strategy. We encourage people to adopt this strategy to keep their code clean and give each user the optimal experience for their device.</p>
"2011-07",Simple performance trending,Techniques,Adopt,""
"2011-07",Visualization and metrics,Techniques,Adopt,<p>Data visualizations have been effective in business and IT decision making. Organizations are making effective use of real time data through visualizations. These visualizations include point in time data as well as trends plotted over time. We are seeing increased adoption of these techniques in optimizing operations and software development.</p>
"2011-07",Acceptance test of journeys,Techniques,Trial,""
"2011-07",Build your own radar,Techniques,Trial,""
"2011-07",Capability modeling,Techniques,Trial,"<p>Initiatives that span multiple projects require shared understanding of the business context, operating model, and strategic goals of an organization, as well as any existing technical, organizational and process constraints impinging on planning and design activities. As part of our evolutionary approach to enterprise architecture, we use business capability modelling to create lightweight hierarchical models of the business functions that are an essential part of an organization’s needs and goals. Capabilities describe an organization’s operating model in terms of goals and competencies (what is to be done), rather than implementation specifics (how things are done). Whereas business architecture models based on people, process or technology are contingent, volatile and often short lived, and therefore ill-suited to the long-term planning needs of the organization, capability models provide a description of the business context that is stable enough to serve as a basis for identifying and prioritising technology and process initiatives.</p>"
"2011-07",Categorization & prioritization of technical debt,Techniques,Trial,""
"2011-07",Concurrency abstractions and patterns,Techniques,Trial,"<p>Concurrency is a difficult problem and increasingly difficult to avoid. Hardware isn’t getting faster but multicore platforms are becoming the norm, with even mobile phones containing two or more processors. Concurrency abstractions and patterns -- which are not new, but less widely known -- are helping address many of the challenges seen in this space. In particular the models seen in Clojure, Erlang, Retlang and Event Patterns offer a more testable and reliable approach than the better known threads, locks and semaphores.</p>"
"2011-07",Continuous deployment,Techniques,Trial,"<p>If you are wondering “What comes after agile?,” you should look towards continuous delivery. While your development processes may be fully optimized, it still might take your organization weeks or months to get a single change into production. Continuous delivery focuses on maximizing automation including infrastructure as code, environment management and deployment automation to ensure your system is always ready for production. It is about tightening your feedback loops and not putting off anything until the end. Continuous delivery is not the same as continuous deployment, which means deploying every change to production. Continuous delivery is not a cowboy show. It puts you in charge of your production environment. The business can pick and choose what and when to deploy. If you think you’ve nailed agile development, but aren’t considering how to achieve continuous delivery, you really haven’t even started.</p>"
"2011-07",Event API’s,Techniques,Trial,""
"2011-07",Iterative data warehousing,Techniques,Trial,"<p>Like iterative software development, there is lot of value to be gained by delivering data warehousing projects using iterative techniques. Iterative data warehousing techniques allow the end users of the data warehouse to determine what reports they want and the ETL developers and data modelers to deliver those features without wasting time with data modeling and ETL jobs that do not provide immediate value to the business.</p>"
"2011-07",Thoughtful caching,Techniques,Trial,""
"2011-07",Decision driven BI,Techniques,Assess,"<p>Traditional approaches to implementing data warehouses and business intelligence work from the bottom up in horizontal tiers, assembling and cleansing data sources from across the enterprise then aggregating them into a comprehensive data mart before reports can be generated. Some people are now employing an alternative approach that starts with the real outcome--a business decision--and pulls work items through the process as needed to support that decision. Decision driven business intelligence allows a more incremental approach to BI and facilitates rapid feedback to the decision makers who are the ultimate consumers of business intelligence.</p>"
"2011-07",Event driven business intelligence,Techniques,Assess,"<p>This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-07",Event sourcing,Techniques,Assess,""
"2011-07",Smart systems,Techniques,Assess,"<p>Smart Phones with a GPS, cameras and a screen are but one example of smart systems which are proliferating around us, fusing the real and the digital world. Augmented reality apps like Google Goggles, geolocation services & smart grids are just some of the possible applications.</p>"
"2011-07",Database based integration,Techniques,Hold,""
"2011-07",Feature branching,Techniques,Hold,""
"2011-07",Manual infrastructure management,Techniques,Hold,""
"2011-07",Procedure oriented integration,Techniques,Hold,"<p>One of the goals of SOA has been to decouple services by exchanging human-readable business documents instead of programming parameters. However, in implementing SOA, many businesses have simply used web services to expose the underlying programming models of back-end systems. Procedure oriented integration is nothing more than remote procedure calls implemented via a different protocol. The consequences of this are additional layers of complexity with no improvement in business flexibility. To avoid this, implementers of SOA should first understand the business meaning of their services, then implement human-readable contracts that are independent of legacy system implementation.</p>"
"2011-07",Scrum certification,Techniques,Hold,""
"2011-07",ATOM,Platforms,Adopt,""
"2011-07",AWS,Platforms,Adopt,"<p>Amazon continues to evolve the AWS cloud with services such as RDB, making it even easier to engineer and deploy cloud-based applications. Not every AWS feature is as mature as EC2 and S3, so you should carefully evaluate which AWS components to use. We feel comfortable recommending AWS where elasticity or on-demand computing are required.</p>"
"2011-07",JRuby,Platforms,Adopt,"<p>Charles Nutter and the JRuby team continue to improve JRuby at a frantic pace. It is fast and they place massive importance on keeping their ecosystem up-to-date, including DB adapters, gem management, and modern Rails deployment. Rails 3 + JRuby is an awesome platform. There really is no reason to not be using Ruby, one of our favorite languages, in the enterprise.</p>"
"2011-07",KVM,Platforms,Adopt,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-07",Mobile web,Platforms,Adopt,""
"2011-07",Heroku,Platforms,Trial,""
"2011-07",Offline mobile webapps (just HTML5),Platforms,Trial,""
"2011-07",Tablet (formerly iPad),Platforms,Trial,""
"2011-07",Ubiquitous computing,Platforms,Trial,""
"2011-07",Cloud Foundry,Platforms,Assess,""
"2011-07",GPGPU,Platforms,Assess,""
"2011-07",Node.js,Platforms,Assess,""
"2011-07",OAuth,Platforms,Assess,"<p>OAuth is a web-friendly, lightweight standard for authorization that allows a user to share private resources between internet services, e.g., allowing your favorite social networking site to access your photos from your favorite photo sharing site. OAuth is simple, avoids password proliferation, and allows a service to grant bare minimum privileges. If you are exposing your application’s data in a lightweight, web-friendly manner you should strongly consider using OAuth as your standard for authorization.</p>"
"2011-07",OpenStack,Platforms,Assess,"<p>OpenStack is a new cloud operating system that promises a complete open-source solution. OpenStack is a fabric cloud controller which leverages existing virtualization technologies such as KVM and will integrate with other virtualisation tools such as Xen and OpenVZ. Currently under heavy development, OpenStack is expected to provide a stable production-ready solution by the end of Q2 2011.</p>"
"2011-07",vFabric,Platforms,Assess,""
"2011-07",GWT,Platforms,Hold,""
"2011-07",Java portal servers,Platforms,Hold,""
"2011-07",WS-*,Platforms,Hold,"<p>Previously our advice has been to tread carefully when using the WS-* stack beyond the basic profile. Given the progress and acceptance of simpler web-as-platform techniques such as REST and OAuth and the known issues with the WS-*, it should only be used cautiously.</p>"
"2011-07",HTML 5,languages-and-frameworks,Adopt,""
"2011-07",JavaScript as a first class language,languages-and-frameworks,Adopt,"<p>The maintainability, testability and readability of JavaScript is a very significant contributor to the productivity of teams producing Web-based applications and sites. ThoughtWorks believes JavaScript deserves to be treated as a first class language, viewing it as second class citizen has become an excuse for a whole series of bad practice we would not tolerate in Java or C#. We need to use the same kind of tools (e.g. unit testing) and approaches (e.g. refactoring) as we’d use for any other production language. V8 and other JavaScript engines are raising the bar on performance, while Flash & Silverlight seem to be losing momentum to HTML5 + JavaScript in areas where a rich client-like experience is required. This is good news for all interested in open standards on the Web.</p>"
"2011-07",CoffeeScript,languages-and-frameworks,Trial,""
"2011-07",Domain-Specific Languages,languages-and-frameworks,Trial,""
"2011-07",HAML,languages-and-frameworks,Trial,"<p>HAML is a language that allows you to use indentation to lay out the structure of HTML. While not a general replacement for HTML, it is effective for focusing on the hierarchical structure of tags.</p>"
"2011-07","SASS, SCSS, and LESS",languages-and-frameworks,Trial,""
"2011-07",Scala,languages-and-frameworks,Trial,""
"2011-07",Clojure,languages-and-frameworks,Assess,"<p>The functional languages F#, Clojure and Scala still reside in the assess ring of the radar. Interest in functional languages continues to grow. Two characteristics of functional languages in particular are driving this interest, immutability with its implications for parallelism and functions as first class objects. While the introduction of closures to C# brings some of the latter capability, functional languages are almost synonymous with immutability. The placement of these languages within the assess ring indicates our view of their relative maturity and appropriateness. F#, based on OCaml, is fully supported within the Visual Studio toolset. F# includes support for objects and imperative constructs in addition to functional language constructs in a natural way. Scala, like F#, combines the object and functional paradigms, although the syntax of Scala is more Java-like. Clojure began as a JVM language and is now available on the .NET CLR. Clojure does allow for mutable state although it has an extensive set of immutable persistent data structures, all supporting multi-threaded applications. There are many similarities between these three languages, but at the moment we believe F# and Clojure to be better suited to most organizations for assessing than Scala. More work clearly needs to be done to validate this assertion.</p>"
"2011-07",F#,languages-and-frameworks,Assess,"<p>The functional languages F#, Clojure and Scala still reside in the assess ring of the radar. Interest in functional languages continues to grow. Two characteristics of functional languages in particular are driving this interest, immutability with its implications for parallelism and functions as first class objects. While the introduction of closures to C# brings some of the latter capability, functional languages are almost synonymous with immutability. The placement of these languages within the assess ring indicates our view of their relative maturity and appropriateness. F#, based on OCaml, is fully supported within the Visual Studio toolset. F# includes support for objects and imperative constructs in addition to functional language constructs in a natural way. Scala, like F#, combines the object and functional paradigms, although the syntax of Scala is more Java-like. Clojure began as a JVM language and is now available on the .NET CLR. Clojure does allow for mutable state although it has an extensive set of immutable persistent data structures, all supporting multi-threaded applications. There are many similarities between these three languages, but at the moment we believe F# and Clojure to be better suited to most organizations for assessing than Scala. More work clearly needs to be done to validate this assertion.</p>"
"2011-07",Future of Java,languages-and-frameworks,Assess,"<p>This language/framework was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2011-07",Logic in stored procedures,languages-and-frameworks,Hold,""
"2012-03",Git,Tools,Adopt,"<p>Starting from a challenge posed to the Linux community to stop using commercial version control, Git has proved itself. Git embodies a well architected, high performance implementation of distributed version control. Git is powerful, so it should be used with respect, but that power enables agile engineering workflows that simply cannot exist with other tools. Git’s popularity is supported by the existence of GitHub. GitHub combines public and private Git repositories, social networking, and a host of other innovative tools and approaches.</p>"
"2012-03",Github,Tools,Adopt,"<p>Starting from a challenge posed to the Linux community to stop using commercial version control, Git has proved itself. Git embodies a well architected, high performance implementation of distributed version control. Git is powerful, so it should be used with respect, but that power enables agile engineering workflows that simply cannot exist with other tools. Git’s popularity is supported by the existence of GitHub. GitHub combines public and private Git repositories, social networking, and a host of other innovative tools and approaches.</p>"
"2012-03",Infrastructure as code,Tools,Adopt,""
"2012-03",Client-side MVC,Tools,Trial,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",FPM,Tools,Trial,"<p>There are many advantages to using OS-native packages to deploy components and dependencies, however the tools which build native packages for Linux are not trivial. FPM is a useful tool which makes it easy to create RPM, DEB, or Solaris packages with a minimum of fuss.</p>"
"2012-03",Frank,Tools,Trial,""
"2012-03",Jade,Tools,Trial,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",JavaScript micro frameworks,Tools,Trial,""
"2012-03",JavaScript tooling,Tools,Trial,"<p>JavaScript is now established as a powerful, mainstream language that can be used in a variety environments both on client and server sides. As JavaScript codebases expand, more JavaScript tooling support becomes necessary, especially in the continuous integration and testing spaces. Tools like Backbone.js, SpineJS, JavaScriptMVC, Jasmine, JSTestDriver and HRcov are coming to the forefront. They are created by a vibrant community that continues to grow.</p>"
"2012-03",Log aggregation & indexing,Tools,Trial,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",Message buses without smarts,Tools,Trial,"<p>In contrast we have seen considerable success with Simple Message Buses where the integration problems are solved at the end points, rather than inside a vendor ESB system. The most well known Simple Message Bus approach is one based on the principles of REST and leveraging the proven scalability of the web. However organizations that have already invested in ESB infrastructure can leverage the useful parts of that infrastructure (reliable messaging etc) while still using a Simple Message Bus approach and performing integrations at the edges of the system.</p>"
"2012-03",NuGet,Tools,Trial,""
"2012-03",Polyglot Persistence,Tools,Trial,""
"2012-03",PowerShell,Tools,Trial,"<p>Powershell is as important tool for managing Windows servers and applications. Built into Windows 2008 and Windows 7, Powershell allows Unix-like scripting and automation across a server farm. Scripts can be executed on remote machines, and a single command can manage hundreds of machines at once. Powershell scripts can deploy and configure applications and operating system components, and can be extended by writing .NET “commandlets.”</p>"
"2012-03",PSake,Tools,Trial,""
"2012-03",Vagrant,Tools,Trial,""
"2012-03",Gradle,Tools,Assess,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",jQuery Mobile,Tools,Assess,<p>Thoughtworks has used jQuery Mobile on two projects with mobile websites and had mixed experiences. One project found the library very useful for dealing with device differences and graceful degradation on older browsers. On this project we were working in a way that fit with the jQuery Mobile approach. Our other project found the tool less useful and felt to some extent it was trying to force them to work a particular way that did not fit their application well. For these reasons we have decided to leave this tool in assess. If you are doing mobile web it is definitely worth spiking but it may not fit every application.</p>
"2012-03",Logic-free markup,Tools,Assess,""
"2012-03",Open source BI/ETL tools,Tools,Assess,"<p>Open source BI tools such as Pentaho, JasperSoft, CloverETL, Talend, BIRT and SpagoBI are matching features with the proprietary tools and allowing for easy entry into the BI space. We recommend that you assess them.</p>"
"2012-03",Riak,Tools,Assess,"<p>Riak is a distributed key-value store that is schemaless and data-type agnostic. It can be put to good use in write heavy projects to store data such as sessions, shopping carts and streaming logs. The ability of the distributed cluster to self recover, distribute data across the cluster with tunable consistency and availability settings, do collision detection and resolve those if needed can be helpful in high availability environments and provide interesting solutions in the architecture.</p>"
"2012-03",Sonar,Tools,Assess,"<p>Measuring software internal quality is still a mystery, even though many source code metrics have been around for years. The problem with those metrics is they usually only capture one aspect of quality. We must consult many metrics to come to a conclusion about the overall quality of our code. Sonar is an integrated tool for checking, tracking and visualizing those metrics. It not only combines metrics together, but also mixes them with historical measures, giving us a better insight into the internal quality of the codebase.</p>"
"2012-03",Code in configuration,Tools,Hold,<p>Many organizations try to minimize change in production IT environments. This frequently leads to behavioral anti-patterns. One example of this is over use of code in configuration to affect the behavior of production systems. Changes that really belong in code end up in configuration files which don’t necessarily pass through the same levels of testing as the application. Streamlining the path to production and focusing on quality simplifies rather than complicate things.</p>
"2012-03",Cross-platform mobile toolkits,Tools,Hold,"<p>With very few exceptions, tools that claimed to create seamless user experiences across Windows, Linux and OSX did not deliver. We ended up with compromised experiences on one or more of the operating systems. Mobile adds complexity to this problem with different hardware form factors and conventions for user interactions. We have made several attempts to use cross platform mobile toolkits on our projects with varying degrees of success. We saw issues like having to create a project for each platform or invoking specific native UI widgets to get things working. For these reasons we have put cross platform mobile toolkits in hold. While this may change in the future, we remain skeptical especially given past experiences on hardware that was far more homogeneous.</p>"
"2012-03",ESB,Tools,Hold,""
"2012-03",Maven,Tools,Hold,""
"2012-03",VCS with “implicit workflow”,Tools,Hold,""
"2012-03",Automate database deployment,Techniques,Adopt,"<p>If the rate at which business is changing is an indicator of change in requirements, then the days of doing upfront database design are gone. Instead, projects should follow evolutionary database techniques and continue to change their database schemas as new requirements are implemented over the course of the project. Deployment of database changes should also be automated so that the application release that relies on those changes does not have to wait for manual deployment of the database changes. Automated database deployment ensures that application and database changes can be deployed automatically. Evolutionary database and automated database deployments ensure highly productive teams a path to continuous delivery.</p>"
"2012-03",Coding architects,Techniques,Adopt,"<p>This technique was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",Continuous Delivery (CD),Techniques,Adopt,"<p>If you are wondering “What comes after agile?,” you should look towards continuous delivery. While your development processes may be fully optimized, it still might take your organization weeks or months to get a single change into production. Continuous delivery focuses on maximizing automation including infrastructure as code, environment management and deployment automation to ensure your system is always ready for production. It is about tightening your feedback loops and not putting off anything until the end. Continuous delivery is not the same as continuous deployment, which means deploying every change to production. Continuous delivery is not a cowboy show. It puts you in charge of your production environment. The business can pick and choose what and when to deploy. If you think you’ve nailed agile development, but aren’t considering how to achieve continuous delivery, you really haven’t even started.</p>"
"2012-03",Data visualizations of development and operations,Techniques,Adopt,"<p>We have long advocated for both static and dynamic code analysis tools to help glean information about your code base. As the focus of software development broadens because of the Continuous Delivery movement, data visualizations of development and operations with effective, actionable profiling and monitoring should be part of your technical stack as well.</p>"
"2012-03",DevOps,Techniques,Adopt,"<p>Improving the interactions and relationship between development and IT operations gives us more effective delivery and production systems that are more stable and maintainable. Creating a DevOps culture requires attention to team organization, work practices, reporting lines, and incentives - leading to joint responsibility for faster and safer delivery. We recommend adopting DevOps because we cannot see any situation where attention in this area will not have a positive benefit.</p>"
"2012-03",Emergent design,Techniques,Adopt,"<p>Emergent design is one of the more advanced aspects of agile engineering practices, and therefore an area of active research & development. Such architectures should be driven by the underlying technical requirements of the system, rather than speculative planning for a future that may change. We have identified at least two facets of emergent design: the Lean software principle of last responsible moment, which mostly applies to greenfield projects, and finding & harvesting idiomatic patterns, which is more applicable to existing projects.</p>"
"2012-03",Evolutionary architecture,Techniques,Adopt,"<p>We recommend adopting evolutionary architecture as an alternative to traditional up-front, heavy-weight enterprise architectural designs.</p>"
"2012-03",Evolutionary database,Techniques,Adopt,"<p>If the rate at which business is changing is an indicator of change in requirements, then the days of doing upfront database design are gone. Instead, projects should follow evolutionary database techniques and continue to change their database schemas as new requirements are implemented over the course of the project. Deployment of database changes should also be automated so that the application release that relies on those changes does not have to wait for manual deployment of the database changes. Automated database deployment ensures that application and database changes can be deployed automatically. Evolutionary database and automated database deployments ensure highly productive teams a path to continuous delivery.</p>"
"2012-03",Health check pages,Techniques,Adopt,""
"2012-03",Simple performance trending,Techniques,Adopt,"<p>Starting performance tests late in a project is risky and costly. Very simple performance tests that exercise key parts of the system, run on a regular basis, are good enough to track trends, so we can react if we see a change in performance. Run these tests with your build or as an overnight job and graph the results to create simple performance trending. Complex performance tests in a truly representative environment are still useful, but don’t wait for them to start understanding how the performance of your code is changing.</p>"
"2012-03",Test at the appropriate level,Techniques,Adopt,"<p>The advent of behavior-driven design (BDD) testing frameworks like Cucumber, combined with browser automation tools like Selenium, has encouraged widespread use of acceptance testing at the browser level. This unfortunately encouraged doing the bulk of testing where the cost to run the tests is the greatest. Instead, we should test at the appropriate level, as close to the code as possible, so that tests can be run with maximum efficiency. Browser-level tests should be the icing on the cake, supported by acceptance and unit tests executed at appropriate layers.</p>"
"2012-03",Acceptance test of journeys,Techniques,Trial,"<p>Many teams focus acceptance testing at the story level, but this can lead to a large number of hard to maintain tests, and a focus on completing individual stories instead of coherent functionality needed to go live. A more holistic approach is to group user stories into journeys for which we create acceptance tests. Journeys through a system are a set of user interactions that provide value for both users and the business. At the outset a journey acceptance test will cover only one step, but as stories are completed the journey is expanded to encompass each stage in the user’s progress. Once the acceptance test of journeys passes, this tells us we have delivered real value.</p>"
"2012-03",Agile analytics,Techniques,Trial,""
"2012-03",Build your own radar,Techniques,Trial,"<p>Building your own technology radar helps you decide, normalize, and publicize consensus technology views for all interested parties. ThoughtWorks produces a technology radar for clients and friends, telling the world our opinions about upcoming technology trends. You should do this for your own company as well. Too many decisions in large companies happen in a vacuum, with no input from the technologists who have to live with them every day.</p>"
"2012-03",Categorization & prioritization of technical debt,Techniques,Trial,"<p>Technical debt is a powerful and useful metaphor for dealing with the compromises we make when building software. Unfortunately it has become a catch-all term for many different kinds of issues and problems, leading to confusion and “devaluation” of the term. A very useful approach for dealing with this is catagorization of technical debt, assigning value and prioritizing debt payback in an analogous way to user stories. This helps the team focus on the most important areas and keeps issues transparent and measurable.</p>"
"2012-03",Embedded servlet containers,Techniques,Trial,"<p>Embedding a servlet container, such as Jetty, inside a Java application has many advantages over running the application inside a container. Testing is relatively painless because of the simple startup, and the development environment is closer to production. Nasty surprises like mismatched versions of libraries or drivers are eliminated by not sharing across multiple applications. While you will have to manage and monitor multiple Java Virtual Machines in production using this model, we feel the advantages offered by the simplicity and isolation are significant.</p>"
"2012-03",Event API’s,Techniques,Trial,"<p>RESTful APIs have become standard in our industry. A good REST API provides a simple, lightweight means of building customizations and integrations. However, many of the quick, high value integrations we’d like to build require knowing when something happened. Consider building an event API, which, when used in conjunction with a REST API, facilitates simple workflow, notification, and synchronization integrations. These integrations often require no more than 20 or 30 lines of code. Often event APIs take the form of a “web hook” or callback mechanism, but don’t be afraid of using a poll-based Atom style either. An Atom event API scales cheaply and gives the client the power to guarantee delivery.</p>"
"2012-03",Infrastructure automation of development workstations,Techniques,Trial,""
"2012-03",Out-of-container functional testing,Techniques,Trial,""
"2012-03",Performance testing as a first-class citizen,Techniques,Trial,""
"2012-03",Single command deploy,Techniques,Trial,<p>A key step in the Continuous Delivery process is the ability to release software arbitrarily close to when the business wants it. The ability to do single command deploy relies on a complete set of activities that fall under the umbrella of Continuous Delivery including extensive automation of everything from build/test to scripted environment provisioning and deployment. We have found that adopting this as a goal tends to drive the automation and testing pre-requisites upstream into the rest of your organization.</p>
"2012-03",Thoughtful caching,Techniques,Trial,<p>All too often caching is an afterthought used to address performance problems with a blanket approach and common cache lifetime. This leads to issues and workarounds. The “time value” of information is inherently linked to the business purpose and hence needs to be captured at the same time as other requirements. We believe thoughtful caching should be addressed early in the project and not just treated as a last minute performance fix.</p>
"2012-03",Windows infrastructure automation,Techniques,Trial,""
"2012-03",Event sourcing,Techniques,Assess,"<p>Event sourcing is an approach to thinking about persistent data where the primary record is a log of all events that make updates. A traditional representation of database state can be entirely recreated by reprocessing this event log. Event sourcing’s benefits include strong auditing, creation of historic state, and replaying of events for debugging and analysis. Event sourcing has been around for a while, but we think it is used much less than it should be.</p>"
"2012-03",Experience Design (XD),Techniques,Assess,<p>Experience Design (XD) is an example of ways in which agility must evolve to accommodate real-world constraints. We are always interested in finding innovative ways to incorporate what have traditionally been up-front exercises into practices like Continuous Delivery. XD is a ripe field for study.</p>
"2012-03",Mechanical sympathy,Techniques,Assess,"<p>There is a worrying trend that developers are becoming too distant from the hardware on which their code runs. Increasing virtualization and separation between development and operations makes this worse. In stark contrast some teams are writing code that leverages mechanical sympathy to get incredibly high performance from their software. The LMAX Disruptor is an open-source example in Java. For high performance cases like finance and Big data, getting closer to the metal can yield big returns.</p>"
"2012-03",Microservices,Techniques,Assess,"<p>Microservices, often deployed out-of-container or using an embedded HTTP server, are a move away from traditional large technical services. This approach trades benefits such as maintainability for additional operational complexity. These drawbacks are typically addressed using infrastructure automation and continuous deployment techniques. On balance, microservices are an effective way of managing technical debt and handling different scaling characteristics especially when deployed in a service oriented architecture built around business capabilities.</p>"
"2012-03",Production immune system,Techniques,Assess,"<p>Continuous Delivery techniques are shortening the “last mile” to get changes into production, allowing more frequent feature releases. A production immune system tracks changes as they are put into production, and automatically rolls back changes that have a negative effect on key metrics, such as revenue. Solid metrics, as well as automated A/B deployment, are required for this kind of aggressive rollback to be successful.</p>"
"2012-03",Database based integration,Techniques,Hold,""
"2012-03",Feature branching,Techniques,Hold,""
"2012-03",Manual infrastructure management,Techniques,Hold,"<p>Despite advances in automation, many people fall back on manual infrastructure management. We often see problems caused by manual configuration of firewalls and load balancers, and especially by DBAs cutting and pasting SQL scripts to run against production databases. All of these activities, if not fully automated, should at least be scripted and repeatable across environments.</p>"
"2012-03",Scrum certification,Techniques,Hold,"<p>Scrum was one of the founding approaches to Agile software development, and continues to provide a worthwhile core for the management side of software development. Scrum Certification schemes have proven counterproductive, granting only a veneer of competence, which often misleads teams into a distorted experience of agility.</p>"
"2012-03",Server / application container end-of-life,Techniques,Hold,"<p>A decade ago when memory was at a premium, application servers made a lot of sense. They were popular and useful as a mechanism to run and manage multiple applications on a shared server or cluster. These days applications are more often run on separate physical or virtual servers and the need for an application server is reduced. Consider evaluating server / application container end-of-life within your organization, and only use one if you benefit from the added complexity.</p>"
"2012-03",Test recorders,Techniques,Hold,""
"2012-03",ATOM,Platforms,Adopt,""
"2012-03",AWS,Platforms,Adopt,"<p>While it can be all too easy to ignore geographical location of cloud-based services, for legal and technical reasons it can be a serious constraint when considering appropriate platforms. With the recently announced Brazil and Singapore regions, Amazon has made AWSbased systems more viable for people in areas previously poorly served by IaaS providers. In addition, they continue to add features to existing services, such as VPC. We remain confident in recommending AWS for those situations where flexibility in provisioning resources is key.</p>"
"2012-03",Care about hardware,Platforms,Adopt,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",Communication between those responsible for hardware and software,Platforms,Adopt,<p>One of the principal mechanisms that allows agile software development to work is feedback loops. One common yet expensive broken feedback loop we have observed is the lack of communication between those responsible for hardware and software. The end result creates cost but not worth. You must view architecture holistically; neither hardware nor software has a full enough perspective to be successful alone.</p>
"2012-03",KVM,Platforms,Adopt,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",Mobile web,Platforms,Adopt,"<p>Mobile web was in our trial ring on previous radars, but we’ve moved it into adopt in recognition of the fact we have created many mobile web applications. We believe this is the right way to create web content for mobile devices.</p>"
"2012-03",AppHarbor,Platforms,Trial,<p>AppHarbor is a Platform as a Service (PaaS) offering for the .NET Platform using the same pricing model and structure pioneered by Heroku. It is a promising take on the deployment of .NET applications as it abstracts away most of the underlying configuration needs that come with the platform. It is maturing quickly and we expect it will see growing interest in time to come.</p>
"2012-03",Domain-specific PaaS,Platforms,Trial,""
"2012-03",Heroku,Platforms,Trial,"<p>Heroku is a beautifully simple Platform as a Service (PaaS). Although Heroku began as a Ruby on Rails platform, it is evolving to support a variety of languages and web frameworks, most recently Clojure. Heroku uses a standard stack and deploys applications with a simple Git push. Heroku’s recent acquisition by Salesforce.com has not diminished its service quality.</p>"
"2012-03",Linux containers,Platforms,Trial,""
"2012-03",Offline mobile webapps (just HTML5),Platforms,Trial,"<p>HTML5 includes features that allow control and storage of offline data within the browser using client side JavaScript. These features allows creation of offline mobile web applications in a cross platform way that would have previously required installed applications. For instance an application that can download articles for reading later or a data capture application that can work offline and upload when you are online. While the standard is not finalized yet, support for these offline features is available and ready for use in the WebKit based browsers found on iOS, Android and newer Blackberry phones.</p>"
"2012-03",Private Clouds,Platforms,Trial,""
"2012-03",Tablet,Platforms,Trial,"<p>Tablet devices provide a new model of computing. The next generation of tablets show the potential for new interaction paradigms, and we expect interest and innovation to continue to escalate.</p>"
"2012-03",Ubiquitous computing,Platforms,Trial,"<p>Ubiquitous computing is tricky term as it covers many different ideas. What we find interesting and exciting at the moment is that both consumer and specialist mobile devices are increasingly based on commodity operating systems such as Android or iOS. This means that in many cases, software can be developed by organizations themselves, opening the door to innovative new applications without requiring expensive niche skills. Lower price points for the hardware also make this area more accessible, especially with peripherals like payment card readers, PIN key pads and high quality bar code scanners becoming available for both Android and iOS devices. When combined with features already available on these consumer devices, whole new ways of working open up.</p>"
"2012-03",Windows Phone 7,Platforms,Trial,"<p>Windows Phone 7 has surprised even some of the long time critics of Windows platforms. After many failed attempts, Microsoft has managed not only to produce a mobile operating system that provides a user experience on par with the other major contenders in the space but also the development support to go with it. Microsoft is making Windows Phone 7 a viable competitor and another choice for a more integrated experience in the corporate arena. Whether it will be able to change adoption trends remains to be seen.</p>"
"2012-03",Cloud Foundry,Platforms,Assess,"<p>Cloud Foundry is an open source Platform as a Service that can be deployed in your own data center or hosted by VMWare. At present Cloud Foundry supports Java/ Spring applications, Rails, Sinatra, Grails and Node.js. Additional services include MongoDB, MySQL and Redis. The platform seems to be enjoying active development with the recent addition of Scala and Lift support. Cloud Foundry is an interesting addition to the growing list of PaaS solutions. It is not clear what the relationship between vFabric and Cloud Foundry will be going forward.</p>"
"2012-03",GPGPU,Platforms,Assess,"<p>The use of GPUs for computing offers efficiencies and performance for certain classes of problems that would be prohibitively expensive for more traditional hardware. Problems that fit Single Instruction Multiple Data (SIMD) processing models can gain significant advantages at the cost of difficult learning curves using specialized APIs. OpenCL, CUDA from NVidia and DirectCompute from Microsoft offer developers access to General-purpose computing on graphics processing units (GPGPU).</p>"
"2012-03",Hybrid clouds,Platforms,Assess,"<p>Hybrid clouds describe a set of patterns that combine the best features of public clouds and private data centers. They allow applications to run in a private data center during normal periods then use rented space in a public cloud for overflow capacity during peak traffic periods. Another way to combine public and private clouds in an agile way is to use the elasticity and malleability of public clouds for developing and understanding an application’s production characteristics, then moving it into permanent infrastructure in a private data center when it is stable.</p>"
"2012-03",Node.js,Platforms,Assess,""
"2012-03",OpenSocial,Platforms,Assess,"<p>OpenSocial is a specification that provides a standard way to share content between semi-trusted applications. While initially proposed for public facing social networking sites, it has possibly more potential within the corporate firewall, where the benefits of being able to share data and content between applications in a standard manner frequently outweigh the requirements of scale and security.</p>"
"2012-03",Single threaded servers with asynchronous I/O,Platforms,Assess,""
"2012-03",vFabric,Platforms,Assess,"<p>vFabric is a new Platform as a Service (PaaS) offering from VMWare. Based on enhanced versions of opensource web and messaging platforms Tomcat, Apache, and RabbitMQ, vFabric aims to deliver a Java based PaaS on a variety of cloud platforms. Currently supported platforms include VMForce, a collaboration between VMWare and force.com, Google App Engine and Amazon EC2. The addition of the GemFire in-memory distributed data management platform and Hyperic monitoring and management tool make vFabric an interesting set of technologies for Java developers looking to move to the cloud.</p>"
"2012-03",Buying solutions you can only afford one of,Platforms,Hold,"<p>Many teams encounter problems that are caused by their test environment missing an expensive hardware component that is only present in production. While a pre-production environment in many cases cannot approach the scale of a production environment, all of its components should be present. We recommend not buying solutions you can only afford one of, such as SAN, firewalls or load balancers, as this prevents realistic testing anywhere but in production.</p>"
"2012-03",GWT,Platforms,Hold,"<p>GWT is a reasonable implementation of a poor architectural choice. GWT attempts to hide many of the details of the web as a platform by creating desktop metaphors in Java and generating JavaScript code to implement them. First, in many ways, JavaScript is more powerful and expressive than Java, so we suspect that the generation is going in the wrong direction. Secondly, it is impossible to hide a complex abstraction difference like that from event-driven desktop to stateless-web without leaky abstraction headaches eventually popping up. Third, it suffers from the same shortcomings of many elaborate frameworks, where building simple, aligned applications is quick and easy, building more sophisticated but not supported functionality is possible but difficult, and building the level of sophistication required by any non-trivial application becomes either impossible or so difficult it isn’t reasonable.</p>"
"2012-03",Java portal servers,Platforms,Hold,""
"2012-03",RIA,Platforms,Hold,"<p>We have long been less than enthusiastic about RIA technologies such as Flash and Silverlight because of vendor lock in potential, anemic support for agile engineering practices, and potential for overuse. It seems even the large vendors are starting to agree with us. Now that modern versions of HTML handle most of the common cases that formerly required RIA, we feel that new projects must have enormous justification and careful strategic thought before using any of these technologies.</p>"
"2012-03",Treating VMs like physical infrastructure,Platforms,Hold,"<p>While virtualization is on the rise, some organizations are treating virtual machines like physical infrastructure. We frown on doing a full operating system install for each VM or using VMs for load testing. Virtual machines can be cloned, snapshotted, and manipulated in ways physical machines cannot, and also have vastly different performance characteristics than physical hardware. VMs should be used with full understanding of their benefits and limitations, otherwise you can really get into trouble with them.</p>"
"2012-03",WS-*,Platforms,Hold,""
"2012-03",Zero-code packages,Platforms,Hold,""
"2012-03",Care about languages,languages-and-frameworks,Adopt,""
"2012-03",HTML 5,languages-and-frameworks,Adopt,"<p>While HTML5 is an evolving standard, many elements have reached the stage where they can be safely used in production to create both on and offline mobile web applications. Based on our projects we think HTML5 is ready to be adopted for mobile web applications. As the standard continues to evolve we expect HTML5 will become an increasingly viable alternative to native applications with the distinct advantage of being inherently cross platform.</p>"
"2012-03",JavaScript as a first class language,languages-and-frameworks,Adopt,"<p>Rich experiences delivered via the web to desktops, tablets and mobile devices rely heavily on JavaScript, and we continue to recommend treating JavaScript as a “first class” language within your application. Developers should carefully consider how they structure, test, refactor and maintain JavaScript code, applying the same rigor as they would with any other programming language.</p>"
"2012-03",Clojure,languages-and-frameworks,Trial,""
"2012-03",CoffeeScript,languages-and-frameworks,Trial,"<p>JavaScript is a powerful, ubiquitous programming language with tricky and error prone syntax. Coffeescript fixes many of the warts of JavaScript in a clean, simple syntax that generates readable JavaScript. For example, creating true private variables in JavaScript is a syntactic nightmare; CoffeeScript generates the technically correct but hideous syntax. Some readers may be confused by our advocacy of Coffeescript given our general dislike for GWT, because on the surface they seem similar: tools that generate JavaScript. However, it is the level of abstraction that differs. GWT has an elaborate component model, which tries to hide details about the underlying language (JavaScript) and platform (the web). Coffeescript tries to make it easier to write proper JavaScript, avoiding pathological but default “features” of JavaScript, and does not build a layer that tries to insulate you from the platform.</p>"
"2012-03",Domain-Specific Languages,languages-and-frameworks,Trial,""
"2012-03","SASS, SCSS, and LESS",languages-and-frameworks,Trial,""
"2012-03",Scala,languages-and-frameworks,Trial,""
"2012-03",ClojureScript,languages-and-frameworks,Assess,""
"2012-03",F#,languages-and-frameworks,Assess,""
"2012-03",Functional Java,languages-and-frameworks,Assess,"<p>Functional programming continues its slow but steady ascent into developer mind share and, increasingly, code bases. New languages like Clojure, Scala, and F# offer great new features. Now libraries such as Functional Java, TotallyLazy and LambdaJ are back porting some functional language capabilities, particularly around higher-order functions and collections, into Java. We like this trend because it previews common capabilities of future languages yet allows developers to stay in their comfort zone.</p>"
"2012-03",Future of Java,languages-and-frameworks,Assess,"<p>This language/framework was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-03",Google Dart,languages-and-frameworks,Hold,""
"2012-03",Logic in stored procedures,languages-and-frameworks,Hold,""
"2012-10",AppCode,Tools,Adopt,"<p>Apple’s mobile devices are going strong and native apps are a cornerstone of their success. Writing these native apps has become much more pleasant and productive since JetBrains launched AppCode, an IDE for iOS and OS X development that replicates the strengths of their IDEs for other platforms.</p>"
"2012-10",Embedded servlet containers,Tools,Adopt,"<p>We have talked much already about embedded servlet containers - and these are now widely adopted on our projects. Tools such as SimpleWeb and Webbit take the simple, embedded approach further and offer raw HTTP server functionality without implementing the Java Servlet specification. We are pleased to see a corresponding reduction in the complexity of test code that takes advantage of this.</p>"
"2012-10",Graphite,Tools,Adopt,""
"2012-10",Immutable servers,Tools,Adopt,""
"2012-10",Infrastructure as code,Tools,Adopt,"<p>We continue to highlight infrastructure as code. This technique treats infrastructure configuration in the same way as code; checking configuration into source control, then carefully pushing changes out to the data center.</p>"
"2012-10",Jasmine paired with Node.js,Tools,Adopt,""
"2012-10",Silverback,Tools,Adopt,"<p>There are a couple of usability testing tools that match our preferred ‘guerrilla’ approach. Eye-tracking has long been a useful technique when designing compelling user interfaces, however the equipment and software associated with it is expensive and typically requires the use of specialist firms. Crazy Egg is a cheaper, software-only solution that produces heat maps based on mouse movement. This movement has a strong correlation with gaze, and can be used as a reasonable approximation. Silverback captures not only the screen during a test, but also records the face and voice of the user. This can be invaluable in sharing rich test experiences with the wider development team.</p>"
"2012-10",Apache Pig,Tools,Trial,""
"2012-10",D3,Tools,Trial,"<p>D3 is a JavaScript library for binding datasets into the DOM, and then declaratively transforming the document to create rich visualizations - ranging from graphs to heatmaps. With support for HTML, CSS and SVG, and an extensible plug-in model, we like the fact that this library allows us to deliver information in more intuitive ways.</p>"
"2012-10",Dependency Structure Matrices,Tools,Trial,"<p>We strongly favor code-base visualization techniques. In particular, Dependency Structure Matrices (DSM) have proven to be extremely useful, especially in support of an evolutionary architecture and emergent design. Tools support for DSM is widespread.</p>"
"2012-10",Frank,Tools,Trial,""
"2012-10",Gradle,Tools,Trial,"<p>Two things have caused fatigue with XML-based build tools like Ant and Maven: too many angry pointy braces and the coarseness of plug-in architectures. While syntax issues can be dealt with through generation, plug-in architectures severely limit the ability for build tools to grow gracefully as projects become more complex. We have come to feel that plug-ins are the wrong level of abstraction, and prefer language-based tools like Gradle and Rake instead, because they offer finer-grained abstractions and more flexibility long term.</p>"
"2012-10",Highcharts,Tools,Trial,"<p>Increasingly performant JavaScript engines, combined with widespread support for embedded SVG documents in HTML, has lead to pure JavaScript-based client-side graphing and visualization solutions gaining a lot of traction. Highcharts is one of the best ones we have come across, with out-of-the-box support for multiple highly-configurable interactive chart types, and the ability to easily render large data sets.</p>"
"2012-10",Jade,Tools,Trial,"<p>This tool was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-10",JavaScript micro frameworks,Tools,Trial,"<p>With mobile applications on the rise, JavaScript size and performance is even more critical. JavaScript micro frameworks have emerged as a direct response to ‘bloat’ in some of the larger libraries. These small libraries do exactly one thing, such as DOM selection or MVC, and can be under one kilobyte in size. By combining a number of micro frameworks, developers can get exactly the functionality they need without the overhead of a larger library. Microjs.com hosts a collection of these micro frameworks, as well as a tool that can bundle them into a single library.</p>"
"2012-10",Locust,Tools,Trial,""
"2012-10",Gremlin,languages-and-frameworks,Assess,"<p>Gremlin is an imperative graph traversal language supported by multiple graph databases. Its concise constructs can be used in place of the native language of the database, leading to faster development times and, in some cases, faster execution. We recommend its use as a good alternative in simple scenarios.</p>"
"2012-10",NuGet,Tools,Trial,"<p>Package management systems are a widely accepted practice for incorporating third party libraries. Tools such as RubyGems, Maven, APT, are available at both language and system level. NuGet is such a system for .Net platform. It consists of a Visual Studio IDE extension and a PowerShell module that opens the possibility for further improving build automation on the .Net platform.</p>"
"2012-10",PSake,Tools,Trial,""
"2012-10",Rake for Java & .NET,Tools,Trial,"<p>Of all the build tools and languages we use across our projects, the one we keep coming back to is Rake. Rake is a beautiful, simple and powerful build language implemented as an internal Domain-Specific Language on Ruby. Ruby’s ability to run across several virtual-machine platforms means that Rake is equally available - while leaving open the option to utilize more language-specific tools for some tasks. Finding a similar combination of elegance and flexibility is difficult regardless of your platform, so we recommend trying Rake for Java and .Net projects.</p>"
"2012-10",SaaS performance testing tools,Tools,Trial,"<p>Rather than wrestling with licenses and setting up clusters of machines for performance testing, we’re seeing a rise in SaaS performance testing tools such as Blitz.io and Tealeaf. These services make it easy to run performance tests with a huge number of geographically diverse clients, without investing heavily in infrastructure.</p>"
"2012-10",Vagrant,Tools,Trial,<p>The tool Vagrant makes it simple for teams to distribute virtualized development environments constructed using version-control friendly descriptors. Vagrant helps eliminate environmental differences in development and reduce troubleshooting waste.</p>
"2012-10",Crazy Egg,Tools,Assess,"<p>There are a couple of usability testing tools that match our preferred ‘guerrilla’ approach. Eye-tracking has long been a useful technique when designing compelling user interfaces, however the equipment and software associated with it is expensive and typically requires the use of specialist firms. Crazy Egg is a cheaper, software-only solution that produces heat maps based on mouse movement. This movement has a strong correlation with gaze, and can be used as a reasonable approximation. Silverback captures not only the screen during a test, but also records the face and voice of the user. This can be invaluable in sharing rich test experiences with the wider development team.</p>"
"2012-10",GemJars,Tools,Assess,"<p>In a mixed Ruby/Java application, running on the JVM, there are differences in package format and dependency resolution that need to be dealt with. By providing an Ivy compatible proxy that packages RubyGems as JARs and uses Ivy to resolve Gem dependencies, GemJars consolidates and simplifies the building of truly polyglot codebases.</p>"
"2012-10",Light Table,Tools,Assess,""
"2012-10",Logic-free markup,Tools,Assess,"<p>While MVC has been a staple of web development for the past few years, most libraries and frameworks fail to adhere to one of its most important principles: keeping logic out of the view layer. The consequences of not having logicfree markup include complex dependencies, difficulty testing and inability to reuse code. Recent DSLs like Mustache are available for many languages and platforms and have started to turn the trend. They allow editing in any tool, without extra requirements for language support and provide huge gains for UI development and overall application design.</p>"
"2012-10",Riemann,Tools,Assess,""
"2012-10",Zipkin,Tools,Assess,"<p>When building distributed applications to address web-scale or big data requirements, setting up appropriate monitoring tools becomes a non-trivial exercise. Zipkin is a tool that instruments the different components of a service-based system and visualizes the breakdown of logical requests passing through multiple services using a ‘firebug-like’ view. The raw data can be stored in Hadoop for more advanced reporting and data mining.</p>"
"2012-10",Zucchini,Tools,Assess,"<p>Zucchini is a testing framework that provides Cucumber-style BDD testing for iOS apps. It uses CoffeeScript for feature definitions, takes screenshots as tests are run, and we’ve been very happy with it.</p>"
"2012-10",ESB,Tools,Hold,"<p>IT departments are increasingly striving to liberate data from disparate systems. A broad set of approaches have been promoted under the generic term Service Oriented Architecture (SOA). This has led to confusion about what the term and approach actually means. We believe businesses do not need the complex enterprise service bus products advocated by vendors. ESBs actively undermine the reasons for choosing the bus approach: low latency, loose coupling, and transparency.</p>"
"2012-10",Maven,Tools,Hold,"<p>Maven has long been a staple of build automation in the Java space. However, given its lack of flexibility and support for automation best practices, especially in the Continuous Delivery domain, the use of alternatives such as Gradle should be considered.</p>"
"2012-10",VCS with “implicit workflow”,Tools,Hold,"<p>Some tools seek to enable and facilitate different ways of working. Unfortunately other tools are created using a different premise, one of low trust in users and the need to enforce a predefined process. ClearCase and TFS do this. This makes version control systems with “implicit workflow” unsuitable tools for modern agile software development. Project methodologies and the best ways of working on a project need to emerge. Tools that enforce high ceremony around things like check in just get in the way and kill productivity.</p>"
"2012-10",Advanced analytics,Techniques,Adopt,"<p>Machine learning, semantic analysis, text mining, quantitative analytics, and other advanced analytics techniques have steadily matured over the past 15 years. They offer incredible potential for prediction, forecasting, identifying repeatable patterns, and providing insight into unstructured data. Historically, our ability to store and rapidly analyze large amounts of audio, video and image data has been severely limited. This placed constraints on sample size, as well as the time it would take to validate analytical models and put them into production. Now, using a spectrum of new technologies like NoSQL, data harvesters, MapReduce frameworks, and clusters of shared-nothing commodity servers, we have the power necessary to make truly effective use of these techniques. Combined with the massive increase in global data available from sensors, mobile devices and social media and we see this as a field with tremendous opportunity.</p>"
"2012-10",Aggregates as documents,Techniques,Adopt,""
"2012-10",Automated deployment pipeline,Techniques,Adopt,""
"2012-10",Guerrilla user testing,Techniques,Adopt,""
"2012-10",Health check pages,Techniques,Adopt,"<p>We have found adding simple health check pages to applications is incredibly useful. This allows people to quickly understand the health of an individual node. We often extend them to add metrics like the number of orders placed, error rates, or similar information. Using simple embedded web servers, even non-web based services can easily expose internal information over HTTP. By using microformats, these web pages can easily be scraped by other monitoring tools to become part of holistic monitoring.</p>"
"2012-10",Windows infrastructure automation,Techniques,Adopt,"<p>Mature tools such as PowerShell, together with newer options such as Chef and Puppet, lead us to highlight Windows infrastructure automation on this edition of the technology radar. Manual configuration using a mouse and menu options is slow and leads to misconfiguration and “snowflake” machines in an unknown state. We recommend command-line tools for their clarity and scriptability.</p>"
"2012-10",Work-in-Progress limits,Techniques,Adopt,"<p>It might sound odd for us to mention this, given how mainstream Agile development has become, but we are noticing teams rediscover and embrace work-in-progress limits. Methods such as Kanban limit the amount of in-flight work, forcing better workflow into the team and more visibility into bottlenecks.</p>"
"2012-10",Agile analytics,Techniques,Trial,"<p>Applying agile methods to data warehousing, business intelligence and agile analytics provides better return and improved business responsiveness. This is done by applying lightweight technologies like REST services to move data around in near real-time instead of batch updates. This allows information about customer behavior and application usage to be derived and responses incorporated within the applications for better user experience and data visualization.</p>"
"2012-10",Configuration in DNS,Techniques,Trial,"<p>Application deployments often suffer from an excess of environment-specific configuration settings, including the hostnames of dependent services. Configuration in DNS is a valuable technique to reduce this complexity by using standard hostnames like ‘mail’ or ‘db’ and have DNS resolve to the correct host for that environment. This can be achieved in multiple ways, including split-horizon DNS or configuring search subdomains. Collaboration between development teams and IT operations is essential to achieve this, but that is unfortunately still difficult in some organizations.</p>"
"2012-10",Declarative provisioning,Techniques,Trial,"<p>Tools such as Pallet offer a compelling approach to environment creation and management through declarative provisioning. Usually, this is accomplished by declaring your environment topology - a number of instances, OS, network configuration and applications - using a DSL, and then creating the entire environment automatically via a commandline tool. This approach differs in the decoupling of instance creation and application provision, and in the addition of the ability to declare dependencies between domain-specific application-level services over multiple boxes.</p>"
"2012-10",Edge Side Includes for page composition,Techniques,Trial,""
"2012-10",Infrastructure automation of development workstations,Techniques,Trial,"<p>Automation is one of the core practices of Continuous Delivery. While companies are getting better at automating the management of infrastructure and environments, one commonly forgotten aspect is infrastructure automation of development workstations. This leads to huge gains in productivity by avoiding manually building specific environments and allows a seamless pairing environment. As with other parts of the environment, tools like Puppet and Chef can be used though they are not entirely necessary as the judicious use of platform packaging and language build tools can be sufficient.</p>"
"2012-10",Logs as data,Techniques,Trial,""
"2012-10",Microservices,Techniques,Trial,""
"2012-10",Mobile first,Techniques,Trial,""
"2012-10",Out-of-container functional testing,Techniques,Trial,"<p>With the popularity of embedded HTTP servers increasing, so has the technique of out-of-container functional testing. That is writing tests at the boundary of the system, using a mock container to provide both fast feedback and high coverage. Servers such as Jetty and tools like Plasma for the .Net platform can provide a significant reduction in the time it takes to run your test suite.</p>"
"2012-10",Performance testing as a first-class citizen,Techniques,Trial,""
"2012-10",Polyglot Persistence,Techniques,Trial,"<p>Polyglot persistence is the technique of storing data in various data stores based on efficiency and how that data is going to be used. Do not just use the default database, often an RDBMS, for all the needs of the application. Instead, ask questions like: Does session management data belong in the database or does it belong in a key-value store? Do relationships between customers and products belong in a graph database? Using NoSQL databases like MongoDB, Riak and Neo4J allows us to reconsider how data is treated, even with-in a single application.</p>"
"2012-10",Remote usability testing,Techniques,Trial,"<p>Bringing users in to a controlled environment for formal testing can be a slow and expensive proposition. Much useful, qualitative feedback can be gathered quickly and cheaply through guerrilla user testing - by going out into the world and testing with small samples of the general public. Another alternative is remote usability testing, where you can send out everything from wireframes to final applications for testing by people all over the world. Usabila, Loop11 and Treejack all provide tools where you can ask users to carry out specific tasks, and capture everything from the time taken to complete a task, to the user’s thoughts and feelings while doing so.</p>"
"2012-10",Responsive web design,Techniques,Trial,""
"2012-10",Semantic monitoring,Techniques,Trial,""
"2012-10",Deployment and scripting test tools,Techniques,Assess,"<p>With deployment automation tools maturing, including PowerShell on Windows, scripts are increasingly sophisticated and contain a lot of logic. We recommend deployment and scripting test tools, such as Pester for PowerShell and TOFT for Chef and Puppet. It is critical to have good test coverage around the most important aspects of your deployment automation.</p>"
"2012-10",Database based integration,Techniques,Hold,"<p>For those organizations that are required to integrate systems, many continue to use a common database, sharing data between applications through the database tier. In many cases this has become an established and accepted architectural pattern: database based integration. The side affect of such an approach is greater coupling of database schemas, release schedules, performance and quality of service across applications.</p>"
"2012-10",Exhaustive browser-based testing,Techniques,Hold,""
"2012-10",Feature branching,Techniques,Hold,"<p>Disappointingly, we continue to see development teams embrace the practice of feature branching to isolate work and defer integration. Feature branches commonly cause significant pain and unpredictability during late merges, but more importantly prevent the continual design improvement necessary to maintain high quality software. We recommend continuous integration and branch by abstraction as an alternative to feature branching.</p>"
"2012-10",JavaScript as a platform,languages-and-frameworks,Assess,""
"2012-10",Lua,languages-and-frameworks,Assess,""
"2012-10",RubyMotion,languages-and-frameworks,Assess,""
"2012-10",Backbone.js,languages-and-frameworks,Hold,""
"2012-10",Component-based frameworks,languages-and-frameworks,Hold,""
"2012-10",Test recorders,Techniques,Hold,"<p>Test recorders seem invaluable as they provide a quick way to capture navigation through an application. However, we strongly advise against their regular use, as it tends to result in brittle tests which break with small changes to the UI. The test code they produce tends to be relatively poor and riddled with unnecessary duplication. Most importantly, test recorders tend to cut channels of communication between the test automation and development teams. When faced with an application that is difficult to test through the user interface, the solution is to have a critical conversation between the teams to build a more testable UI.</p>"
"2012-10",ATOM,Platforms,Adopt,"<p>One of the foundational technologies of the Web as platform, Atom is an extensible data syndication format with broad tool support in almost all languages. In conjunction with the Atom Publication Protocol, Atom comprises a lightweight platform for publishing and consuming data with high quality-of-service guarantees. Atom-based solutions trade scalability for latency, however, making Atom often inappropriate for very low-latency scenarios.</p>"
"2012-10",Care about hardware,Platforms,Adopt,"<p>This platform was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2012-10",Mobile payment systems,Platforms,Adopt,"<p>Despite apparent resistance in the Global North, mobile payment systems such as Kenya’s M-Pesa are providing secure cashless monetary transactions. With the service rolling out across Africa, the system opens up the market for the millions of people with mobile phones but lacking access to traditional banking outlets. Providers such as Square are slowly improving the situation, but the North continues to lag.</p>"
"2012-10",Neo4J,Platforms,Adopt,""
"2012-10",Continuous integration in the cloud,Platforms,Trial,""
"2012-10",Couchbase,Platforms,Trial,""
"2012-10",Domain-specific PaaS,Platforms,Trial,"<p>We find that many businesses are starting to build their own internal cloud deployment environments that can be easily replicated for development and testing environments. In many cases, provisioning is selfservice, and with a single keystroke, developers can create a set of hosts that implement core enterprise assets and collaborating systems. In a sense, this is a domain-specific PaaS offered to internal customers.</p>"
"2012-10",Hybrid clouds,Platforms,Trial,"<p>Hybrid clouds combine the best features of public clouds and private data centers. They allow applications to run in a private data center during normal periods, and then use rented space in a public cloud for overflow capacity during peak traffic periods. There are now a number of infrastructure solutions that allow automatic and consistent deployment across a hybrid cloud, such as Palette and RightScale. With robust offerings from Amazon, Rackspace and others, we are moving hybrid clouds to “Trial” on this edition of the radar.</p>"
"2012-10",Linux containers,Platforms,Trial,"<p>One style of virtualization that is particularly attractive for SaaS and PaaS implementations is the virtual container. Linux containers such as OpenVZ provide the isolation and management benefits of a virtual machine without the overhead usually associated with general-purpose virtualization. In the container model, the guest OS is limited to being the same as the underlying host OS, but that is not a serious limitation for many cloud applications.</p>"
"2012-10",MongoDB,Platforms,Trial,"<p>For problems that fit the document databases model, MongoDB provides easy programmability, a query interface, high availability with automated failover, and automated sharding capabilities. It allows for a smooth transition to NoSQL data stores from the RDBMS model, with the inclusion of familiar concepts, such as the ability to define indexes.</p>"
"2012-10",Node.js,Platforms,Trial,"<p>For many years JavaScript was predominantly used as a client side Web programming language, but a lightweight language such as JavaScript can easily be embedded in different environments, including the server side. Node.js allows developers to write applications in JavaScript on both client and server sides. Since most servers spend the majority of their time waiting for I/O operations, Node.js’ event driven non-blocking architecture is very efficient. Unlike threadbased solutions, Node.js does not need to wait for I/O operations to complete while processing incoming requests, making it a good choice when implementing high performance services.</p>"
"2012-10",Private Clouds,Platforms,Trial,"<p>Because of concerns over privacy and security, or a need to repurpose existing hardware investments, many businesses are choosing to implement their own private cloud. There are are a variety of products, both open source and commercial for this purpose, but it should be noted that compute, storage, and network management are only the starting points for a useful private cloud. There are many services and processes that must be custom implemented to provide a cloud facility that rivals the public offerings from Amazon, Rackspace, or others.</p>"
"2012-10",Riak,Platforms,Trial,""
"2012-10",Single threaded servers with asynchronous I/O,Platforms,Trial,"<p>Node.js is just one example of a class of single threaded servers with asynchronous I/O that are seeing increased popularity. A traditional web or application server associates each incoming request with a thread until all the processing tasks associated with that request are complete and the response has been sent back. If any of those tasks involve I/O, the thread blocks while that I/O takes place. This approach can waste finite resources such as file descriptors and memory since each connection occupies a thread whether or not that thread is actually consuming CPU cycles. An alternative architecture is starting to emerge in implementations like Node.js (a JavaScript server running on Google V8), Nginx (an open source web server and proxy), and Webbit (a Java application server), that uses a single thread to serve many connections, processing all I/O asynchronously. These servers support orders of magnitude more simultaneous connections because each one consumes far fewer resources.</p>"
"2012-10",Azure,Platforms,Assess,""
"2012-10",BigQuery,Platforms,Assess,"<p>Google’s BigQuery brings data analytics to the cloud. Rather than loading data into an expensive data-warehouse with predefined indexes, BigQuery allows you to upload and investigate a data set through ad-hoc SQL-like queries. This is a great way to create a cheap proof-of-concept or even a complete application, as processing of hundreds of gigabytes of data by thousands of servers happens in seconds.</p>"
"2012-10",Calatrava,Platforms,Assess,""
"2012-10",Datomic,Platforms,Assess,""
"2013-05",Icon fonts,Tools,Assess,""
"2014-01",Calabash,Tools,Trial,"<p>On mobile projects, we have been impressed with the functionality and gradually evolving capabilities and maturity of Calabash. It is an automated acceptance test tool for both Android and iOS applications that supports common ecosystem tools like Cucumber. It is an attractive choice on heterogeneous projects.</p>"
"2012-10",Open source IaaS,Platforms,Assess,"<p>Selecting the right cloud provider from an almost bewildering array of options continues to be difficult. One strategy is to adopt an open source IaaS platform such as OpenStack or CloudStack. This allows you to run a private cloud that is consistent with a public cloud, and to migrate from one cloud provider to another should the need arise. Going one step further, Apache’s Deltacloud abstracts away from specific provider APIs to give a consistent experience across cloud platforms.</p>"
"2012-10",Vert.x,Platforms,Assess,"<p>Representing yet another evolution away from traditional, free-standing application containers, Vert.x is an application framework that bridges synchronous and asynchronous programming styles. This gives the programmer the option to trade off scalability and performance for simplicity. Unlike Node.js, Vert.x is a library that can be called from a variety of languages supported on the JVM, including Java, Ruby and JavaScript.</p>"
"2012-10",Windows Phone,Platforms,Assess,"<p>Despite a promising start to Windows Phone, a well thought-out user interface, and probably the best development experience of any mobile platform, we have seen several stumbles in the execution of the platform strategy by Microsoft and its partners. This makes us less optimistic about the future of the platform than we were in the last radar.</p>"
"2012-10",Java portal servers,Platforms,Hold,"<p>A continuing cause of delivery problems lies in the use of Java Portal Server packages. These problems occur in both open source and commercial portal platforms. The promised productivity of these platforms is hindered by their complex and unwieldy programming models and difficulty in automating deployment, data migration, and tests. Although product demos are compelling, the base features of portal products are often a poor fit for real web applications, while the extra advertised features such as single sign-on or search are usually already served by existing, targeted, enterprise assets.</p>"
"2012-10",Meteor.js,Platforms,Hold,"<p>Meteor.js is a client- and server-side JavaScript application framework, run inside a web browser, or in a Node.js container, and backed by MongoDB for persistence. It uses “Smart Packages” - little bundles of code that can run in the browser or as part of a cloud service. It allows hot code deploys and live in-browser updates. We think the idea is great, even if the framework is not yet ready for primetime.</p>"
"2012-10",Singleton infrastructure,Platforms,Hold,""
"2012-10",WS-*,Platforms,Hold,""
"2012-10",Zero-code packages,Platforms,Hold,"<p>There are a number of enterprise software packages on the market that purport to offer flexible functionality with zero coding. This is certainly an appealing notion – that a non-technical business user could configure software to the unique requirements of any business without learning a programming language or hiring a professional software developer. However, it should be kept in mind that any change that affects the behavior of software in production, whether it is code, configuration, data or environments, could cause defects or failures in the business system. Writing code is only one step in a professional software production lifecycle. The need for repeatable analysis, testing, build, and deployment does not go away because the system is modified via a dragand- drop interface instead of a high-level programming language. When evaluating a zero-code package, ensure that the the product supports these processes and that you have the necessary IT support structures in place to implement them.</p>"
"2012-10",Care about languages,languages-and-frameworks,Adopt,"<p>The industry is experiencing something of a renaissance in programming languages. ThoughtWorks thinks it is time to start assessing which other languages will help your organization while taking stock of the useful lifetime remaining for your current choices. You need to care about languages. Traditionally structured organizations with separate support teams may find skills constrain choice, DevOps offers a path forwards here.</p>"
"2012-10",Clojure,languages-and-frameworks,Adopt,""
"2012-10","SASS, SCSS, LESS, and Stylus",languages-and-frameworks,Adopt,"<p>CSS has been an extremely popular and effective DSL for styling web pages. It does, however, have some annoying limitations which have led to a number of languages that build on CSS to make it easier to write and modify. We’ve had good experiences with SASS, SCSS, and LESS.</p>"
"2012-10",Scala,languages-and-frameworks,Adopt,""
"2012-10",AngularJS and Knockout,languages-and-frameworks,Trial,"<p>We are seeing a common pattern of creating single-page web applications. Rather than requiring full page refresh, these request smaller sets of data from the server, and change the displayed content of their page through modifying the DOM. To make this more manageable, JavaScript MV* frameworks have been developed that support data binding, client-side templates, and validation. While lightweight applications may not need a framework, for more complex scenarios, AngularJS and Knockout should be considered as the current front-runners in this field.</p>"
"2012-10",Domain-Specific Languages,languages-and-frameworks,Trial,<p>Domain-Specific Languages is an old technique that we think is significantly under-used. We hope that the publication of Martin Fowler’s latest book will encourage more people to utilize them.</p>
"2012-10",Dropwizard,languages-and-frameworks,Trial,""
"2012-10",HTML 5 for offline applications,languages-and-frameworks,Trial,""
"2012-10",Jekyll,languages-and-frameworks,Trial,""
"2012-10",Require.js,languages-and-frameworks,Trial,"<p>As adoption continues to expand, so does the size of many JavaScript codebases. To improve modularity of code and help manage this, we are seeing teams embrace libraries such as Require.js. Using the Asynchronous Module Definition (AMD) format, code is split into modules, easing development and maintenance, and an optimization tool then combines and minifies scripts for production deployment.</p>"
"2012-10","Scratch, Alice, and Kodu",languages-and-frameworks,Trial,""
"2012-10",Sinatra,languages-and-frameworks,Trial,"<p>Micro-frameworks are emerging as a way to handle increasing complexity in applications both on client- and server-side. Sinatra was one of the early precursors of that trend in server-side space, exposing a lightweight DSL to build fast services that can be easily composed. Flask, Scalatra and Compojure are similar offerings for Python, Scala and Clojure respectively.</p>"
"2012-10",Twitter Bootstrap,languages-and-frameworks,Trial,""
"2012-10",ClojureScript,languages-and-frameworks,Assess,""
"2012-10",F#,languages-and-frameworks,Assess,"<p>Microsoft’s F# continues to evolve, with the recent release of F# 3.0 beta. F# is excellent at concisely expressing business and domain logic. Developers trying to achieve explicit business logic within an application may opt to express their domain in F# with the majority of plumbing code in C#.</p>"
"2014-01",Chaos Monkey,Tools,Trial,""
"2012-10",Google Dart,languages-and-frameworks,Hold,"<p>Dart is Google’s attempt at creating a programming language to replace JavaScript due to JavaScript’s perceived flaws and inherent performance issues. Dart, in line with previous Google languages, provides Java-like syntax and semantics that are intended to be more appealing than JavaScript’s prototype-based nature. Reception within the browser-development community has been understandably cool and it remains to be seen if the language will become more widely accepted, though Chrome’s continued rise and the search for alternatives like CoffeeScript may yet shift that balance.</p>"
"2012-10",Logic in stored procedures,languages-and-frameworks,Hold,""
"2013-05",D3,Tools,Adopt,""
"2013-05",Embedded servlet containers,Tools,Adopt,"<p>In previous radars we have talked about embedded servlet containers, and these are now widely adopted on our projects. Tools such as SimpleWeb and Webbit take the simple, embedded approach further and offer raw HTTP server functionality without implementing the Java Servlet specification. At the same time, Tomcat, the most popular Java application server, is increasingly used in embedded setups and Microsoft provides self-hosted servers for the .NET framework, lending further weight to this Trend.</p>"
"2013-05",Frank,Tools,Adopt,<p>Frank is an open source library that allows functional tests for iOS written in Cucumber and executed on a remote device. This fills an important niche where acceptance test-driven development was previously cumbersome and awkward.</p>
"2013-05",Gradle,Tools,Adopt,<p>Language-based build tools like Gradle and Rake continue to offer finer-grained abstractions and more flexibility long term than XML and plug-in based tools like Ant and Maven. This allows them to grow gracefully as projects become more complex.</p>
"2013-05",Graphite,Tools,Adopt,"<p>While many tools exist for displaying graphs for system monitoring purposes, Graphite has emerged recently as the clear leader in this space. Capable of charting metrics in realtime, it features a round-robin database that is able to store long periods of historic data, while still providing more recent information at a higher fidelity. Numerous configuration options exist on the dashboard, and the resulting graphs can then be embedded in webpages to increase visibility.</p>"
"2013-05",Immutable servers,Tools,Adopt,"<p>Precedents set by cloud providers are now changing expectations within the corporate datacenter. In the cloud, many systems scale automatically, either to provide additional availability or in response to increased demand. Crucial to managing a growing estate, immutable servers, or ‘phoenix servers’, are a sensible approach for enterprises looking at IaaS and PaaS. In contrast, custom-configured ‘snowflake servers’ increase the load on the operations group and encourage a “works on my machine” mentality. Being able to re-provision machines - hard or virtual - from scratch using tools such as Chef or Puppet can drastically reduce the complexity of managing large server farms. Coupled with software that is designed to withstand failure, this will lead to more scalable and reliable systems.</p>"
"2013-05",NuGet,Tools,Adopt,"<p>Package systems for third-party library management continue to gain acceptance and features across all platforms. We called out NuGet as a recent entry, and the addition of Chocolatey NuGet exemplifies the advances and capabilities springing up around this essential agile engineering practice.</p>"
"2013-05",PSake,Tools,Adopt,<p>PSake (pronounced ‘sake’ like the Japanese rice wine) is a build automation tool implemented in PowerShell. PSake provides a tidy syntax for declaring build tasks and dependencies without programming in XML. You also have access to all the features of PowerShell and the .NET framework from within your build scripts.</p>
"2013-05",Apache Pig,Tools,Trial,"<p>Hadoop continues to be the most popular framework to develop distributed data-processing applications. Although programming Hadoop applications in Java is not particularly difficult, designing efficient MapReduce pipelines does require a good amount of experience. Apache Pig simplifies Hadoop development by offering a high level language, called Pig Latin, and an execution runtime. Pig Latin is procedural and provides a SQL-like interface to work with large datasets. The execution infrastructure compiles Pig Latin into an optimized sequence of MapReduce programs that run on the cluster. Pig Latin is extensible through user-defined functions in different languages such as Ruby, JavaScript, Python and Java.</p>"
"2013-05",Gatling,Tools,Trial,""
"2013-05",Jekyll,Tools,Trial,"<p>Jekyll represents the “microization” of frameworks in the web publishing space. While the focus is maintained on doing one thing - sites that feature blogs - as transparently as possible, it also shows the path to a more lightweight future. One example of this that we like is that it is now trivially easy to publish useful documentation for your software project.</p>"
"2013-05",Locust,Tools,Trial,"<p>We are strong believers in in-line automated performance testing, although open source tools in this space have been somewhat limited to date. Locust is a firm favorite that provides the ability to write tests in Python, with good support for running multiple injectors, basic statistics generation, and a useful web dashboard. Its approach to web load testing focuses more on the simulation of users than just generating hits per second. We would typically recommend Locust over and above older tools such as JMeter or Grinder.</p>"
"2013-05",Logstash & Graylog2,Tools,Trial,""
"2013-05",PhantomJS,Tools,Trial,""
"2013-05",Puppet-librarian and Chef-librarian,Tools,Trial,""
"2013-05",TestFlight & HockeyApp,Tools,Trial,"<p>Both TestFlight and HockeyApp allow you to manage the deployment of mobile applications without an app store, makinguser testing easier. They offer crash reporting and analytic capabilities to gather data in the field. HockeyApp supports IOS, Android, & Windows Phone, while TestFlight supports iOS and Android. We have used both tools successfully to help deliver mobile applications. This is clearly a fast evolving space.</p>"
"2013-05",Browser-based templating,Tools,Assess,"<p>We see several JavaScript frameworks embrace browser-based templating, moving more layout work to the client. While this approach is useful in many cases, it does introduce operational issues involving caching, performance, and search. We believe these tools should be assessed carefully to ensure suitability for the target deployment environment.</p>"
"2013-05",Faraday,Tools,Assess,"<p>Several ThoughtWorks teams called out the usefulness of Faraday, a Ruby HTTP client library that provides a common interface over a variety of adapters and integrates nicely with Rack middleware.</p>"
"2013-05",Hystrix,Tools,Assess,"<p>Managing dependencies in distributed systems can become complicated, and is a problem more people are facing with the move to finer-grained micro services. Hystrix is a library for the JVM from Netflix that implements patterns for dealing with downstream failure, offers real-time monitoring of connections,and caching and batching mechanisms to make inter-servicedependencies more efficient.</p>"
"2013-05",Light Table,Tools,Assess,"<p>Like most good software developers, we choose our tools with care. We are especially keen on interesting departures from the norm, which is why we helped back the Light Table Kickstarter project. While still very early in development, the promised interactivity rivals the best of the Smalltalk world, with a modern twist; we are anxious to see what will come of this ambitious project.</p>"
"2013-05",Octopus,Tools,Assess,""
"2013-05",Reactive Extensions for .Net,Tools,Assess,"<p>By putting IObservables and IObservers on an equal footing with IEnumerables and IEnumerators, Rx for .NET allows developers to use their existing knowledge of LINQ (Language Integrated Query) operators to query and compose asynchronous operations and event-based code using a common underlying abstraction of observable event streams. Microsoft has also released RxJS to bring the benefits of reactive programming to JavaScript. They open sourced the entire Rx framework, making it useful for Windows rich client applications and single-page JavaScript applications.</p>"
"2013-05",Riemann,Tools,Assess,"<p>Riemann is an open source server that aggregates and relays events in real time. Written in Clojure, and based on Netty, it is capable of handling thousands of concurrent connections per node. Riemann uses a simple Protobuf protocol for events, which allows it to aggregate everything from CPU and memory use to orders placed to error rates. It forwards to systems like Graphite, triggers email alerts, and provides a dashboard for monitoring these metrics. Riemann is an important part of the movement towards handling data as generic streams of events in real-time, as opposed to using specialized systems for different types of data.</p>"
"2013-05",Snowplow Analytics,Tools,Assess,"<p>We see great promise in Snowplow Analytics, an open source web analytics platform that derives intelligent information from regular web analytics, based on open data principles and cloud Storage.</p>"
"2013-05",UIAutomator,Tools,Assess,<p>UIAutomator looks like the most promising tool for testing Android user interfaces by allowing fine-grained control over components during test and facilitating testing on multiple Devices.</p>
"2013-05",Heavyweight test tools,Tools,Hold,""
"2013-05",Maven,Tools,Hold,<p>Language-based build tools like Gradle and Rake continue to offer finer-grained abstractions and more flexibility long term than XML and plug-in based tools like Ant and Maven. This allows them to grow gracefully as projects become more complex.</p>
"2013-05",TFS,Tools,Hold,""
"2013-05",Aggregates as documents,Techniques,Adopt,"<p>When designing a domain model, the aggregate pattern helps to add structure and modularity. Mapped to a relational database the aggregate is not visible in the table structure. Document databases, like MongoDB, allow you to model aggregates as documents. This 1:1 mapping means that the aggregate root should be the object that is loaded from the collection.</p>"
"2013-05",Automated deployment pipeline,Techniques,Adopt,"<p>The adoption of Continuous Delivery means many teams are creating an automated deployment pipeline that carries their code all the way to production. Pipelines allow the visualization of otherwise complex chains of build and deployment activities. Further, they provide the ability to reliably trace build artifacts as they progress through each stage on their path to production. Several vendors are now building CI servers that support the pipeline as a first-class feature and not just a visual element. We recommend teams look closely at these products to avoid wasting time trying to shoehorn a pipeline into a tool without adequate support.</p>"
"2013-05",Guerrilla user testing,Techniques,Adopt,"<p>Bringing users in to a controlled environment for formal testing can be a slow and expensive proposition. Much useful, qualitative feedback can be gathered quickly and cheaply through guerrilla user testing - by going out into the world and testing with small samples of the general public. Another alternative is remote usability testing, where you can send out everything from wireframes to final applications for testing by people all over the world. Usabila, Loop11 and Treejack all provide tools where you can ask users to carry out specific tasks, and capture everything from the time taken to complete a task, to the user’s thoughts and feelings while doing so.</p>"
"2013-05",In-process acceptance testing,Techniques,Adopt,"<p>Acceptance tests generally exercise the system from the ‘outside’, traversing an entire network stack for the security of exercising the complete application. In-process acceptance testing challenges the notion that test code and application under- test must run in different processes in order to achieve these benefits. When using an embedded container, it is easy to set up the system, run the tests over HTTP and to verify the final state without the setup costs associated with deploying to and communicating with a separate container.</p>"
"2013-05",Mobile testing on mobile networks,Techniques,Adopt,""
"2013-05",Performance testing as a first-class citizen,Techniques,Adopt,"<p>While unit and acceptance testing are widely embraced as standard development practices, this trend has not continued into the realm of performance testing. Currently, the common tooling drives testers towards creating throw away code and a click-and-script mentality. Treating performance testing as a first-class citizen enables the creation of better tests that cover more functionality, leading to better tooling to create and run performance tests, resulting in a test suite that is maintainable and can itself be tested.</p>"
"2013-05",Promises for asynchronous programming,Techniques,Adopt,"<p>The use of promises for asynchronous programming is an old technique that is also known as futures. It is gaining renewed interest in light of the extensive use of JavaScript on both the client and server side. This technique eliminates the use of deeply nested callbacks, flags and pollers and has first-class support from libraries such as jQuery. Teams developing JavaScript codebases of significant complexity should take advantage of this.</p>"
"2013-05",Windows infrastructure automation,Techniques,Adopt,""
"2013-05",Analyzing test runs,Techniques,Trial,"<p>Failing tests reveal bugs in production code. However, analyzing test runs for other properties can reveal interesting information. A simple example would be to monitor which tests fail frequently and run them earlier in your build pipeline to get fast feedback. Similarly, tracking other properties such as test execution times and ratios of long-running tests to fast-tests can provide actionable metrics.</p>"
"2013-05",Blue-green deployment,Techniques,Trial,"<p>Blue-green deployment is a pattern for performing software upgrades. By setting up the latest version of your application on an identical clone of your production application stack, traffic can be switched, near instantaneously, from the current production stack to the new one as soon as the test suite and the business determine it is appropriate. Though this is an old technique, infrastructure automation and resources in the cloud make it worth reconsidering.</p>"
"2013-05",Co-location by telepresence,Techniques,Trial,"<p>Increasing quality and range of choices for inexpensive or free video conferencing is leading to a new way of working for distributed teams. Always-on video connections can help create a sense of co-location by telepresence, even when the team is distributed geographically. This is becoming the defacto standard in some of our offshore delivery centers. We are also seeing increased use of screen-sharing tools like ScreenHero for remote pairing. We would caution those looking for a silver bullet to eliminate the need for physical co-location. There is no substitute for the understanding and empathy created by faceto- face communication.</p>"
"2013-05",Continuous delivery for mobile devices,Techniques,Trial,"<p>With HTML5 blurring the line between traditional native apps and web apps, we are beginning to experiment with continuous delivery for mobile devices. Services such as TestFlight allow you to deploy native apps to real devices multiple times per day. With a wholly or partially HTML5-based application changes can be deployed without submitting a new app to an app store. If your organization has an enterprise app store, you may be able to easily push builds to it. While the techniques for implementing CD to mobile devices are improving, we note that testing practices are lagging behind. To be successful you will need to increase your focus on automated testing to ensure that everything actually works once it gets to the device.</p>"
"2013-05",Database migrations for NoSQL,Techniques,Trial,"<p>NoSQL data stores continue to become mainstream, and teams should acknowledge the need for database migrations for NoSQL. Especially with an implicit or dynamic schema you are likely to want to reconfigure data over time. There are several approaches such as running an explicit migration when deploying a new build of your application, or using dynamic migrations in code as documents are loaded and processed.</p>"
"2013-05",Edge Side Includes for page composition,Techniques,Trial,<p>Breaking up monolithic applications and building systems from microservices requires a solid strategy to integrate output from disparate systems into a coherent experience for the end-user. Integrating at the presentation layer using Edge Side Includes (ESI) for page composition is a practical and elegant solution. This can occur within your environment using a reverse proxy like Varnish or closer to the user in a Content Delivery Network (CDN).</p>
"2013-05",HTML5 storage instead of cookies,Techniques,Trial,""
"2013-05",Logs as data,Techniques,Trial,"<p>Log files generated by web servers, databases, networking infrastructure, and back-end systems are a valuable source of operational and behavioral data for a business. In the past, these files were mostly viewed as a source of diagnostic information in the case of failure, but with lowered cost of storage, and availability of tools such as Splunk for indexing and retrieving millions of events, they can also be a source of customer insights. Treating logs as data and storing complete logs instead of just collecting predefined metrics provides a means to answer novel questions that a business could not have previously anticipated.</p>"
"2013-05",Microservices,Techniques,Trial,""
"2013-05",Mobile first,Techniques,Trial,<p>We are rapidly heading towards a world where the majority of consumer interactions are from mobile devices. Mobile first embraces this trend by designing user interfaces and server interactions that target mobile devices in the first instance. The mobile first strategy contrasts with approaches that assume a highly capable client device connected to a fast and reliable network and then degrade the experience to fit the limitations of the device.</p>
"2013-05",Perimeterless enterprise,Techniques,Trial,""
"2013-05",Responsive web design,Techniques,Trial,<p>One such technique for achieving this is responsive web design. Starting with a basic presentation of content - and typically keeping the essential information constant - the experience is enhanced to suit the features detected on more capable browsers. This commonly takes the form of layout and format changes based on screen size.</p>
"2013-05",Semantic monitoring,Techniques,Trial,"<p>Development teams typically produce tests that specify and validate application behavior, but stop running them once the application goes into production. This is a missed opportunity. Semantic monitoring uses your tests to continuously evaluate your application, combining test-execution and realtime monitoring. With microservices, and similar fine-grained architectural approaches, it is increasingly important to test their interaction at run-time. Incorporating the validation of consumer-driven contracts into a monitoring facility is one way to approach this. While still evolving, we see great promise in the merging of two separate but important verification schemes.</p>"
"2013-05",Capturing client-side JavaScript errors,Techniques,Assess,""
"2013-05",Collaborative analytics and data science,Techniques,Assess,""
"2013-05",Development environments in the cloud,Techniques,Assess,""
"2013-05",Focus on mean time to recovery,Techniques,Assess,""
"2013-05",Machine image as a build artifact,Techniques,Assess,""
"2013-05",Minimizing application configuration,Techniques,Assess,"<p>Application configuration can be a source of pain when getting started with a new tool, managing deployments to different environments, or trying to understand why applications behave differently in different places. We are a big fan of minimizing application configuration, trying to ensure that applications work sensibly out of the box with the bare minimum of Configuration.</p>"
"2013-05",Exhaustive browser based testing,Techniques,Hold,"<p>We have previously spoken about executing automated tests at the appropriate layer of your application. In this radar, we want to be very specific - we recommend against exhaustive browser based testing. Web browser automation tools like Selenium have encouraged widespread automated testing through the browser. While these tests continue to have their place in a test portfolio, most teams find that executing the bulk of tests through the browser creates a slow and fragile test suite.</p>"
"2013-05",Elastic Search,Platforms,Adopt,""
"2013-05",MongoDB,Platforms,Adopt,""
"2013-05",Neo4J,Platforms,Adopt,""
"2013-05",Redis,Platforms,Adopt,""
"2013-05",SMS and USSD as a UI,Platforms,Adopt,""
"2013-05",HTML5 for offline applications,languages-and-frameworks,Trial,"<p>There is a tendency to equate the need for offline functionality with the need to build an app. Despite the slow standardization process, most HTML5 features have now been implemented across all major browsers. Its local storage capabilities, comprehensively supported across mobile and tablet browsers - makes HTML5 for offline applications a very suitable option.</p>"
"2013-05",BigQuery,Platforms,Trial,"<p>The amount of data that even a relatively low volume website can generate is huge. Once you add in analytics, business metrics, demographics, user profiles and multiple devices, it can become overwhelming. Many organizations use data warehouses as a repository with data being sucked in from all parts of the organization. The challenge here is that these often turn into “Data Fortresses.” Even getting timely business metrics becomes a challenge, let alone running exploratory queries across the entire data set. Technologies like the cloud based BigQuery help. The pay-as-you-go model and the ability to do ad hoc queries lets you gain insight without buying specialist hardware and software. A data-driven business should put data in the hands of the decision makers, not hidden behind technological barriers and bureaucracy.</p>"
"2013-05",Continuous integration in the cloud,Platforms,Trial,"<p>Continuous integration in the cloud is one of those obvious-in-hindsight infrastructure offerings that supports agile development. With no local software and minimal configuration, it just works. With mature offerings now in place, serious developers are left with no excuse for avoiding this important practice.</p>"
"2013-05",Couchbase,Platforms,Trial,"<p>Couchbase is a persistent cache with auto-sharding features, master-less clusters and replicated data to avoid cachemisses. Because it supports the Memcached protocol, it allows drop-in replacement for Memcached based systems.</p>"
"2013-05",Hadoop 2.0,Platforms,Trial,""
"2013-05",Node.js,Platforms,Trial,""
"2013-05",OpenStack,Platforms,Trial,""
"2013-05",Rackspace Cloud,Platforms,Trial,"<p>While AWS continues to add more features, Rackspace Cloud has become a viable competition in the storage and compute space. Some users may value the more thorough customer support available for Rackspace, as well as the ability to mix in more traditional hosting models. We are not excited about this just because Rackspace is a client of ours and we have had the pleasure developing the platform. We have successfully used Rackspace Cloud with several other clients, and would look forward to it being offered in more geographical locations.</p>"
"2013-05",Riak,Platforms,Trial,"<p>Riak is a distributed key-value store that is schema-less and data-type agnostic. It can be put to good use in write-heavy projects to store data such as sessions, shopping carts and streaming logs - whilst it retains the ability to perform complex queries in a full-text search. The distributed cluster can self-recover without a single master, has tuneable consistency and availability settings and can do collision detection and resolution if needed - all of which can be particularly helpful in high availability environments.</p>"
"2013-05",Azure,Platforms,Assess,"<p>Microsoft’s Azure cloud platform continues to play catchup with more mature clouds such as AWS, but we’ve been impressed with how Microsoft has responded to market demands. As with most Microsoft solutions it continues to be a contender and worth evaluating.</p>"
"2013-05",Calatrava,Platforms,Assess,"<p>We have previously been skeptical of claims of reusable code working across platforms. Our experience with many tools in the market has been mixed and we advise caution to our clients who are looking at these types of solutions. Taking an approach that carefully navigates these dangerous waters, we feel Calatrava is worth evaluating for mobile application development. The framework neatly follows the separation of business and presentation logic, maximising reuse where there is commonality, and providing native access where speed or device-specific idioms are to be followed.</p>"
"2013-05",Datomic,Platforms,Assess,"<p>A fundamental rethinking of how databases work, Datomic is an immutable database server with fascinating transactional and deployment characteristics. One of the common headaches on agile projects is managing database migrations, especially restoring previous states. Datomic makes the need for migrations go away - every version of the data (and schema) is preserved by the database. While still evolving, we appreciate Datomic’s boldness of vision.</p>"
"2013-05",PhoneGap/Apache Cordova,Platforms,Assess,""
"2013-05",PostgreSQL for NoSQL,Platforms,Assess,""
"2013-05",Vumi,Platforms,Assess,""
"2013-05",Zepto.js,Platforms,Assess,"<p>Zepto.js is a lightweight JavaScript library that is largely based on JQuery. The API is identical to JQuery although it does not offer full compatibility with it. With a vastly compressed file size, Zepto is a compelling option when building responsive web Applications.</p>"
"2013-05",Big enterprise solutions,Platforms,Hold,""
"2013-05",Singleton infrastructure,Platforms,Hold,"<p>Sometimes, architectural decisions lead you to incorporate infrastructure items that you can only afford one of, such as mainframes or search appliances. This is a terrible idea. It severely restricts testing and deployment flexibility. We strongly favor infrastructure you can easily set up and tear down. Singleton infrastructure belongs to misguided vendor-driven architectures of the past.</p>"
"2013-05",WS-*,Platforms,Hold,"<p>We are reiterating our advice that given the progress and acceptance of simpler web-as-platform techniques such as REST and OAuth and the known issues with WS-*, it should only be used cautiously.</p>"
"2013-05",Clojure,languages-and-frameworks,Adopt,""
"2013-05",CSS frameworks,languages-and-frameworks,Adopt,"<p>This language/framework was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2013-05",Jasmine paired with Node.js,languages-and-frameworks,Adopt,"<p>We have long thought of JavaScript as a first class language, and have been keenly following the development of testing tools in that space. The cream of the crop for out-of-browser testing is currently Jasmine. Jasmine paired with Node.js is the go-to choice for robust testing of both client- and serverside JavaScript.</p>"
"2013-05",Scala,languages-and-frameworks,Adopt,"<p>In the previous radar we had two JVMbased functional programming languages, Clojure and Scala, in our Assess category. We had expressed a slight preference for Clojure because it is the smaller and more focused language. Since the last radar we have realized that the wider applicability of Scala makes it more approachable for enterprise developers, and we have witnessed great successes in the adoption of Scala. Consequently we have moved Scala into our Trial category. Pay careful attention to the idiomatic use of Scala if it is introduced to a new team to avoid ""Java without semicolons"" or Perl styles.</p>"
"2013-05",Sinatra,languages-and-frameworks,Adopt,""
"2013-05",CoffeeScript,languages-and-frameworks,Trial,""
"2013-05",Dropwizard,languages-and-frameworks,Trial,""
"2014-01",Storm,Platforms,Assess,""
"2014-01",Web Components standard,Platforms,Assess,""
"2014-01",Big enterprise solutions,Platforms,Hold,""
"2014-01",CMS as a platform,Platforms,Hold,""
"2013-05",JavaScript as a platform,languages-and-frameworks,Trial,"<p>JavaScript is moving outside of the browser, emerging as an important technology for cross-platform development. It is front-and-center in the approach to code reuse taken by Node.js, Meteor.js and mobile frameworks like Calatrava. Along with the recent proliferation of other languages that compile to JavaScript, this makes us wonder if we should start to consider JavaScript as a platform and not just a language.</p>"
"2013-05",JavaScript MV* frameworks,languages-and-frameworks,Trial,"<p>Single-page web application development continues to flourish along with the frameworks supporting data binding, client-side templates, validation, and other capabilities. The JavaScript MV* frameworks in active use on ThoughtWorks projects include AngularJS, Knockout, and Ember.js. Each has advocates and a few detractors. We expect continuing innovative churn in this vibrant space.</p>"
"2013-05",Play Framework 2,languages-and-frameworks,Trial,"<p>The recent release of Play Framework 2.1.1 with support for controller dependency injection, asynchronous, non-blocking I/O, a code-reload workflow, database migrations, asset pipelining, and flexible deployment options has made it more attractive to developers. For this reason Play re-appears on the radar as something for teams to seriously consider when building web applications and services on the JVM. A word of caution however, Play embraces a functional programming style which, when working with the Java language, still translates into a plethora of static methods that may be difficult to unit test outside a running server.</p>"
"2013-05",Require.js & NPM,languages-and-frameworks,Trial,<p>Our continued use of node.js on new production applications has re-enforced our need for reliable packaging of JavaScript code and libraries. The Node Package Manager (npm) is an important part of the node.js ecosystem and a useful tool for packaging node.js applications. Developers of browser applications with large amounts of JavaScript or CoffeeScript should consider Require.js to help with structuring their code and loading dependencies at run time</p>
"2013-05","Scratch, Alice, and Kodu",languages-and-frameworks,Trial,"<p>We think it is essential to inspire the next generation of technologists. Scratch, Alice, and Kodu are programming languages that rely on visual environments and building blocks as teaching devices. They offer exciting possibilities for educational programs and organizations intending to foster programming knowledge in environments beyond academia.</p>"
"2013-05",ClojureScript,languages-and-frameworks,Assess,"<p>ClojureScript illustrates just how cross-platform the core of Clojure really is: they ported the primary parts to run on JavaScript. It is missing some of the whizzbang features of Clojure on the JVM and CLR, like software transactional memory, but has a surprisingly high fidelity with its more sophisticated cousins. One interesting option afforded by ClojureScript is the ability to send data structures à la JSON using ClojureScript as the data structure. Because Clojure is a Lisp, this means that you can also send “real” code.</p>"
"2013-05",Gremlin,languages-and-frameworks,Assess,"<p>This language/framework was included in this edition of the Radar for visibility. We felt that there wasn't anything substantial to add to the discourse around it, but that it was important to keep this in view.</p>"
"2013-05",Lua,languages-and-frameworks,Assess,"<p>An unlikely contender in the programming languages space, Lua has seen massive adoption across a variety of industries. It is used as a scripting platform in game development and music composition; embedded in point-of-sale appliances and network devices; and in extending NoSQL databases with safe execution semantics. We expect further growth in time to come.</p>"
"2013-05",Nancy,languages-and-frameworks,Assess,""
"2013-05",OWIN,languages-and-frameworks,Assess,""
"2013-05",RubyMotion,languages-and-frameworks,Assess,"<p>Introducing a Ruby compiler and toolchain for developing iOS applications, RubyMotion has unsurprisingly caused quite a stir in the ThoughtWorks development community. There continues to be a need to understand the underlying iOS APIs and some Objective-C when building applications, but there are clear benefits for those who find working with the Ruby language and tools more comfortable.</p>"
"2013-05",Twitter Bootstrap,languages-and-frameworks,Assess,"<p>With JavaScript development on the rise, there is a growing need for reusable, extensible UI tooling. Twitter Bootstrap builds on the best offerings in the space, to provide a powerful set of patterns and components that help developers create responsive and adaptive applications with pleasant aesthetics.</p>"
"2013-05",Backbone.js,languages-and-frameworks,Hold,"<p>Backbone.js is a great example of an abstraction pushed too far. While we initially liked the ease of wire-up, in practice it suffers from the same issues as all such databound frameworks from WebForms to client/server tools. We find that it blurs the framework and model too much, forcing either bad architectural decisions or elaborate framework hackery in order to preserve sanity.</p>"
"2013-05",Component-based frameworks,languages-and-frameworks,Hold,"<p>As the industry shifted from desktop GUI development to the web, it seemed natural to port the most successful patterns and designs to the new paradigm. After 15 years of trying, we feel that there are still no component-based frameworks that have successfully achieved this. We recommend not attempting to make web development into something that it fundamentally is not. It is time to accept the page and request-based nature of the web, and focus on the frameworks that support - rather than work against - these concepts.</p>"
"2013-05",Handwritten CSS,languages-and-frameworks,Hold,""
"2013-05",Logic in stored procedures,languages-and-frameworks,Hold,"<p>It is startling to us that we continue to find new systems in 2011 that implement significant business logic in stored procedures. Programming languages commonly used to implement stored procedures lack expressiveness, are difficult to test, and discourage clean modular design. You should only consider stored procedures executing within the database engine in exceptional circumstances, where there is a proven performance issue.</p>"
"2014-01",Capturing client-side JavaScript errors,Techniques,Adopt,"<p>Capturing client-side JavaScript errors has helped our delivery teams identify issues specific to a browser or plug-in configuration that impact user experience. Over the past year a number of service providers have started to surface in support of this requirement. Other than storing these errors in application data stores, web applications can log this data to web analytics or existing monitoring tools such as New Relic to offload storage requirements.</p>"
"2014-01",Enterprise Data Warehouse,Platforms,Hold,""
"2014-07",Ignoring OWASP Top 10,Techniques,Hold,"<p>Barely a week goes by without the IT industry being embarrassed by yet another high profile loss of data, leak of passwords, or breach of a supposedly secure system. There are good resources to help with making sure security gets treated as a first-class concern during software development and we need to stop ignoring them; the <strong>OWASP Top 10</strong> is a good place to start.</p>"
"2014-01",Continuous delivery for mobile devices,Techniques,Adopt,"<p>Since the last radar a few advances have made continuous delivery for native apps on mobile devices less painful. Xctool, the recently open-sourced 'better xcodebuild' improves iOS build automation and unit testing. The arrival of automatic updates in iOS7 reduces the friction of regular releases. Travis-CI now supports OS X agents, removing another hurdle in seamless CD pipelines for mobile platforms. Our advice from the last radar on the value of hybrid approaches and the importance of test automation for mobile still applies.</p>"
"2014-01",Mobile testing on mobile networks,Techniques,Adopt,"<p>We increasingly see mobile applications that work really well during development and testing, but run into trouble when they are deployed in the real world. Mobile testing on mobile networks reveals how your app performs under a variety of conditions. You might test using 3G or LTE or deliberately use a poor WiFi network with overloaded access points. Measure network performance for your target environment, then simulate the conditions using latency and packet-loss inducing tools. In addition, it is sometimes necessary to examine exactly how your device and software are using the network with a tool such as Wireshark.</p>"
"2014-01",Segregated DOM plus node for JS Testing,Techniques,Adopt,""
"2014-01",Windows infrastructure automation,Techniques,Adopt,"<p>Previously, support for Windows in tools like Chef and Puppet was lacking, leading to large amounts of Powershell scripting to achieve simple infrastructure automation tasks. Achieving the same level of automation for Windows was more challenging than for Unix. In the last 12 months however, both Chef and Puppet support for Windows has improved drastically. That support, combined with the inherent power of Powershell makes Windows infrastructure automation extremely viable.</p>"
"2014-01",Capture domain events explicitily,Techniques,Trial,""
"2014-01",Client and server rendering with same code,Techniques,Trial,"<p>Increasingly, HTML is rendered not only on the server but also on the client, in the web browser. In many cases this split rendering will remain a necessity but with the growing maturity of JavaScript templating libraries an interesting approach has become viable: client and server rendering with same code.</p>"
"2014-01",HTML5 storage instead of cookies,Techniques,Trial,"<p>HTML5 storage, also known as local storage or web storage, is a mechanism for storing client side data in modern browsers, including iOS and Android mobile browsers. We recommend using HTML5 storage instead of cookies in almost all cases. HTML5 Storage can accommodate up to 5MB of data while cookies are limited to 4KB. Cookie data is transmitted in every request, which slows down your application and potentially exposes data over insecure HTTP connections. In contrast, HTML5 storage data remains securely in the browser. Cookies should be reserved for storing small simple pieces of data like a session ID.</p>"
"2014-01",Instrument all the things,Techniques,Trial,"<p>You cannot act on important business events unless you monitor them. The principle, instrument all the things, encourages us to think proactively about how we achieve this at the start of our software development.This allows us to expose key metrics, monitor them, and report on them to improve operational effectiveness.</p>"
"2014-01",Masterless Chef/Puppet,Techniques,Trial,""
"2014-01",Microservices,Techniques,Trial,"<p>We are seeing an uptick in adoption of microservices as a technique for distributed system design, both in ThoughtWorks and in the wider community. Frameworks such as Dropwizard and practices like declarative provisioning point to a maturing of the technologies and tools. Avoiding the usual monolithic approach and being sympathetic to the need to replace parts of systems individually has important positive implications for the total cost of ownership of systems. We see this as having greatest impact in the mid-to-long term, specifically with respect to the two-to-five year rewrite cycle.</p>"
"2014-01",Perimeterless enterprise,Techniques,Trial,""
"2014-01",Provisioning testing,Techniques,Trial,""
"2014-01",Structured logging,Techniques,Trial,""
"2014-01",Bridging physical and digital worlds with simple hardware,Techniques,Assess,""
"2014-01",Collaborative analytics and data science,Techniques,Assess,"<p>For years, teams and organizations have seen the dangers of siloing expertise around technical disciplines. While we value input from experts on advanced applications, developers should have basic knowledge of user interfaces, databases, and data science, the newest industry darling. While advanced applications requires deep expertise, we are pushing for collaborative analytics and data science, where all developers use basic statistical analysis and tools to make better decisions, and work closely with experts when things get complicated.</p>"
"2014-01",Datensparsamkeit,Techniques,Assess,""
"2014-01",Development environments in the cloud,Techniques,Assess,""
"2014-01",Focus on mean time to recovery,Techniques,Assess,"<p>In previous radars we recommended arranging automated acceptance tests into longer journeys and, in what we call semantic monitoring, running these tests continuously against a production environment. We still believe that this is an important technique for scenarios the team can anticipate in advance. A variation of this approach, seen especially with startups, is to reduce the number of tests while increasing monitoring and automatic alarms. This shifts the focus from avoiding problems that can be anticipated to reducing mean time to recovery for all problems.</p>"
"2014-01",Machine image as a build artifact,Techniques,Assess,"<p>Most virtualization technologies provide a way to launch a machine from an image. By creating a machine image as a build artifact early in your build pipeline and promoting it through the pipeline as it passes further suites of tests, you can reliably deploy the exact machine that passed the tests into production. This technique eliminates most causes of the snowflake server anti-pattern.</p>"
"2014-01",Tangible interaction,Techniques,Assess,""
"2014-01",Cloud lift and shift,Techniques,Hold,""
"2014-01",Ignoring OWASP Top 10,Techniques,Hold,""
"2014-01",Siloed metrics,Techniques,Hold,"<p>As more businesses move online we have noted a tendency to end up with siloed metrics. Specific tools are implemented to gather and display specific metrics: one tool for page-views and browser behavior, another for operational data and another to consolidate log messages. This leads to data silos and the need to swivel-chair integrate between the tools in order to gather business intelligence that is crucial to running the business. This is a tool-led split in the analytics domain that hurts the team’s ability to make decisions. A much better solution is to have a consolidated view of near-real time analytics using integrated dashboards displaying time-sensitive domain and team relevant information.</p>"
"2014-01",Velocity as productivity,Techniques,Hold,""
"2014-01",Elastic Search,Platforms,Adopt,"<p>Over the past year we have seen a gradual uptake in the adoption of Elastic Search as an open source search platform. It is an extensible, multi-tenanted, and horizontally scalable search solution based on Apache Lucene. It allows complex data structures to be indexed and retrieved through a JSON based REST API. It provides an elegant model of operation with automatic discovery of peers in a cluster, failover, and replication. Elastic Search can be extended with a plugin system that allows adding new functionality and changing existing behavior. The community around this tool is quite vibrant as illustrated by the number of client libraries available in languages like Java, C#, Ruby, and JavaScript.</p>"
"2014-01",MongoDB,Platforms,Adopt,"<p>For problems that fit the document database model, MongoDB is now the most popular choice. In addition to ease of use and a solid technical implementation, the community and ecosystem contributed to this success. We are aware of problems where teams were tempted by the popularity of MongoDB when a document database was not a good fit or they did not understand the inherent complexity. When used appropriately, however, MongoDB has proven itself on many projects.</p>"
"2014-01",Neo4J,Platforms,Adopt,"<p>Graph databases store information as arbitrarily interconnected nodes linked by named relations, rather than as tables and joins. Schema-less and highly extensible, they are an excellent choice for modelling semi-structured data in complex domains. Neo4j is the front-runner in the space both its REST API and its Cypher query language support simple and fast storage and traversal of graphs.</p>"
"2014-01",Node.js,Platforms,Adopt,"<p>Node.js is a lightweight web container that is a strong option for development of micro services and as a server to mobile and single-page web applications. Due to the asynchronous nature of node.js, developers are turning to promise libraries to simplify their application code. As the use of promises mature within the node.js community, we expect to see more applications developed for node.js. For those teams that are reluctant to try node.js in production, it is still worthwhile to consider node.js for development tasks like running JavaScript tests outside of the browser or generating static web content from tools like CoffeeScript, SASS, and LESS.</p>"
"2014-01",Redis,Platforms,Adopt,"<p>Redis has proven a useful tool on multiple ThoughtWorks projects, used as both structured cache and data store distributed across multiple countries.</p>"
"2014-01",SMS and USSD as a UI,Platforms,Adopt,"<p>58% of all phones sold last year globally were feature phones. In many developing countries, this is an even larger majority. If your market requires you to develop for these areas, you need to develop with this constraint in mind. These phones use SMS and USSD as a user interface. SMS is a long standing technique for sending messages, and USSD allows you to send SMS like messages in a secure session. You should look at USSD and SMS as another UI and UX platform and treat them as first-class citizens.</p>"
"2014-01",Hadoop 2.0,Platforms,Trial,""
"2014-01",Hadoop as a service,Platforms,Trial,"<p>We observe organizations that have piloted Hadoop successfully starting to consolidate their Hadoop infrastructure services into a centralized, managed platform before rolling it out across the enterprise.These Hadoop as a service platforms are characterized by the control tier that interfaces with and coordinates among different core Hadoop infrastructure components. The capabilities of the platform are usually exposed via higher-level abstractions to the enterprise. Such a managed platform gives organizations the ability to deploy processes, infrastructure and datasets in a fairly consistent way across the organization. These services are built in private data centers and public cloud infrastructure.</p>"
"2014-01",OpenStack,Platforms,Trial,"<p>The open source OpenStack project is gathering steam, and in recent months is becoming a more viable platform for deploying your own private clouds. Many issues which made OpenStack hard to get up and running have been addressed, and new features are being added all the time. It is clear that the OpenStack consortium and its members like Rackspace, Redhat, and HP are committed to the project as the basis for their own OpenStack-based cloud services.</p>"
"2014-01",PostgreSQL for NoSQL,Platforms,Trial,""
"2014-01",Vumi,Platforms,Trial,"<p>Vumi is a scalable open source messaging engine driving conversations through frugal methods on mobile devices. Vumi facilitates SMS, IM and USSD interactions between companies and their clients, health services and their patients, governments and citzens, and more. Vumi integrates with telcos and allows you to build apps on top of it easily. You only have to pay for carrier charges.</p>"
"2014-01",Akka,Platforms,Assess,"<p>Akka is a toolkit and runtime for building highly concurrent, distributed, and fault tolerant event-driven applications on the JVM. It offers very lightweight event-driven processes with approximately 2.7 million actors per GB RAM and a 'let-it-crash'model of fault-tolerance designed to work in a distributed environment. Akka can be used as a library for web-apps or as a stand-alone kernel to drop an application into.</p>"
"2014-01",Backend as a service,Platforms,Assess,"<p>The recent explosion of mobile-focused products, coupled with widespread adoption of 'Lean Start-up' approaches that put a premium on time-to-market for new ideas, has spawned an ecosystem of Backend as a service (BaaS) offerings that enable developers to focus on the client application while offloading backend concerns. Assess adding these services to your toolkit where fast and low-cost proving of a new product idea is important. Our usual advice on build/buy/borrow decisions still applies: be clear on which functional areas are strategic to your business and which are commodities. For potentially strategic areas be sure to plan a migration path that will allow you to use the BaaS provider to get started quickly, while avoiding friction when your architecture evolves and you need to migrate to owning this functionality and customizing it as a differentiator.</p>"
"2014-01",Low-cost robotics,Platforms,Assess,""
"2014-01",PhoneGap/Apache Cordova,Platforms,Assess,"<p>PhoneGap, now renamed as Apache Cordova, is a platform that lets you develop cross-platform mobile applications using HTML, CSS and JavaScript. It abstracts away platform specific native code through a set JavaScript APIs that remain consistent across different mobile platforms. Cordova is available for a wide array of platforms including iOS, Android, Blackberry, Windows Phone, and WebOS.</p>"
"2014-01",Private Clouds,Platforms,Assess,"<p>The need for physically storing data within nations or organizations has increased significantly in recent years. There is concern around sensitivity of information hosted in cloud environments. Organizations are looking into private cloud as an alternative when data that needs to be housed in close proximity with control over access and distribution. Private cloud offers cloud infrastructure provisioned for exclusive use by a single organization with the following characteristics; on-demand self-service, broad network access, resource pooling, rapid elasticity and measured service.</p>"
"2014-01",SPDY,Platforms,Assess,""
"2014-01",Clojure,languages-and-frameworks,Adopt,"<p>Clojure is a dynamic, functional language that runs on the JVM. Although its roots are in Lisp, one of the oldest computer languages, it also embodies many modern programming concepts, including lazy evaluation and advanced concurrency abstractions. Clojure has spawned a vibrant community of programmers who are contributing a rich set of frameworks and tools. One example of these is Midje, an innovative spin on unit testing and mocking frameworks.</p>"
"2014-01",Dropwizard,languages-and-frameworks,Adopt,""
"2014-01","Scala, the good parts",languages-and-frameworks,Adopt,""
"2014-01",Sinatra,languages-and-frameworks,Adopt,"<p>Micro-frameworks are emerging as a way to handle increasing complexity in applications both on client- and server-side. Sinatra was one of the first examples of that trend in the server-side space, exposing a lightweight DSL to build fast services that can be easily composed. Similar offerings are available for other languages, including Spark for Java, Flask for Python, Sclatra for Scala, Compojure for Clojure and Nancy for .NET.</p>"
"2014-01",CoffeeScript,languages-and-frameworks,Trial,"<p>The expansion of single-page and mobile browser-based applications into mainstream use, along with continued growth of node.js for server-side applications, have led to increased adoption of CoffeeScript to simplify JavaScript codebases. As a language that compiles into JavaScript code for runtime execution, many concerns have been raised about the difficulty of debugging applications written in CoffeeScript. The introduction of Source Maps in CoffeeScript 1.6.1 is helping producers of development tools address this concern. We expect this will lead to further adoption of the language following the lead of highly visible technology firms such as Dropbox.</p>"
"2014-01",Go language,languages-and-frameworks,Trial,"<p>The Go language was originally developed by Google as a system programming language to replace C & C++. Four years out, Go is gaining traction in other areas. The combination of very small, statically linked binaries combined with an excellent HTTP library means Go has been popular with organizations making use of finer-grained, microservice architectures.</p>"
"2014-01",Hive,languages-and-frameworks,Trial,""
"2014-01",Play Framework 2,languages-and-frameworks,Trial,""
"2014-01",Reactive Extensions across languages,languages-and-frameworks,Trial,"<p>Reactive Programming deals with streams or values that change over time. Using elements of data flow, implicit concurrency and transparent event propagation, these techniques enable efficient handling of events on a large scale with a high degree of efficiency and low latency. In the previous radar, we mentioned Reactive Extensions in .NET due to the extensive work done by Microsoft in making Rx a core part of the .NET framework. Since then, with the introduction of the Reactive Cocoa library for Objective C, the Java port of Reactive Extensions, the React JavaScript library, the Elm language based on Haskell & the Flapjax JavaScript library, we are extending this blip to include Reactive Extensions across languages.</p>"
"2014-01",Web API,languages-and-frameworks,Trial,"<p>Until recently, Microsoft's Web API was the least-worst option for building a RESTful service using ASP.NET. Web API 2 fixes a number of rough edges with better support for flexible routing, sub-resources, media types and improved testability. It continues to be our preferred library for building .NET REST APIs.</p>"
"2014-01",Elixir,languages-and-frameworks,Assess,"<p>Elixir is a dynamic, functional, homoiconic programming language built on top of the Erlang virtual machine with a powerful macro system that makes it ideal for building Domain Specific Languages. Elixir has distinctive features such as the Pipe operator that allows developers to build a pipeline of functions like you would in the UNIX command shell. The shared byte code allows Elixir to interoperate with Erlang and leverage existing libraries while supporting tools such as the Mix build tool, the Iex interactive shell and the ExUnit unit testing framework. It is a practical alternative to Erlang for building DSLs.</p>"
"2014-01",Julia,languages-and-frameworks,Assess,""
"2014-01",Nancy,languages-and-frameworks,Assess,"<p>Nancy is a lightweight, open-source web framework for .NET. In the spirit of Sinatra for Ruby, Nancy provides just the essentials necessary to implement web applications with minimal extraneous code. Because the framework is independent of any particular hosting environment, the developer is freed from the IIS and ASP.NET environment. This makes Nancy an excellent complement to OWIN and compatible with other OWIN modules. We are really happy to see the emergence of lightweight web frameworks in a number of other languages as well; Spark for Java, Flask for Python, etc..</p>"
"2014-01",OWIN,languages-and-frameworks,Assess,"<p>One thing that has slowed the evolution of a rich, open source web development ecosystem on the .NET platform has been over-dependence on IIS and the ASP.NET framework. OWIN specifies an open HTTP handling interface that decouples web server from application much like Rack has done for the Ruby community. We are excited about OWIN because it opens up the possibility of new .NET web development tools composed of simple, independently-developed modules. Nancy is the perfect example of this. We also hope it will increase the practice of deploying web applications as standalone, self-hosted services on the .NET platform.</p>"
"2014-01",Pester,languages-and-frameworks,Assess,""
"2014-01",Pointer Events,languages-and-frameworks,Assess,""
"2014-01",Python 3,languages-and-frameworks,Assess,""
"2014-01",TypeScript,languages-and-frameworks,Assess,""
"2014-01",Yeoman,languages-and-frameworks,Assess,"<p>Yeoman attempts to make web application developers more productive by simplifying activities like scaffold, build and package management. It is a collection of the tools Yo, Grunt and Bower that work well as a set.</p>"
"2014-01",Handwritten CSS,languages-and-frameworks,Hold,""
"2014-01",JSF,languages-and-frameworks,Hold,""
"2014-01",D3,Tools,Adopt,"<p><a href=""http://d3js.org/"">D3</a> continues to gain traction as a library for creating rich visualisations in the browser. Previously, it was somewhat low-level, requiring more work for the creation of commonly used visualisations than less sophisticated, more targeted libraries. Since the last radar, libraries like Rickshaw for charting and Crossfilter for in-browser dataset exploration have helped make D3 even more accessible than before.</p>"
"2014-01",Dependency management for JavaScript,Tools,Adopt,""
"2014-01",Ansible,Tools,Trial,"<p>In the category of DevOps orchestration engines, Ansible has nearly universal acclaim within ThoughtWorks projects. It has useful tools and abstractions at a useful level of granularity.</p>"
"2014-01",Gatling,Tools,Trial,"<p>Gatling is another newer player in the automated performance testing space. It is similar to Locust and is much lighter weight than the older options such as JMeter and Grinder. Built on Scala, the DSL provides extensive functionality out of the box including easily configured data feeds and response assertions. In cases where customization is needed, it is easy to drop into Scala to provide extensions. The default generation of numerous dynamic views of the data via Highcharts adds to its appeal.</p>"
"2014-01",Grunt.js,Tools,Trial,"<p>Several of our ThoughtWorks teams developing Node.js apps are using Grunt to automate most of the development activities like minification, compilation, and linting. Many of the common tasks are available as Grunt plugins. You can even programmatically generate the configuration if necessary.</p>"
"2014-01",Hystrix,Tools,Trial,"<p>Managing the web of dependencies in a distributed system is complicated, and is a problem more people are facing with the move to finer-grained microservices. Hystrix is a library for the JVM from Netflix that implements patterns for dealing with downstream failure, offers real-time monitoring of connections, and caching and batching mechanisms to make inter-service dependencies more efficient. In combination with hystrix-dashboard and Turbine, this tool can be used to build more resilient systems and provide near-real time data on throughput, latency and fault tolerance.</p>"
"2014-01",Icon fonts,Tools,Trial,"<p>With the rise of devices with multiple form factors and pixel densities, the issue of presenting high quality icons at all scales has become important. Icon fonts solve this problem by using browser support for WebFonts and SVG instead of scaled images or maintaining different icon sets. As always, when making extensive use of SVG, pay attention to power consumption on mobile devices and performance on older devices.</p>"
"2014-01",Librarian-puppet and Librarian-Chef,Tools,Trial,"<p>Both Puppet and Chef have had to deal with sharing community-contributed modules and manifests for commonly used services and tasks. Both the Puppet Forge and Chef’s Cookbook repository have helped, but people ended up copying and pasting these recipes into their own codebases, preventing them from taking advantage of later bugfixes and improvements. Librarian-puppet and Librarian-Chef attempt to solve this by making it easy to declare your module dependencies, including pulling in known versions of code from these community sites.</p>"
"2014-01",Logstash & Graylog2,Tools,Trial,"<p>As the systems we build involve more fine-grained services spread across more machines than ever before, the challenge of how to get information aggregated to allow for easy problem identification and resolution is more pressing than ever. Logstash has emerged as an easy way to parse and filter logs at source, and then forward them to a single aggregation point. Although Logstash provides some searching and filtering, Graylog2 is often used in conjunction to provide for more fully-featured querying and reporting.</p>"
"2014-01",Moco,Tools,Trial,""
"2014-01",PhantomJS,Tools,Trial,"<p>We see interest on ThoughtWorks projects around PhantomJS, a headless web testing tool that allows functional testing against a realistic target.</p>"
"2014-01",Prototype On Paper,Tools,Trial,""
"2014-01",SnapCI,Tools,Trial,""
"2014-01",Snowplow Analytics & Piwik,Tools,Trial,""
"2014-01",Cloud-init,Tools,Assess,"<p>Cloud-init is a simple but powerful technique for carrying out actions on a cloud instance at boot time. It is particularly useful when used with instance metadata to allow a newly booted instance to pull the configuration, dependencies and software needed to perform a particular role. When used together with the Immutable or Phoenix server pattern, this can create a very responsive and light-weight mechanism for managing deployments in the cloud.</p>"
"2014-01",Docker,Tools,Assess,"<p>The Docker open-source project has generated a great deal of interest within ThoughtWorks, and is growing in momentum and maturity. Docker allows applications to be packaged and published as portable lightweight containers that run identically on a laptop or a production cluster. It provides tooling for the creation and management of application containers, and a run-time environment based on LXC (LinuX Containers).</p>"
"2014-01",Octopus,Tools,Assess,"<p>Windows infrastructure automation should be adopted, however it still remains more difficult than automation on a Unix platform. Tools like Chef and Puppet are increasing their support, but there are also Windows specific solutions being developed like Octopus. Octopus allows automated deployment of your ASP.NET applications and Windows services and decreases dependency on PowerShell. It can be used with both NuGet using Octopak and TeamCity to create a full build, package, and deployment pipeline.</p>"
"2014-01",Sensu,Tools,Assess,"<p>Many monitoring tools are built around the idea of the machine. We monitor what the machine is doing and which software is running on it. When it comes to cloud based infrastructure, especially patterns like Phoenix and Immutable servers this is a problematic approach. Machines come and go, but what is important is that the services remain working. Sensu allows a machine to register itself as playing a particular role and Sensu then monitors it on that basis. When we are finished with the machine we can simply de-register it.</p>"
"2014-01",Travis for OSX/iOS,Tools,Assess,""
"2014-01",Visual regression testing tools,Tools,Assess,""
"2014-01",Xamarin,Tools,Assess,""
"2014-01",Ant,Tools,Hold,""
"2014-01",Heavyweight test tools,Tools,Hold,"<p>Many organizations that have moved to more agile ways of working continue to use heavyweight testing tools. These tools have problems that make them unsuitable for fast moving software delivery. Large complex tools have high learning curves and require specialist skills and training, making it hard for the team themselves to test. Often this results in an unnecessary overhead for every release as other teams get involved. Expensive and limiting software licenses makes this problem even worse. Some heavyweight tools use a 'model driven' approach where an attempt is made to accurately model the usage patterns of the application, which leads to costly test script maintenance and development time being lost to 'false positives'. We have seen few situations where simple open source solutions cannot give the required level of confidence for much less time, effort and money.</p>"
"2014-01",TFS,Tools,Hold,""
"2014-07",Tangible interaction,Techniques,Assess,"<p>As the lines between hardware and software continue to blur, we see traditional computing increasingly embedded in everyday objects. Although connected devices are now ubiquitous in retail spaces, automobiles, homes, and workplaces, we still do not understand how to blend them into a useful computing experience that goes beyond a simple glass screen. <strong>Tangible interaction</strong> is a discipline that blends software and hardware technology, architecture, user experience, and industrial design. The goal is to provide natural environments made up of physical objects where humans can manipulate and understand digital data.</p>"
"2014-07",Forward Secrecy,Techniques,Adopt,"<p><strong>Forward Secrecy</strong> (sometimes known as ""Perfect Forward Secrecy"" or PFS) is a cryptographic technique that protects previous communications sessions even if a server’s master keys are later compromised. Despite being simple to enable for HTTPS connections, many servers are not configured this way, and we recommend enabling forward secrecy to improve security. Note that we don't generally like the word ""perfect"" when used to describe cryptographic protocols - even the best protocol can be broken by a flaw in implementation, random number generator, or by advances in cryptanalytic techniques. Even so, it's important to enable the best security available, whilst keeping informed of new attacks and protocol improvements.</p>"
"2014-07",Segregated DOM plus node for JS Testing,Techniques,Adopt,"<p>As client-side JavaScript applications grow in sophistication, we see an increased need for engineering sophistication to match. A common architectural flaw is unfettered access to the DOM from across the codebase - mixing DOM manipulation with application logic and AJAX calls. This makes the code difficult to understand and extend. Thinking about separation of concerns is a useful antidote, aggressively restricting all DOM access (usually jQuery usage) to a thin 'segregation layer'. One pleasant side-effect of this approach is that everything outside of the <strong>segregated DOM</strong> layer can be tested rapidly in isolation from the browser using a lean JavaScript engine such as <strong>node.js.</strong></p>"
"2014-07",Capture domain events explicitly,Techniques,Trial,"<p>When using techniques such as ""instrument all the things"" and semantic logging, it can be very useful to <strong>capture domain events explicitly</strong>. You can avoid having to infer user intent behind state transitions by modeling these transitions as first-class concerns. One method of achieving this outcome is to use an event sourced architecture with application events being mapped to business meaningful events.</p>"
"2014-07",Development environments in the cloud,Techniques,Trial,"<p><strong>Development environments in the cloud</strong> allow you to entirely outsource development infrastructure, leaving your team with nothing more than laptops and an internet connection. By using a combination of best-of-breed services such as private GitHub repositories and Snap CI's continuous integration in the cloud, your teams may never need to bother in-house IT for infrastructure again.</p>"
"2014-07",Event Sourcing,Techniques,Trial,"<p><strong>Event Sourcing</strong> ensures that all changes to application state are stored as a sequence of events. Not only can we query these events, we can also use the event log to reconstruct past states, and as a foundation to automatically adjust the state to cope with retroactive changes. Complementary to the capture of business meaningful events, the technique has positive implications for analytics in driving greater customer insight.</p>"
"2014-07",Focus on mean time to recovery,Techniques,Trial,"<p>In DevOps-savvy organizations delivery teams often configure production monitoring and respond to incidents themselves. This visibility and access into production environments allows those teams to make changes to their systems to improve their ability to recover quickly when something goes wrong. This <strong>focus on mean time to recovery</strong> improves quality of service overall, and allows teams to safely deploy more frequently. This can also reduce the emphasis on expensive test execution in non-production environments. Techniques we've used include end-to-end 'semantic monitoring' or reconciliation of real business transactions, and the injection of 'synthetic transactions' which exercise systems in non-destructive ways in production.</p>"
"2014-07",Front end instrumentation,Techniques,Trial,"<p>With the proliferation of single-page JavaScript applications, we have found that slow Ajax calls, excessive DOM manipulation, and unexpected JavaScript errors in the browser can have a big impact on perceived website responsiveness. It is very useful to collect and aggregate this profiling information from real end-users' browsers. <a href=""http://newrelic.com/real-user-monitoring""><strong>Real user monitoring</strong></a> provides early warning and diagnosis of production issues, and helps pinpoint them to a specific locality.</p>"
"2014-07",Humane registry,Techniques,Trial,"<p>A Microservice architecture by its very nature increases significantly the number of applications, services, and interactions in your deployed environments. Our projects are showing renewed focus on building <a href=""http://martinfowler.com/bliki/HumaneRegistry.html""><strong>Humane Registries</strong></a> which aggregate information about running services from the live environment and present it in a form for humans to comprehend. These registries favor up-to-date information from running services instead of human-curated documentation.</p>"
"2014-07",Inverse Conway Maneuver,Techniques,Trial,<p>Conway's Law asserts that organizations are constrained to produce application designs which are copies of their communication structures. This often leads to unintended friction points. The ' <strong>Inverse Conway Maneuver</strong>' recommends evolving your team and organizational structure to promote your desired architecture. Ideally your technology architecture will display isomorphism with your business architecture.</p>
"2014-07",Living CSS Style Guides,Techniques,Trial,"<p>A <strong>living CSS style guide</strong> is a page on your site that uses your current CSS styles and acts as a reference for all the currently available visual elements and design patterns. This helps to tightly integrate design into your delivery process by promoting co-ownership of the UI and avoids duplication of styling across your application. Styling changes are visible in the guide immediately and changes propagate across your site from a central location. A sensible way to do this is with a well organized SASS/LESS file structure with semantically named elements that separates structure, aesthetics, and interaction.</p>"
"2014-07",Machine image as a build artifact,Techniques,Trial,"<p>Many of our teams are getting great benefit from publishing virtual <strong>machine images as a build artifact</strong> during their automated build processes. These machine images are published with the application and all dependencies, often in an immutable state. With minimal additional configuration the image can be used to create identical virtual machines in all environments eliminating many common sources of error and waste. Tools are emerging to make this approach simpler, for example Packer in the tools section of the Radar. This approach is working well in companies that take a mature approach to cloud and virtualization, and where delivery teams have responsibility and access right through to production.</p>"
"2014-07",Cloud lift and shift,Techniques,Hold,"<p>As cloud adoption grows we are unfortunately seeing a trend to treat the cloud as just another hosting provider. <strong>Cloud lift and shift</strong> is unfortunately being encouraged by large vendors re-branding existing hosting offerings as ""cloud."" Few of these offer any real flexibility or pay-as-you-use pricing. If you think you can move to the cloud without re-architecting, you are probably not doing it right.</p>"
"2014-07",Masterless Chef/Puppet,Techniques,Trial,"<p>Chef and Puppet servers are a central place to store recipes/manifests that propagate configuration changes to managed machines. They are also a central database of node information and provide access control for manifests/recipes. The disadvantage of having these servers is that they become a bottleneck when multiple clients simultaneously connect to them. They are a single point of failure and take effort to be robust and reliable. In light of this, we recommend <strong>chef-solo or standalone puppet</strong> in conjunction with a version control system when the server is primarily used to store recipes/manifests. Teams can always introduce the servers as the need arises or if they find themselves reinventing solutions to the problems the servers have already solved.</p>"
"2014-07",Perimeterless enterprise,Techniques,Trial,"<p>Technology trends have broken down the garden walls that used to surround corporate IT networks and lead to a <strong>perimeterless enterprise</strong>. Employees frequently use their own consumer devices to access corporate data through cloud services and web APIs, often without the organization's knowledge. As devices continue to proliferate and more applications move to the cloud, businesses are being forced to rethink fundamental assumptions about data access and network security.</p>"
"2014-07",Provisioning testing,Techniques,Trial,"<p>Virtualization and Cloud Computing have made it easy to procure and provision hardware and virtual servers. But with this flexibility comes scale and complexity, and managing our virtual estates has become increasingly difficult. Using techniques more familiar in the software development world such as TDD, BDD and CI offers an approach to managing this complexity and gives us the confidence to make changes to our infrastructure in a safe, repeatable and automatable manner. <strong>Provisioning testing</strong> tools, like rspec-puppet, Test Kitchen and serverspec, are available for most platforms.</p>"
"2014-07",REST without PUT,Techniques,Trial,"<p>In the last radar we talked about Capturing Explicit Domain Events, putting emphasis on recording the business-meaningful events that have triggered state transitions instead of just CRUD'ing entities. REST interfaces commonly use PUT to update resource state, however it's often better to POST to record a new event resource which captures intent. <strong>REST without PUT</strong> has a side-benefit of separating command and query interfaces and forces consumers to allow for eventual consistency.</p>"
"2014-07",Structured logging,Techniques,Trial,"<p>Treating logs as data gives us greater insight into the operational activity of the systems we build. <strong>Structured logging</strong> , which is using a consistent, predetermined message format containing semantic information, builds on this technique and enables tools such as Graylog2 and Splunk to yield deeper insights.</p>"
"2014-07",Tailored Service Template,Techniques,Trial,"<p>We see multiple organizations creating a <strong>Tailored Service Template</strong> which can be used to quickly seed new services, pre-configured to operate within that organization's production environment. The template contains a default set of decisions such as web frameworks, logging, monitoring, build, packaging, and deployment approaches. This is a very useful technique for encouraging collaborative evolution while retaining lightweight governance.</p>"
"2014-07",Bridging physical and digital worlds with simple hardware,Techniques,Assess,"<p>The reduction in cost, size, power consumption and simplicity of physical devices has led to an explosion in devices that open physical domains to software. These devices often contain little more than a sensor and a communication component like Bluetooth Low Energy or WiFi. As software engineers, we need to expand our thinking to include <strong>bridging physical and digital worlds with simple hardware</strong>. We are already seeing this in the car, the home, the human body, agriculture and other physical environments. The cost and time required to prototype such devices is shrinking to match the fast iterations possible in software.</p>"
"2014-07",Datensparsamkeit,Techniques,Assess,"<p>In our desire to support ever-changing business models, learn from past behavior and provide the best experience for every individual visitor, we are tempted to record as much data as possible. At the same time hackers are more ferocious than ever, with one spectacular security breach after another, and we now know of unprecedented mass-surveillance by government agencies. The term <strong>Datensparsamkeit</strong> is taken from German privacy legislation and describes the idea to only store as much personal information as is absolutely required for the business or applicable laws. Some examples are instead of storing a customer's full IP address in access logs, just using the first two or three octets and instead of logging transit journeys with a username using an anonymous token. If you never store the information, you do not need to worry about someone stealing it.</p>"
"2014-07",Machine image pipelines,Techniques,Assess,"<p>Many deployments require machine images for different server roles like applications and services, databases, and reverse proxies. Because building a machine image from scratch, using an operating system ISO and provisioning scripts, can take a considerable amount of time it can be useful to create a <strong>build pipeline for machine images</strong>. The first stage in the pipeline sets up a base image according to general standards in the organization. Subsequent stages can then enhance the base image for different purposes. If several applications or services have similar requirements, an application server for example, the pipeline can be extended by an intermediate stage, which takes the base image and provides an image with an application server but no application/service. These pipelines are not linear, they are trees that are branching out from the base image.</p>"
"2014-07",Pace-layered Application Strategy,Techniques,Assess,"<p>Gartner's <strong>Pace-layered Application Strategy</strong> approach to architecture attempts to articulate the fact that decisions about architecture shouldn't be a one-size-fits-all approach. Instead, it is important to take a balanced view to your technology portfolio in terms of where to be conservative, and where to take risks. While we have qualms about some of the more prescriptive recommendations that seem to come with Pace, in general we like the concept and many organizations could benefit from adapting similar models.</p>"
"2014-07",Property-based unit testing,Techniques,Assess,<p>We value unit testing on projects and we like techniques such as <strong>property-based unit testing</strong> which augment it. This is a practice of using data generators to create randomized inputs within defined ranges. It allows a quick check for boundary conditions and other unanticipated failure modes and has burgeoning support on multiple platforms.</p>
"2014-07",DevOps as a team,Techniques,Hold,"<p>Some companies with good intentions create a separate <strong>DevOps team</strong> , which misconstrues the definition of DevOps. Rather than a role, DevOps is a cultural movement encouraging collaboration between operations specialists and developers. Rather than create yet another silo and suffer the consequences of Conway's Law, we advise you to embed these skills into teams, improving feedback loops and communication pathways by removing friction.</p>"
"2014-07",Testing as a separate organization,Techniques,Hold,"<p>We continue to see organizations create separate Development and QA teams. Fast feedback is a core tenet of Agile and critical to the success of a project. Using a separate QA team slows down this feedback, creates an ""us and them"" mentality and makes it more difficult to build quality into the software. Testing should be a tightly integrated activity and isn't something the team can outsource. We recommend integrated teams where testers work closely with developers instead of having <strong>testing as a separate organization.</strong></p>"
"2014-07",Velocity as productivity,Techniques,Hold,"<p>Of all the approaches that we might disagree with, equating velocity with productivity has become so prevalent that we felt it important to call it out in our hold ring. When properly used, velocity allows the incorporation of ""yesterday's weather"" into the iteration planning process. Velocity is simply a capacity estimate for a given team at a given time. It can improve as a team gels or by fixing problems like technical debt or a flaky build server. However, like all metrics, it can be misused. For example, over-zealous project managers attempt to insist on continual improvement of velocity. Treating <strong>velocity as productivity</strong> leads to unproductive team behaviors that optimize the metric at the expense of actual working software.</p>"
"2014-07",Hadoop 2.0,Platforms,Adopt,"<p>Hadoop's initial architecture was based on the paradigm of scaling data horizontally and metadata vertically. While data storage and processing were handled by the slave nodes reasonably well, the masters that managed metadata were a single point of failure and limiting for web scale usage. <strong>Hadoop 2.0</strong> has significantly re-architected both HDFS and the Map Reduce framework to address these issues. The HDFS namespace can be federated now using multiple name nodes on the same cluster and deployed in a HA mode. MapReduce has been replaced with YARN, which decouples cluster resource management from job state management and eliminates the scale/performance issues with the JobTracker. Most importantly, this change encourages deploying new distributed programming paradigms in addition to MapReduce on Hadoop clusters.</p>"
"2014-07",Vumi,Platforms,Adopt,"<p>In the last technology radar, we spoke about <strong>Vumi</strong> as a platform for using USSD as a UI for feature phones. Vumi has become very stable and its open source nature gives it appeal. In our projects, we have been able to integrate with telecommunication networks seamlessly and rapidly due to the simplicity of configuration. The platform is also readily available and scalable.</p>"
"2014-07",iBeacon,Platforms,Trial,"<p><strong>iBeacons</strong> are the Apple implementation of the broader category of beacons, which are small devices that use low energy Bluetooth (BLE) to provide fine-grained proximity information for mobile phones and other devices. Despite the hype surrounding iBeacons and the limitations to the accuracy and reliability of the information they provide, we do feel that they open interesting opportunities as trigger points for interacting with your users in a contextually relevant manner.</p>"
"2014-07",PostgreSQL for NoSQL,Platforms,Trial,<p><strong>PostgreSQL</strong> is expanding to become the NoSQL choice of SQL databases. Version 9.2 includes the ability to store JSON data with full querying capabilities on the content of the JSON document. Other extensions let the user store and query data in the form of key/value pairs. This lets you take advantage of the underlying storage and transactional capabilities of a time-tested database without being tied to a relational data model. This is ideal for those who want both SQL and NoSQL applications but prefer a single reliable infrastructure that they already know how to support.</p>
"2014-07",Private Clouds,Platforms,Trial,"<p>The number and maturity of on-premise <strong>private cloud</strong> options continue to increase. From OpenStack-based options like Rackspace's private cloud to PAAS options like CloudFoundry, for those organizations seeking to make use of existing infrastructure or for whom an increased level of control is needed over off-premise cloud, then these solutions are well worth a look.</p>"
"2014-07",ARM Server SoC,Platforms,Assess,"<p>AMD recently released an <a href=""http://www.anandtech.com/show/7989/amd-announces-project-skybridge-pincompatible-arm-and-x86-socs-in-2015"">8-core <strong>ARM SoC</strong> (System on a Chip)</a> designed for servers and has committed to releasing an ARM SoC with integrated graphics in 2015. ARM-based servers are an interesting alternative to x86 because they are significantly more energy efficient. For some workloads, building an ARM-powered Cloud is preferable.</p>"
"2014-07",CoAP,Platforms,Assess,"<p><strong>CoAP</strong> is an open standards communication protocol for the Internet of Things (IoT). While there is currently a proliferation of competing standards in the IoT space, we particularly like CoAP. It is specifically designed for resource-constrained devices and local radio networks. It uses UDP for transport, but is semantically compatible with HTTP. CoAP uses a web-based model of devices with their own URLs and a request-response paradigm that supports RESTful and decentralized approaches.</p>"
"2014-07",DigitalOcean,Platforms,Assess,"<p>Although the IaaS space is crowded, there is room for new competitors to enter the market. <a href=""http://digitalocean.com""><strong>DigitalOcean</strong></a> has impressed us recently with its cost, speed and simplicity. If all you need is basic compute infrastructure, it is well worth a look.</p>"
"2014-07",Espruino,Platforms,Assess,"<p><strong>Espruino</strong> is a microcontroller that natively executes JavaScript and thus lets the large number of JavaScript programmers get started very quickly. Using an event-based model similar to Node.js, Espurino devices can be very power efficient while still being responsive. Less powerful than a Raspberry Pi and slightly slower than an Arduino, Espruino makes an interesting alternative in low-power environments that need responsive behavior but can sacrifice some of the raw high level features and execution speed of those platforms.</p>"
"2014-07",EventStore,Platforms,Assess,"<p>Given the popularity of event sourcing, it is no surprise that tools in this space are maturing. <a href=""http://geteventstore.com""><strong>EventStore</strong></a> is an open source functional database for storing immutable events and performing complex event processing on the event streams. Unlike other tools in this space, EventStore exposes event streams as Atom collections which therefore require no special infrastructure such as message buses or highly specialized clients to use.</p>"
"2014-07",Low-cost robotics,Platforms,Assess,"<p>With the cost of industrial robots dropping and their safety and ease of use increasing, the world of useful, commercial robotics is opening up. Robots like Rethink Robotics' Baxter or Universal Robotics' U5, make it feasible for small to medium-sized businesses to automate repetitive tasks previously performed by humans. Increasingly, enterprise software will have to integrate with <strong>low-cost robotics</strong> as another participant in the value stream. The challenge lies in making the experience easy and productive for the human co-workers as well.</p>"
"2014-07",Mapbox,Platforms,Assess,"<p><a href=""http://mapbox.com""><strong>Mapbox</strong></a> is an open mapping platform we have used on several projects. It allows a developer to quickly add a map to an application and to style the map. Mapbox can serve as an alternative to conventional mapping platforms, and it also allows for mobile friendly maps.</p>"
"2014-07",OpenID Connect,Platforms,Assess,"<p><strong>OpenID Connect</strong> is a standard protocol for federated identity built on OAuth 2.0. It addresses a long-standing need for a simple, web-based protocol to exchange trusted authentication and authorization information. Previous standards like SAML or generic OAuth 2.0 have proven too broad and complex to ensure universal compatibility. Our hope is that OpenID Connect can provide a useful basis for secure access to RESTful microservices with authenticated end-user identity.</p>"
"2014-07",SPDY,Platforms,Assess,<p><strong>SPDY</strong> is an open networking protocol for low-latency transport of web content proposed for HTTP 2.0 that has seen a rise in modern browser support. SPDY reduces page load time by prioritizing the transfer of subresources so that only one connection is required per client. Transport layer security is used in SPDY implementations with the transmission headers gzip or deflate compressed instead of human-readable text as in HTTP. It is great for high-latency environments.</p>
"2014-07",Storm,Platforms,Assess,"<p>Heterogeneous and overwhelmingly large amounts of data is not the only theme of big data. In certain circumstances, speed of processing can be as important as the volume. <strong>Storm</strong> is a distributed realtime computation system. It has similar scalability to Hadoop, with throughput as fast as a million tuples per second. It enables for real time processing what Hadoop does for batch.</p>"
"2014-07",TOTP Two-Factor Authentication,Platforms,Assess,"<p><strong>Two-factor authentication</strong> significantly improves security over simple password-based systems. <a href=""http://tools.ietf.org/html/rfc6238"">RFC 6238</a> -- <a href=""http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm"">Time-based One-Time Password</a> Algorithm -- is a standard for two-factor authentication. ""Standard"" authenticator apps from <a href=""https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2"">Google</a> and <a href=""http://www.windowsphone.com/en-us/store/app/authenticator/e7994dbc-2336-4950-91ba-ca22d653759b"">Microsoft</a> provide tokens to smartphone users, and there are a number of other client and server implementations readily available. With providers such as Google, Facebook, Dropbox and Evernote using <strong>TOTP</strong> , there really is no excuse to continue using simple password-based authentication where stronger security would be appropriate.</p>"
"2014-07",Web Components standard,Platforms,Assess,"<p>In the previous radar we cautioned against the use of traditional web component frameworks that provide a component model on the server side. The <strong>Web Components standard</strong> that originated at Google is something quite different. It provides an easier way to create recyclable widgets by helping with encapsulation of HTML, CSS and JavaScript, so they do not interfere with the rest of the page and the page does not interfere with them. Developers can use as much or as little of the framework as needed. Early support is provided by the Polymer Project.</p>"
"2014-07",Big enterprise solutions,Platforms,Hold,"<p>The gap between what ""enterprise-class"" commercial packages provide and what is actually needed is widening. This is especially true for internet facing applications. Innovative solutions that really scale and easily support modern techniques such as continuous delivery are written by practitioners for practitioners. They originate with many internet scale companies and are refined as open source software. <strong>Big enterprise solutions</strong> often obstruct effective delivery due to their accumulated bloat, cumbersome licensing restrictions, and feature sets that are driven by check-lists and imaginary requirements far removed from the realities of most development teams.</p>"
"2014-07",CMS as a platform,Platforms,Hold,"<p>Content Management Systems (CMS) have their place. In many cases it is unreasonable to write editing and workflow functionality from scratch. However, we have experienced serious problems when <strong>CMS as a platform</strong> becomes an IT solution that grows beyond managing simple content.</p>"
"2014-07",Enterprise Data Warehouse,Platforms,Hold,"<p>While centralized integration of data for analysis and reporting remains a good strategy, traditional <strong>Enterprise Data Warehouse</strong> (EDW) initiatives have a higher than 50% failure rate. Big up-front data modeling results in overbuilt warehouses that take years to deliver and are expensive to maintain. We are placing these old-style EDWs and techniques on hold in this edition of the radar. Instead, we advocate evolving towards an EDW. Test and learn by building small, valuable increments that are frequently released to production. Nontraditional tools and techniques can help, for example using a Data Vault schema design or even a NoSQL document store such as HDFS.</p>"
"2014-07",OSGi,Platforms,Hold,""
"2014-07",Dropwizard,languages-and-frameworks,Adopt,"<p><strong>Dropwizard</strong> is an opinionated combination of several lightweight Java tools and frameworks, many of which would merit mention in their own right. The package embodies many of our favorite techniques, including an embedded HTTP server, support for RESTful endpoints, built-in operational metrics and health-checks, and straightforward deployments. Dropwizard makes it easy to do the right thing, allowing you to concentrate on the essential complexity of a problem rather than the plumbing.</p>"
"2014-07",Go language,languages-and-frameworks,Adopt,"<p>The <strong>Go language</strong> gradually changed status from ""Just Another Language"" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity.</p>"
"2014-07",Java 8,languages-and-frameworks,Adopt,"<p>The team behind <strong>Java 8</strong> had to fight two battles: the community forces encouraging forever backwards compatibility (a long hallmark of Java) and the technical challenge of making a deep language change mesh with existing libraries and features. They succeeded on both fronts, breathing new life into the Java Language and placing it on par with other mainstream languages in terms of functional programming features. In particular, Java 8 has excellent syntactic magic that allows seamless interoperability between Lambda blocks, the new higher-order function feature, and SAM (Single Abstract Method) interfaces, the traditional way of passing behavior.</p>"
"2014-07",Reactive Extensions across languages,languages-and-frameworks,Adopt,"<p>The <strong>reactive architecture</strong> keeps spreading across platforms and paradigms simply because it solves a common problem in an elegant way, hiding inevitable application plumbing in a nice encapsulation.</p>"
"2014-07","Scala, the good parts",languages-and-frameworks,Adopt,"<p>Scala is a large language that is popular because of its approachability for new developers. This banquet of features is a problem because many aspects of Scala, like implicit conversions and dynamics, can get you into trouble. To successfully use Scala, you need to research the language and have a very strong opinion on which parts are right for you, creating your own definition of <strong>Scala, the good parts</strong>. You can disable the parts you do not want using a system called feature flags.</p>"
"2014-07",AngularJS,languages-and-frameworks,Trial,<p>We continue to see JavaScript frameworks as a useful way to structure code and bring better coding techniques to JavaScript. <strong>AngularJS</strong> is used widely by ThoughtWorks projects. However we do advise teams to assess other good alternatives such as Ember.js and Knockout.js.</p>
"2014-07",Core Async,languages-and-frameworks,Trial,"<p>The Clojure <strong>core.async</strong> library allows asynchronous communication using channels, with similar syntax and capabilities to Google's Go language. The core.async library solves many common problems in an elegant way, cleaning up event callback setup and adding simple concurrency primitives. It also highlights one of the advantages of the Lisp nature of Clojure: channels add operators that are consistent with existing Clojure operators, seamlessly weaving new functionality into the language core. In addition, core.async is supported in both Clojure and ClojureScript (despite JavaScript's lack of threads), utilizing underlying platform abstractions to provide a consistent interface to both languages.</p>"
"2014-07",HAL,languages-and-frameworks,Trial,"<p>We see lots of teams creating RESTful interfaces without paying any attention to hypermedia. <a href=""http://stateless.co/hal_specification.html""><strong>HAL</strong></a> is a simple format for incorporating hyperlinks into JSON representations which is easy to implement and consume. HAL is well supported by libraries for parsing and representing JSON, and there are HAL-aware REST client libraries such as <a href=""https://github.com/codegram/hyperclient"">Hyperclient</a> which make it easy to navigate resources by following links.</p>"
"2014-07",Hive,languages-and-frameworks,Trial,"<p><strong>Hive</strong> is a data warehouse built on top of Hadoop which provides a SQL-like query and data definition language. Hive converts queries into MapReduce jobs that can be run across the entire Hadoop cluster. Like all useful abstractions, Hive does not try to deny the existence of the underlying mechanics of Hadoop and supports custom map-reduce operations as a powerful extension mechanism. Despite the superficial similarities to SQL, Hive does not try to be a replacement for low-latency, real-time query engines found on relational database systems. We strongly advise against using Hive for online ad-hoc querying purposes.</p>"
"2014-07",Nancy,languages-and-frameworks,Trial,"<p><strong>Nancy</strong> continues to gain traction in the Alt.NET community and we have found it particularly useful for deploying low-ceremony, lightweight fakes for testing in a microservices environment.</p>"
"2014-07",Pester,languages-and-frameworks,Trial,<p>PowerShell remains a widely used option for doing low-level automation on Windows machines. <strong>Pester</strong> is a testing library that makes it possible to execute and validate PowerShell commands. Pester simplifies testing of scripts during development with a powerful mocking system that makes it possible to setup stubs and doubles in tests. Pester tests can also be integrated into a continuous integration system to prevent regression defects.</p>
"2014-07",Play Framework 2,languages-and-frameworks,Trial,"<p>The <strong>Play Framework 2</strong> blip has generated many internal discussions. We had competing suggestions to move it to adopt and hold. These differences relate primarily to the specific applications for which it is used, how it is used, and what expectations people have for it. While none of these issues are unique for Play, Play has generated far more controversy than is typical in the standard library versus framework debate. We reiterate the cautions stated in the previous radar, and we will monitor how Play continues to mature to support its sweet spot.</p>"
"2014-07",Q & Bluebird,languages-and-frameworks,Trial,"<p><a href=""https://github.com/kriskowal/q""><strong>Q</strong></a> is a fully Promises/A+ compliant implementation in JavaScript that lets users compose promises arbitrarily deeply without the need for the deeply nested callbacks that obscure control flow. Q takes care of threading fulfilled values and rejected promises through the appropriate code paths. The space of Promises/A+ compliant libraries is currently very active with alternatives like <a href=""https://github.com/petkaantonov/bluebird""><strong>Bluebird</strong></a> also rapidly gaining mindshare.</p>"
"2014-07",R as Compute Platform,languages-and-frameworks,Trial,"<p>R is traditionally used as stand alone analysis tool by research teams. With improvements in packages like Rook and RJSONIO, it has become trivial to wrap the computational logic and expose it as an API. ThoughtWorks teams are using <strong>R as Compute platform</strong> to crunch large datasets in real time, using in-memory storage integrated with enterprise systems.</p>"
"2014-07",Elm,languages-and-frameworks,Assess,"<p><strong>Elm</strong> is a functional programming language that is used to build web based user interfaces in a functional reactive style. Elm is strongly statically typed and built on the Haskell platform. Elm has a Haskell-like syntax but compiles down to HTML, CSS and JavaScript. While still in its very early days, individuals and teams interested in exploring highly interactive web-based GUIs should look into this interesting little language.</p>"
"2014-07",Julia,languages-and-frameworks,Assess,"<p><strong>Julia</strong> is a dynamic, procedural and homoiconic programming language designed to address the needs of high performance scientific computing. The implementation of the language is organized around the concept of generic functions and dynamic method dispatch. Julia programs are largely functions that can contain multiple definitions for different combinations of argument types. The combination of these language features and the LLVM based just-in-time compiler help Julia achieve a high level of performance. Julia also supports a multiprocessing environment based on message passing to allow programs to run on multiple processes. This enables programmers to create distributed programs based on any of the models for parallel programming.</p>"
"2014-07",Om,languages-and-frameworks,Assess,"<p>Adopting the entire Clojure stack (the Clojure and ClojureScript languages, and optionally the Datomic database) offers some advantages like immutable data structures from user interface to backend. Several frameworks have appeared in the Clojure space to leverage its unique features, but the most promising so far is <strong>Om</strong>. Om is a ClojureScript wrapper around Facebook's React JavaScript reactive programming framework. Yet Om leverages the inherent immutability of ClojureScript, allowing automatic features like snapshots of UI state and undo. And due to the efficiency of ClojureScript's data structures, some Om applications run faster than identical ones based on the raw underlying React framework. We expect significant evolution and innovation to continue around Om.</p>"
"2014-07",Pointer Events,languages-and-frameworks,Assess,"<p>After some delays, mainly caused by patent claims from Apple, the W3C has now finalized the Touch Events recommendation. However, in the meantime, <strong>Pointer Events</strong> , a newer, broader, and richer standard, is picking up momentum. We recommend considering Pointer Events for HTML interfaces that must work across different input methods.</p>"
"2014-07",Python 3,languages-and-frameworks,Assess,"<p><strong>Python 3</strong> was a major change from the previous Python 2.x that introduced backwards incompatible changes. It was notable for actually removing languages features, making Python 3 easier to use and more consistent without reducing its power. This has led to problems in adoption as some widely used supporting libraries have not been ported, and Python developers often have to find new ways of doing things. Nonetheless the drive towards making a language simpler is to be applauded, and if you are actively developing in Python, then give Python 3 another look.</p>"
"2014-07",Rust,languages-and-frameworks,Assess,"<p><strong>Rust</strong> is a system programming language with modern affordances. It features a rich typing system, safe memory model and task-based concurrency. Compared to the Go language, Rust is more friendly to people who would like to write code in a functional style.</p>"
"2014-07",Spray/akka-http,languages-and-frameworks,Assess,"<p><strong>Spray/akka-http</strong> is a suite of lightweight Scala libraries providing client/server RESTful support on top of Akka. It fully embraces the Actor-, Future-, and Stream-based programming models used by the underlying platform. This lets you work on RESTful applications with idiomatic Scala code without worrying about wrapping around other Java libraries.</p>"
"2014-07",Spring Boot,languages-and-frameworks,Assess,"<p><a href=""http://projects.spring.io/spring-boot""><strong>Spring Boot</strong></a> allows easy set up of standalone Spring-based applications. It's ideal for pulling up new microservices and easy to deploy. It also makes data access less of a pain due to the hibernate mappings with much less boilerplate code.</p>"
"2014-07",TypeScript,languages-and-frameworks,Assess,"<p><strong>TypeScript</strong> is an interesting approach to bringing a new programming language to the browser. With TypeScript, the new language features compile down to normal JavaScript, and yet as a superset of JavaScript it does not feel like a completely new language. It does not represent an either-or proposition and it does not relegate JavaScript to an intermediate execution platform. Many of the language features are based on planned future extensions of JavaScript.</p>"
"2014-07",Wolfram Language,languages-and-frameworks,Assess,"<p>We are intrigued by the possibilities offered by the <strong>Wolfram language</strong>. Building on the symbolic approaches of the Mathematica language it also has access to a vast array of algorithms and data from the Wolfram Alpha project, which means that very succinct programs can analyze and visualize powerful combinations of real-world data.</p>"
"2014-07",Handwritten CSS,languages-and-frameworks,Hold,"<p>Along with JavaScript and HTML, CSS is a core technology for creating websites. Unfortunately, the language itself lacks key features, which leads to a high level of duplication and a lack of meaningful abstractions. While CSS3 aims to rectify some of these issues, it will be years before the modules that make up CSS3 will be properly supported in most browsers. Fortunately, there is a solution today using <strong>CSS preprocessors</strong> like SASS and LESS. Due to their quality and support, we believe that the days of <strong>handwritten CSS</strong> , for anything apart from trivial work, are over.</p>"
"2014-07",JSF,languages-and-frameworks,Hold,"<p>We continue to see teams run into trouble using <strong>JSF</strong> - JavaServer Faces - and are recommending you avoid this technology. Teams seem to choose JSF because it is a Java EE standard without really evaluating whether the programming model suits them. We think JSF is flawed because its programming model encourages use of its own abstractions rather than fully embracing the underlying web model. JSF, like ASP.NET webforms, attempts to create stateful component trees on top HTML markup and the stateless HTTP protocol. The improvements in JSF 2.0 and 2.2, such as the introduction of stateless views and the promotion of GET, are steps in the right direction, maybe even an acknowledgement that the original model was flawed, but we feel this is a too little too late. Rather than dealing with the complexity of JSF we recommend teams use simple frameworks and work closely with web technologies including HTTP, HTML and CSS.</p>"
"2014-07",Ansible,Tools,Adopt,"<p>Since first featuring <strong>Ansible</strong> in the last radar, we continue to be impressed with its capabilities and ease of use compared to other offerings in this space. Based on our experiences over the last year we have no hesitation in recommending Ansible as a great option for automated control of your infrastructure.</p>"
"2014-07",Dependency management for JavaScript,Tools,Adopt,"<p>Using <strong>Dependency management</strong> tools <strong>for JavaScript</strong> has helped our delivery teams handle large amounts of JavaScript by structuring their code and loading the dependencies at runtime. Though this simplified the effort in most cases, lazy loading complicates supporting offline mode. Different dependency management tools have different strengths, so choose based on your context.</p>"
"2014-07",CartoDB,Tools,Trial,"<p><strong>CartoDB</strong> is an open-source GIS tool built on PostGIS and PostgreSQL. It allows for storage and searching of geospatial data using SQL. It also provides a handy JavaScript library, CartoDB.js, for map styling and data visualization.</p>"
"2014-07",Chaos Monkey,Tools,Trial,"<p>Following our recommendation in the last radar to consider a focus on reducing mean time to recovery, we want to highlight <strong>Chaos Monkey</strong> from Netflix's Simian Army suite. It is a tool that randomly disables instances in the production environment during normal operation. When run with comprehensive monitoring and a team on stand by, it helps to uncover unexpected weaknesses in the system, which in turn allows the development team to build automatic recovery mechanisms ahead of time, rather than struggling to respond to an outage that caught everyone by surprise.</p>"
"2014-07",Docker,Tools,Trial,"<p><strong>Docker</strong> continues to gain momentum, and is seeing use on projects although mostly in non-production environments. Docker provides a set of tools to efficiently package and distribute executable machine images, which can then be launched as lightweight containers. A considerable community is growing around the tool. Notable is <a href=""https://coreos.com/"">CoreOS</a> which is an operating system based on ChromeOS built for deploying Docker containers across a cluster with tools for deployment, service discovery and configuration.</p>"
"2014-07",Flyway,Tools,Trial,"<p>Automated database migrations are common on agile projects, and we are happy to see advances in the tools for this space. <strong>Flyway</strong> makes it as painless as possible to automate changes to databases. While not as feature-rich as some competing tools, we have used it on multiple projects and appreciate its low friction.</p>"
"2014-07",Foreman,Tools,Trial,"<p>The big Cloud providers have clearly raised the bar for provisioning, monitoring, and configuration, simplifying these tasks dramatically through powerful tools. Organizations that want to keep their compute and storage resources in-house are looking for similar solutions that work within their organizational context. <a href=""http://theforeman.org/""><strong>Foreman</strong></a> has worked really well for us, and it is open-source software, too.</p>"
"2014-07",GenyMotion,Tools,Trial,"<p>Device fragmentation in the Android world is often cited as a problem because it can be difficult to understand how your applications will behave on a large number of disparate platforms. <a href=""http://genymotion.com""><strong>GenyMotion</strong></a> is an emulator which can mimic the characteristics of a number of different Android devices. Our teams have found this very effective in giving fast feedback for our Android applications.</p>"
"2014-07",GoCD,Tools,Trial,"<p>Owing to the increasing interest in Continuous Delivery and deployment pipelines, we see many teams trying to extend their Continuous Integration tooling with plugins that provide deployment pipelines at a visual level. <a href=""http://go.cd""><strong>GoCD</strong></a> is a tool that was built with the concept of deployment pipelines at its core. GoCD has the ability to sequence workflows both sequentially and in parallel at many levels, to execute specific tasks only on certain machines as well as to deterministically promote and propagate artifacts, which is a key enabler for Continuous Delivery. These are capabilities that most Continuous Integration tools lack, and we recommend that teams who might have otherwise tried to build a deployment pipeline from their Continuous Integration server try GoCD instead. GoCD was built by ThoughtWorks, is open-source, and is available for free for all teams. The <a href=""https://github.com/gocd/gocd/"">source code</a> is available under the Apache 2.0 license.</p>"
"2014-07",Grunt.js,Tools,Trial,"<p>We have seen a growth in the <strong>Grunt</strong> ecosystem and it is currently being used in several of our projects. With the proliferation of plugins and the ease to author and publish self-written plugins to npm, automation using Grunt can be done with little effort. We suggest choosing a task runner that best meets the needs of the project and Grunt is one of the task runners you should consider.</p>"
"2014-07",Gulp,Tools,Trial,"<p><strong>Gulp</strong> is an alternative to Grunt. It is a command-line task automation tool that helps developers with SaaS compilation, autoprefixing, minification, concatenation and so on. Gulp's central idea is the use of streams, and its plugins are designed to do only one task.</p>"
"2014-07",Moco,Tools,Trial,"<p>Testing HTTP-based micro-services can be painful and tricky. Particularly in two scenarios, the consumption of a group of micro-services from front-end, and the communication between micro-services. To deal with these, <strong>Moco</strong> can be handy. It is a lightweight stub framework for testing HTTP-based endpoints. You can have an embedded stubbed service up and running with 2 lines of Java or Groovy code, or a standalone one with few lines of JSON to describe the required behavior.</p>"
"2014-07",Packer,Tools,Trial,"<p>We featured 'Machine image as a build artifact' in the last Radar, as an excellent way to implement fast spin-up, immutable servers. The thing holding this technique back was the difficulty in building images, especially when targeting more than one platform. <a href=""http://packer.io""><strong>Packer</strong></a> solves this, using your configuration management tool of choice to create images for a number of platforms including AWS, Rackspace, DigitalOcean and even Docker and Vagrant, although we have found the VMWare support to be problematic.</p>"
"2014-07",Pact & Pacto,Tools,Trial,"<p>Consumer-Driven Contracts are a testing approach to help service interfaces evolve with confidence without unknowingly breaking consumers. The similarly named <a href=""https://github.com/realestate-com-au/pact""><strong>Pact</strong></a> and <a href=""http://thoughtworks.github.io/pacto""><strong>Pacto</strong></a> are two new open-source tools which allow testing interactions between service providers and consumers in isolation against a contract. Both have grown out of projects which are building RESTful microservices and show great promise.</p>"
"2014-07",Prototype On Paper,Tools,Trial,"<p>We have long favored the use of hand-drawn, low fidelity prototypes to illustrate user interactions without getting caught up in the nitty-gritty of the graphic design. <strong>Prototype On Paper</strong> is a tool that allows individual mockups drawn on paper to be captured via camera on iOS or Android and linked together to allow for testing of user interaction. This bridges the gap nicely between the static, lo-fi paper prototypes and more hi-fi prototyping techniques.</p>"
"2014-07",Protractor for AngularJS,Tools,Trial,"<p><strong>Protractor</strong> is a testing framework based on Jasmine that wraps WebDriverJS with functionality specifically designed to execute end-to-end tests <strong>for Angular.JS</strong> applications. We've found it to be a standout in the rapidly evolving space of JavaScript testing frameworks. Despite being designed to run end-to-end tests with a real backend, Protractor tests can also be made to work with a stubbed HTTP gateway to run purely client side tests.</p>"
"2014-07",SnapCI,Tools,Trial,"<p>We mentioned ThoughtWorks' <strong>SnapCI</strong> - a hosted service that provides deployment pipelines - on the last edition of the Radar. Since then, we have seen many teams successfully use SnapCI on their projects. If you need a simple continuous delivery solution in the cloud, SnapCI can provide it with one click. No hardware, no hassle.</p>"
"2014-07",Snowplow Analytics & Piwik,Tools,Trial,"<p>With increasing scrutiny over the privacy of data, more companies are concerned about sharing web analytics with third parties. <strong>Snowplow Analytics and Piwik</strong> are examples of open-source analytics platforms that can be self-hosted and provide a promising feature set and roadmap.</p>"
"2014-07",Visual regression testing tools,Tools,Trial,"<p>Growing complexity in web applications has increased the awareness that appearance should be tested in addition to functionality. This has given rise to a variety of <strong>visual regression testing tools</strong> , including CSS Critic, dpxdt, Huxley, PhantomCSS, and Wraith. Techniques range from straightforward assertions of CSS values to actual screenshot comparison. While this is a field still in active development we believe that testing for visual regressions should be added to Continuous Delivery pipelines.</p>"
"2014-07",Appium,Tools,Assess,"<p>Mobile test automation is becoming increasingly important. <a href=""http://appium.io""><strong>Appium</strong></a> is a test automation framework which can be used to test mobile web, mobile native and mobile hybrid applications on iOS and Android. At the core, Appium is a webserver that exposes a REST API, receiving connections from a client, listening for commands, executing those commands on a mobile device and responding with an HTTP response representing the result of the command execution. It allows tests to be written against multiple platforms (iOS, Android) using the same API. Appium is open source with easy set up using npm.</p>"
"2014-07",Consul,Tools,Assess,""
"2014-07",Flume,Tools,Assess,"<p>When using techniques such as 'instrument all the things' and semantic logging, you may end up with huge amount of log data. Collecting, aggregating and moving this data can be problematic. <strong>Flume</strong> is a distributed system for exactly this purpose. It has a flexible architecture based on streaming data flows. With built-in support for HDFS, Flume can easily move multi-terabyte log data from many different sources to a centralized data store for further processing.</p>"
"2014-07",Hosted solutions for testing iOS,Tools,Assess,"<p>All development for iOS must be carried out on OS X. Due to technical and licensing restrictions running server farms with OS X is neither easy nor common. In spite of these difficulties, <strong>Travis CI</strong> , with support from Sauce Labs, now provides cloud-based continuous integration services for iOS and OS X projects.</p>"
"2014-07",leaflet.js,Tools,Assess,"<p><a href=""http://leafletjs.com""><strong>Leaflet.js</strong></a> is a JavaScript library for mobile-friendly interactive maps. The library places a huge emphasis on performance, usability and simplicity, and as such works efficiently across mobile platforms and desktop browsers. It is a viable library to consider when building interactive maps for mobiles.</p>"
"2014-07",Mountebank,Tools,Assess,"<p>When testing services, we commonly need to stub out downstream collaborating services. Written by a ThoughtWorker, <a href=""http://www.mbtest.org""><strong>Mountebank</strong></a> is a lightweight service which you can configure via HTTP that is capable of stubbing and mocking HTTP, HTTPS, SMTP and TCP.</p>"
"2014-07",Papertrail,Tools,Assess,"<p><strong>Papertrail</strong> is a log aggregation service that aggregates data from a variety of sources including web-servers, routers, databases and PaaS services. In addition to aggregation it provides search, filtering, and alerts and notifications out of the box. While undeniably convenient and expedient in many cases, we remain concerned about widespread adoption of services that centralize large quantities of data aggregated from multiple parties.</p>"
"2014-07",Roslyn,Tools,Assess,"<p><strong>Roslyn</strong> , a .NET compiler platform under the Apache License 2.0, is a next-generation set of compilers for C# and VB.NET written entirely as managed code. It provides access to the compiler as a service and includes code analysis APIs allowing developers to access information from the compiler that was previously treated as a black box, for example syntactic and semantic models. The most immediate impact should be seen in enhancements to .NET IDEs through refactoring and code generation tools. We also expect to see improved code diagnostics and static analysis, although it will be interesting to see what the community comes up with. Meanwhile Xamarin has a Mono-compatible copy of Roslyn source code hosted on GitHub and plans to bundle Roslyn’s compilers with Mono as it stabilizes, in addition to integrating the best parts into their code base.</p>"
"2014-07",Spark,Tools,Assess,"<p>For iterative processing such as machine learning and interactive analysis, Hadoop map-reduce does not work very well because of its batch-oriented nature. <strong>Spark</strong> is a fast and general engine for large-scale data processing. It aims to extend map-reduce for iterative algorithms and interactive low latency data mining. It also ships with a machine learning library.</p>"
"2014-07",Swagger,Tools,Assess,"<p><a href=""https://helloreverb.com/developers/swagger""><strong>Swagger</strong></a> is a standard way to describe a RESTful API so that documentation and client examples can be generated automatically. We think there's a need for some standards in this area and hope that this approach embraces Postel's law and avoids the <a href=""http://en.wikipedia.org/wiki/Robustness_principle"">tight-coupling and inflexibility</a> of standards like WSDL. A number of tools are now available to <a href=""https://github.com/wordnik/swagger-ui"">render documentation and client pages</a> from swagger-compliant descriptions.</p>"
"2014-07",Xamarin,Tools,Assess,"<p>Among the various choices available for building cross-platform mobile apps, <strong>Xamarin</strong> offers a fairly unique toolset. It supports C# and F# as the primary language with bindings to platform-specific SDKs and the Mono runtime environment that works across iOS, Android and Windows Phone. Applications are compiled to native code instead of the typical cross-platform approach that renders HTML-based UI in an embedded browser. This gives apps a more native look and feel. When using this toolset, it is imperative that the platform-specific UI tier be separated from the rest of the tiers to ensure code reuse across different platforms. The application binary tends to be a bit bigger due to the runtime environment that is included.</p>"
"2014-07",Ant,Tools,Hold,"<p>We continue to see teams expend significant effort on un-maintainable <strong>Ant</strong> and Nant build scripts. These are hard to understand and extend due to the inherent lack of expressiveness and clean modularity provided by the tools. Alternatives like Gradle, Buildr, and PSake have clearly demonstrated superior maintainability and productivity.</p>"
"2014-07",TFS,Tools,Hold,"<p>We continue to see teams run into productivity problems attempting to use <strong>TFS</strong> as a version control system. Teams that want to practice frequent code check-ins, a core part of continuous integration, have found its heavyweight approach significantly drains productivity. This often leads to teams checking in less frequently, causing more problematic merges. We recommend tools such as Git, Perforce, and Subversion instead.</p>"
"2015-01",Flyway,Tools,Adopt,"<p>With techniques such as continuous delivery becoming more mainstream, automated database migrations are a baseline capability for many software teams. While there are many tools in this space, we continue to recommend <strong>Flyway</strong> for its low-friction approach. Flyway has a vibrant open-source community behind it, and support for both traditional and cloud-based databases such as Amazon Redshift and Google Cloud SQL.</p>"
"2015-01",GoCD,Tools,Adopt,""
"2015-01",Appium,Tools,Trial,"<p>Mobile test automation is becoming increasingly important. <a href=""http://appium.io""><strong>Appium</strong></a> is a test automation framework that can test mobile web, mobile native and mobile hybrid applications on iOS and Android. We have used this in multiple projects and have seen significant gains. At the core, Appium is a webserver that exposes a REST API, receiving connections from a client, listening for commands, executing those commands on a mobile device and responding with an HTTP response representing the result of the command execution. It allows tests to be written against iOS and Android using the same API. Appium is open source with easy setup using npm.</p>"
"2015-01",Boot2docker,Tools,Trial,""
"2015-01",Composer,Tools,Trial,"<p>Although the idea of dependency management is not new and considered to be a fundamental development practice, it is not widely adopted by the PHP community. <a href=""https://getcomposer.org"">Composer</a> is a tool for dependency management in PHP. It is strongly influenced by tools from other technology stacks like Node's npm and Ruby's Bundler.</p>"
"2015-01",Cursive,Tools,Trial,""
"2015-01",Docker,Tools,Trial,"<p>Since our last radar, <a href=""https://www.docker.com/""><strong>Docker</strong></a> has hit 1.0 and has been declared production ready by the authors. During this same period we have seen an explosion of tools based on Docker. We now have PAAS solutions in the form of <a href=""http://deis.io/"">Deis</a>, cluster management in <a href=""https://coreos.com/using-coreos/clustering/"">CoreOS</a> and <a href=""https://github.com/googlecloudplatform/kubernetes"">Kubernetes</a>, and <a href=""http://msopentech.com/blog/2014/08/28/docker-containers-on-microsoft-azure-with-kubernetes-visualizer/"">Microsoft</a>, <a href=""https://cloud.google.com/compute/docs/containers"">Google</a>, <a href=""http://aws.amazon.com/blogs/aws/cloud-container-management/"">AWS</a> and a host of smaller players are offering or will shortly offer Docker hosting. Microsoft is even <a href=""http://www.zdnet.com/docker-container-support-coming-to-microsofts-next-windows-server-release-7000034708/"">looking to support Docker</a> in their next version of Windows Server. Aside from all this change, Docker is being used in anger now by many people, for dev & test and for production loads. We fully expect to see a large pace of change in the Docker ecosystem over the next year, and strongly suggest you take a look at what Docker could offer your own organisation.</p>"
"2015-01",Foreman,Tools,Trial,"<p>The big Cloud providers have clearly raised the bar for provisioning, monitoring, and configuration, simplifying these tasks dramatically through powerful tools. Organizations that want to keep their compute and storage resources in-house are looking for similar solutions that work within their organizational context. <a href=""http://theforeman.org/""><strong>Foreman</strong></a> has worked really well for us, and it is open-source software, too.</p>"
"2015-01",GenyMotion,Tools,Trial,"<p>Device fragmentation in the Android world is often cited as a problem because it can be difficult to understand how your applications will behave on a large number of disparate platforms. <a href=""http://genymotion.com""><strong>GenyMotion</strong></a> is an emulator which can mimic the characteristics of a number of different Android devices. Our teams have found this very effective in giving fast feedback for our Android applications.</p>"
"2015-01",Gitlab,Tools,Trial,""
"2015-01",Grunt.js,Tools,Trial,"<p><strong>Grunt</strong> is rapidly becoming the de facto JavaScript build tool with high adoption and a growing ecosystem. While slower than newer alternatives, such as Gulp, in terms of file processing, Grunt covers a broader set of build-related activities, has a proliferation of plugins and makes it easy to author and publish self-written plugins to npm.</p>"
"2015-01",IndexedDB,Tools,Trial,""
"2015-01",Packer,Tools,Trial,"<p>We featured 'Machine image as a build artifact' in the last Radar, as an excellent way to implement fast spin-up, immutable servers. The thing holding this technique back was the difficulty in building images, especially when targeting more than one platform. <a href=""http://packer.io""><strong>Packer</strong></a> solves this, using your configuration management tool of choice to create images for a number of platforms including AWS, Rackspace, DigitalOcean and even Docker and Vagrant, although we have found the VMWare support to be problematic.</p>"
"2015-01",Pact & Pacto,Tools,Trial,"<p>Consumer-Driven Contracts are a testing approach to help service interfaces evolve with confidence without unknowingly breaking consumers. The similarly named <a href=""https://github.com/realestate-com-au/pact""><strong>Pact</strong></a> and <a href=""http://thoughtworks.github.io/pacto""><strong>Pacto</strong></a> are two new open-source tools which allow testing interactions between service providers and consumers in isolation against a contract. Both have grown out of projects which are building RESTful microservices and show great promise.</p>"
"2015-01",Papertrail,Tools,Trial,"<p>In the previous radar, we mentioned the log aggregation service <strong>Papertrail</strong> as a way to collect and analyze logs from a variety of sources including web servers, routers, databases and PaaS services. Our subsequent experiences using it and the integrations from PaaS providers such as Heroku nudge it into something we would happily recommend as a convenient and expedient option, notwithstanding our concerns about widespread adoption of services that centralize large quantities of data aggregated from multiple parties.</p>"
"2015-01",Postman,Tools,Trial,"<p><a href=""http://www.getpostman.com/features"">Postman</a> is a Chrome extension that acts as a REST client in your browser, allowing you to create requests and inspect responses. It is a useful tool when developing an API or implementing a client to call an existing API. It offers a suite of extensions that allow you to use it as a full-blown test runner too, although we discourage the record and replay style of testing it promotes.</p>"
"2015-01",Focus on mean time to recovery,Techniques,Adopt,""
"2015-01",Forward Secrecy,Techniques,Adopt,"<p><strong>Forward Secrecy</strong> (sometimes known as 'Perfect Forward Secrecy' or PFS) is a cryptographic technique that protects previous communications sessions even if a server’s master keys are later compromised. Despite being simple to enable for HTTPS connections, many servers are not configured this way, and we recommend enabling forward secrecy to improve security. Note that we don't generally like the word 'perfect' when used to describe cryptographic protocols -- even the best protocol can be broken by a flaw in implementation, random number generator, or by advances in cryptanalytic techniques. Even so, it is important to enable the best security available, while keeping informed of new attacks and protocol improvements.</p>"
"2015-01",Structured logging,Techniques,Adopt,""
"2015-01",Canary builds,Techniques,Trial,""
"2015-01",Datensparsamkeit,Techniques,Trial,""
"2015-01",Front end instrumentation,Techniques,Trial,"<p>With the proliferation of complex JavaScript websites and applications, we are finding that browser-side issues such as slow network calls, poor render times, and JavaScript errors can have a big impact on user experience. Server-side monitoring clearly does not help in these scenarios and often these types of issues are being missed. <strong>Front end instrumentation</strong> extends the types of monitoring we are used to with server-side code to the browser, allowing for early warning of potential issues and far easier diagnosis should production issues occur.</p>"
"2015-01",Hipster batch,Techniques,Trial,"<p>There has been a lot of recent attention to the use of ATOM-style event feeds over HTTP as a method of integration. Instead of maintaining a live service to expose those feeds, it is often acceptable to use old-style scheduled batch processing to create and publish feed files. When combined with cloud technology like Amazon's S3 file storage and hypermedia linking, this can create a highly available, yet simple and testable solution. Our teams have started to call this old-meets-new approach ' <strong>Hipster batch</strong>'.</p>"
"2015-01",Humane registry,Techniques,Trial,"<p>A Microservice architecture by its very nature increases significantly the number of applications, services, and interactions in your deployed environments. Our projects are showing renewed focus on building <a href=""http://martinfowler.com/bliki/HumaneRegistry.html""><strong>Humane Registries</strong></a> which aggregate information about running services from the live environment and present it in a form for humans to comprehend. These registries favor up-to-date information from running services instead of human-curated documentation.</p>"
"2015-01",Inverse Conway Maneuver,Techniques,Trial,<p>Conway's Law asserts that organizations are constrained to produce application designs which are copies of their communication structures. This often leads to unintended friction points. The ' <strong>Inverse Conway Maneuver</strong>' recommends evolving your team and organizational structure to promote your desired architecture. Ideally your technology architecture will display isomorphism with your business architecture.</p>
"2015-01",Living CSS Style Guides,Techniques,Trial,"<p>A <strong>living CSS style guide</strong> is a page on your site that uses your current CSS styles and acts as a reference for all the currently available visual elements and design patterns. This helps to tightly integrate design into your delivery process by promoting co-ownership of the UI and avoids duplication of styling across your application. Styling changes are visible in the guide immediately and changes propagate across your site from a central location. A sensible way to do this is with a well organized SASS/LESS file structure with semantically named elements that separates structure, aesthetics, and interaction.</p>"
"2015-01",Local storage sync,Techniques,Trial,""
"2015-01",NoPSD,Techniques,Trial,""
"2015-01",Partition infrastructure along team bounds,Techniques,Trial,"<p>Many of our customers have made DevOps a reality in their organization with delivery teams that build, deploy, and support their own applications and services. Unfortunately, a regular roadblock on that journey is allowing teams to have superuser privileges in production environments. In most organizations, the production environment is shared, and therefore risky to provide access widely. It is effective when we can <strong>partition infrastructure along team bounds,</strong> so that those teams can have safe isolated access to do their work, without risking impact to other systems. Where cloud environments are used, this is much easier to implement, aligning account structures to team boundaries.</p>"
"2015-01",REST without PUT,Techniques,Trial,"<p>In the last radar we talked about Capturing Explicit Domain Events, putting emphasis on recording the business-meaningful events that have triggered state transitions instead of just CRUD'ing entities. REST interfaces commonly use PUT to update resource state, however it's often better to POST to record a new event resource which captures intent. <strong>REST without PUT</strong> has a side-benefit of separating command and query interfaces and forces consumers to allow for eventual consistency.</p>"
"2015-01",Static site generators,Techniques,Trial,"<p><strong>Static site generators</strong> like Middleman or Jekyll have become popular for creating simple websites or blogs, but we are increasingly seeing their use as part of more complex application stacks. The default assumption that all content delivered over HTTP has to be dynamically created on request is shifting, with more teams looking to use static pre-generated content.</p>"
"2015-01",Tailored Service Template,Techniques,Trial,"<p>We see multiple organizations creating a <strong>Tailored Service Template</strong> which can be used to quickly seed new services, pre-configured to operate within that organization's production environment. The template contains a default set of decisions such as web frameworks, logging, monitoring, build, packaging, and deployment approaches. This is a very useful technique for encouraging collaborative evolution while retaining lightweight governance.</p>"
"2015-01",Append-only data store,Techniques,Assess,""
"2015-01",Blockchain beyond bitcoin,Techniques,Assess,""
"2015-01",Enterprise Data Lake,Techniques,Assess,""
"2015-01",Machine image pipelines,Techniques,Assess,"<p>Many deployments requires machine images for different server roles like applications and services, databases, and reverse proxies. Because building a machine image from scratch, using an operating system ISO and provisioning scripts, can take a considerable amount of time it can be useful to create a <strong>build pipeline for machine images</strong>. The first stage in the pipeline sets up a base image according to general standards in the organization. Subsequent stages can then enhance the base image for different purposes. If several applications or services have similar requirements, an application server for example, the pipeline can be extended by an intermediate stage, which takes the base image and provides an image with an application server but no application/service. These pipelines are not linear, they are trees that are branching out from the base image.</p>"
"2015-01",Pace-layered Application Strategy,Techniques,Assess,"<p>Gartner's <strong>Pace-layered Application Strategy</strong> approach to architecture attempts to articulate the fact that decisions about architecture should not be a one-size fits all approach. Instead, it is important to take a balanced view of your technology portfolio. We have qualms about some of the prescriptive recommendations that come with Pace. In particular, we have found some situations where the layering concept is too simplistic. That said, we believe the core idea that different components and systems within an architecture need to change at different paces is sound.</p>"
"2015-01",Cloud lift and shift,Techniques,Hold,"<p>As cloud adoption grows we are unfortunately seeing a trend to treat the cloud as just another hosting provider. <strong>Cloud lift and shift</strong> is unfortunately being encouraged by large vendors re-branding existing hosting offerings as ""cloud."" Few of these offer any real flexibility or pay-as-you-use pricing. If you think you can move to the cloud without re-architecting, you are probably not doing it right.</p>"
"2015-01",Long lived branches with Gitflow,Techniques,Hold,""
"2015-01",Microservice envy,Techniques,Hold,""
"2015-01",Programming in your CI/CD tool,Techniques,Hold,""
"2015-01",SAFe™,Techniques,Hold,""
"2015-01",Terraform,Tools,Assess,"<p>With <strong>Terraform,</strong> cloud infrastructure can be managed by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to tools like Puppet, Chef, or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports multiple cloud providers while making no attempt to provide an artificial abstraction across these providers. At this stage, Terraform is new and not everything is implemented yet. We have also found its state management to be fragile, often needing awkward manual work to untangle.</p>"
"2015-01",Citrix for development,Tools,Hold,""
"2015-01",Security sandwich,Techniques,Hold,"<p>Traditional approaches to security have relied on up-front specification followed by validation at the end. This <strong>“Security Sandwich”</strong> approach is hard to integrate into Agile teams, since much of the design happens throughout the process, and it does not leverage the automation opportunities provided by continuous delivery. Organizations should look at how they can inject security practices throughout the agile development cycle. This includes: evaluating the right level of Threat Modeling to do up-front; when to classify security concerns as their own stories, acceptance criteria, or cross-cutting non-functional requirements; including automatic static and dynamic security testing into your build pipeline; and how to include deeper testing, such as penetration testing, into releases in a continuous delivery model. In much the same way that DevOps has recast how historically adversarial groups can work together, the same is happening for security and development professionals.</p>"
"2015-01",Separate DevOps team,Techniques,Hold,""
"2015-01",Testing as a separate organization,Techniques,Hold,"<p>We continue to see organizations create separate Development and QA teams. Fast feedback is a core tenet of Agile and critical to the success of a project. Using a separate QA team slows down this feedback, creates an ""us and them"" mentality and makes it more difficult to build quality into the software. Testing should be a tightly integrated activity and isn't something the team can outsource. We recommend integrated teams where testers work closely with developers instead of having <strong>testing as a separate organization.</strong></p>"
"2015-01",Velocity as productivity,Techniques,Hold,"<p>We continue to see teams and organizations equating velocity with productivity. When properly used, velocity allows the incorporation of ”yesterday's weather” into a team’s internal iteration planning process. The key here is that velocity is an internal measure for a team, it is just a capacity estimate for that given team at that given time. Organizations and managers who equate internal velocity with external productivity start to set targets for velocity, forgetting that what actually matters is working software in production. Treating <strong>velocity as productivity</strong> leads to unproductive team behaviors that optimize this metric at the expense of actual working software.</p>"
"2015-01",DigitalOcean,Platforms,Trial,""
"2015-01",iBeacon,Platforms,Trial,"<p><strong>iBeacons</strong> are the Apple implementation of the broader category of beacons, which are small devices that use low energy Bluetooth (BLE) to provide fine-grained proximity information for mobile phones and other devices. Despite the hype surrounding iBeacons and the limitations to the accuracy and reliability of the information they provide, we do feel that they open interesting opportunities as trigger points for interacting with your users in a contextually relevant manner.</p>"
"2015-01",Apache Mesos,Platforms,Assess,""
"2015-01",ARM Server SoC,Platforms,Assess,"<p>AMD recently released an <a href=""http://www.anandtech.com/show/7989/amd-announces-project-skybridge-pincompatible-arm-and-x86-socs-in-2015"">8-core <strong>ARM SoC</strong> (System on a Chip)</a> designed for servers and has committed to releasing an ARM SoC with integrated graphics in 2015. ARM-based servers are an interesting alternative to x86 because they are significantly more energy efficient. For some workloads, building an ARM-powered Cloud is preferable.</p>"
"2015-01",CoAP,Platforms,Assess,"<p><a href=""http://coap.technology/""><strong>CoAP</strong></a> is an open standards communication protocol for the Internet of Things (IoT). While there is currently a proliferation of competing standards in the IoT space, we particularly like CoAP. It is specifically designed for resource-constrained devices and local radio networks. It uses UDP for transport, but is semantically compatible with HTTP. CoAP uses a web-based model of devices with their own URLs and a request-response paradigm that supports RESTful and decentralized approaches.</p>"
"2015-01",CoreOS,Platforms,Assess,""
"2015-01",EventStore,Platforms,Assess,"<p>Given the popularity of event sourcing, it is no surprise that tools in this space are maturing. <a href=""http://geteventstore.com""><strong>EventStore</strong></a> is an open source functional database for storing immutable events and performing complex event processing on the event streams. Unlike other tools in this space, EventStore exposes event streams as Atom collections which therefore require no special infrastructure such as message buses or highly specialized clients to use.</p>"
"2015-01",Jackrabbit Oak,Platforms,Assess,""
"2015-01",Linux security modules,Platforms,Assess,""
"2015-01",Mapbox,Platforms,Assess,"<p><a href=""http://mapbox.com""><strong>Mapbox</strong></a> is an open mapping platform we have used on several projects. It allows a developer to quickly add a map to an application and to style the map. Mapbox can serve as an alternative to conventional mapping platforms, and it also allows for mobile friendly maps.</p>"
"2015-01",MariaDB,Platforms,Assess,""
"2015-01",Netflix OSS Full stack,Platforms,Assess,""
"2015-01",OpenAM,Platforms,Assess,"<p>When Oracle ceased development on Sun’s OpenSSO—an open source access management platform—It was picked up by ForgeRock and integrated into their Open Identity Suite. Now named <strong><a href=""http://forgerock.com/products/open-identity-stack/openam/"">OpenAM</a></strong>, it fills the niche for a scalable, open-source platform that supports a variety of federated identity standards, including OpenID Connect and SAML 2.0. These standards are a necessary enabler for secure microservice implementations.</p>"
"2015-01",OpenID Connect,Platforms,Assess,"<p><strong>OpenID Connect</strong> is a standard protocol for federated identity built on OAuth 2.0. It addresses a long-standing need for a simple, web-based protocol to exchange trusted authentication and authorization information. Previous standards like SAML or generic OAuth 2.0 have proven too broad and complex to ensure universal compatibility. Our hope is that OpenID Connect can provide a useful basis for secure access to RESTful microservices with authenticated end-user identity.</p>"
"2015-01",SDN,Platforms,Assess,""
"2015-01",Text it as a service / Rapidpro.io,Platforms,Assess,""
"2015-01",Go language,languages-and-frameworks,Adopt,"<p>The <a href=""https://golang.org/""><strong>Go language</strong></a> gradually changed status from ""Just Another Language"" to a valuable tool in many projects. While steadfastly single paradigm in a world of increasingly complex languages, it seems to keep a nice balance between expressiveness, power, and simplicity.</p>"
"2015-05",Jackrabbit Oak,Platforms,Assess,"<p><a href=""http://jackrabbit.apache.org/oak/"">Jackrabbit Oak</a>, formerly named Jackrabbit 3, is a scalable and performant implementation of hierarchical content repository for use as the foundation of content management system. In addition to file based storage solution, MongoDB and RDMS storage are also supported, and preferred in large volume use scenarios. Although implemented in Java, it can be easily accessed from various platforms via standards like JCR.</p>"
"2015-01",TOTP Two-Factor Authentication,Platforms,Assess,"<p><strong>Two-factor authentication</strong> significantly improves security over simple password-based systems. <a href=""http://tools.ietf.org/html/rfc6238"">RFC 6238</a> -- <a href=""http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm"">Time-based One-Time Password</a> Algorithm -- is a standard for two-factor authentication. 'Standard' authenticator apps from <a href=""https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2"">Google</a> and <a href=""http://www.windowsphone.com/en-us/store/app/authenticator/e7994dbc-2336-4950-91ba-ca22d653759b"">Microsoft</a> provide tokens to smartphone users, and there are a number of other client and server implementations readily available. With providers such as Google, Facebook, Dropbox and Evernote using <strong>TOTP</strong> , there really is no excuse to continue using simple password-based authentication where stronger security would be appropriate.</p>"
"2015-01",U2F,Platforms,Assess,""
"2015-01",CMS as a platform,Platforms,Hold,"<p>In previous editions of the radar, we have written about the pitfalls of trying to use a <strong>CMS as a platform</strong> and we continue to see this problematic approach “in the wild.” CMS as an editing, collaboration and workflow platform can work well, and we certainly do not discount these features. We have had success using <a href=""http://martinfowler.com/articles/two-stack-cms/"">Two Stack CMS</a>, an approach that <a href=""http://martinfowler.com/bliki/EditingPublishingSeparation.html"">separates the concerns of <em>editing</em> and <em>publishing</em></a> content.</p>"
"2015-01",OSGi,Platforms,Hold,""
"2015-01",SnapCI,Tools,Trial,"<p>We mentioned ThoughtWorks' <strong>SnapCI</strong> -- a hosted service that provides deployment pipelines -- on the last edition of the Radar. Since then, we have seen many teams successfully use SnapCI on their projects. If you need a simple continuous delivery solution in the cloud, SnapCI can provide it with one click. No hardware, no hassle.</p>"
"2015-01",Snowplow Analytics & Piwik,Tools,Trial,"<p>With increasing scrutiny over the privacy of data, more companies are concerned about sharing web analytics with third parties. <strong>Snowplow Analytics and Piwik</strong> are examples of open-source analytics platforms that can be self-hosted and provide a promising feature set and roadmap.</p>"
"2015-01",Swagger,Tools,Trial,""
"2015-01",Xamarin,Tools,Trial,""
"2015-01",Blackbox,Tools,Assess,"<p><a href=""https://github.com/StackExchange/blackbox""><strong>Blackbox</strong></a> is a simple tool for encrypting specific files while at rest in your source repository. This is particularly useful if you need to store passwords or private keys. Blackbox works with Git, Mercurial and Subversion and uses GPG for the encryption. Each user has their own key, which makes it easy to revoke access on a granular level.</p>"
"2015-01",Consul,Tools,Assess,"<p><a href=""http://consul.io""><strong>Consul</strong></a> makes it simple for services to register themselves and discover other services via DNS or HTTP. It scales automatically, with service look up locally or across data centers. Consul also provides a flexible key/value store for dynamic configuration, with notification of configuration changes. The internal gossip protocol used by Consul is powered by the <a href=""http://serfdom.io"">Serf</a> library, leveraging and building upon the membership and failure detection features.</p>"
"2015-01",Dc.js,Tools,Assess,"<p>We have recommended D3.js before and in this radar we want to extend our recommendation to <a href=""http://dc-js.github.io/dc.js/""><strong>Dc.js</strong></a>, a charting library based on D3 for exploring large multi-dimensional datasets. With D3, it shares the ease with which beautiful interactive graphs can be created. It is different in that it trades the flexibility to create almost any kind of data visualization for a simpler programming model to create common chart types.</p>"
"2015-01",Gorilla REPL,Tools,Assess,"<p><strong><a href=""http://gorilla-repl.org/"">GorillaREPL</a></strong> is a tool for creating nicely-rendered documents consisting of text, live Clojure code, and plots. In some ways similar to iPython notebooks, GorillaREPL should be particularly useful for data analysts or code tutorials. But beyond that, GorillaREPL is fun!. It is a creative way to demonstrate the power of Clojure’s simple abstractions over immutable values.</p>"
"2015-01",Gulp,Tools,Assess,"<p>In the last radar we called out <strong>Gulp</strong> as a strong competitor to Grunt, with a clean API and fast builds thanks to its streaming approach. While we still like it as a tool, we are moving it out from trial back to assess since Grunt has both a broader usage model and better industry adoption and tooling. We do see some teams successfully using Gulp inside Grunt, when the speed of intermediate result caching is required, but we are not recommending it as the default JavaScript build tool.</p>"
"2015-01",leaflet.js,Tools,Assess,"<p><a href=""http://leafletjs.com""><strong>Leaflet.js</strong></a> is a JavaScript library for mobile-friendly interactive maps. The library places a huge emphasis on performance, usability and simplicity, and as such works efficiently across mobile platforms and desktop browsers. It is a viable library to consider when building interactive maps for mobiles.</p>"
"2015-01",Mountebank,Tools,Assess,"<p>When testing services, we commonly need to stub out downstream collaborating services. Written by a ThoughtWorker, <a href=""http://www.mbtest.org""><strong>Mountebank</strong></a> is a lightweight service which you can configure via HTTP that is capable of stubbing and mocking HTTP, HTTPS, SMTP and TCP.</p>"
"2015-01",Packet beat,Tools,Assess,""
"2015-01",Roslyn,Tools,Assess,"<p><strong>Roslyn</strong> , a .NET compiler platform under the Apache License 2.0, is a next-generation set of compilers for C# and VB.NET written entirely as managed code. It provides access to the compiler as a service and includes code analysis APIs allowing developers to access information from the compiler that was previously treated as a black box, for example syntactic and semantic models. The most immediate impact should be seen in enhancements to .NET IDEs through refactoring and code generation tools. We also expect to see improved code diagnostics and static analysis, although it will be interesting to see what the community comes up with. Meanwhile Xamarin has a Mono-compatible copy of Roslyn source code hosted on GitHub and plans to bundle Roslyn’s compilers with Mono as it stabilizes, in addition to integrating the best parts into their code base.</p>"
"2015-01",Spark,Tools,Assess,"<p>For iterative processing such as machine learning and interactive analysis, Hadoop map-reduce does not work very well because of its batch-oriented nature. <strong>Spark</strong> is a fast and general engine for large-scale data processing. It aims to extend map-reduce for iterative algorithms and interactive low latency data mining. It also ships with a machine learning library.</p>"
"2015-05",Linux security modules,Platforms,Assess,""
"2015-01",Java 8,languages-and-frameworks,Adopt,"<p>The team behind <strong>Java 8</strong> had to fight two battles: the community forces encouraging forever backwards compatibility (a long hallmark of Java) and the technical challenge of making a deep language change mesh with existing libraries and features. They succeeded on both fronts, breathing new life into the Java Language and placing it on par with other mainstream languages in terms of functional programming features. In particular, Java 8 has excellent syntactic magic that allows seamless interoperability between Lambda blocks, the new higher-order function feature, and SAM (Single Abstract Method) interfaces, the traditional way of passing behavior.</p>"
"2015-01",AngularJS,languages-and-frameworks,Trial,"<p>We continue to see JavaScript frameworks as a useful way to structure code and bring better coding techniques to JavaScript. <strong>AngularJS</strong> is used widely by ThoughtWorks projects. However, we are a bit concerned about the future of the framework. The 2.0 version currently under development represents a ground-up redesign that some might not be happy with. Without an evolutionary migration path, maintainers of existing AngularJS applications will be forced to either live with an unsupported version or undertake a large rewrite. We advise teams to first assess their requirements to understand if a single-page JavaScript application is really necessary. In many cases, a traditional page-model app is simpler to write and easier to maintain. Remember that there are other good alternatives to AngularJS, such as Ember.js, Knockout.js, and React.js.</p>"
"2015-01",Core Async,languages-and-frameworks,Trial,"<p>The Clojure <strong>core.async</strong> library allows asynchronous communication using channels, with similar syntax and capabilities to Google's Go language. The core.async library solves many common problems in an elegant way, cleaning up event callback setup and adding simple concurrency primitives. It also highlights one of the advantages of the Lisp nature of Clojure: channels add operators that are consistent with existing Clojure operators, seamlessly weaving new functionality into the language core. In addition, core.async is supported in both Clojure and ClojureScript (despite JavaScript's lack of threads), utilizing underlying platform abstractions to provide a consistent interface to both languages.</p>"
"2015-01",Dashing,languages-and-frameworks,Trial,""
"2015-01",Django Rest,languages-and-frameworks,Trial,""
"2015-01",HAL,languages-and-frameworks,Trial,"<p>We see lots of teams creating RESTful interfaces without paying any attention to hypermedia. <a href=""http://stateless.co/hal_specification.html""><strong>HAL</strong></a> is a simple format for incorporating hyperlinks into JSON representations which is easy to implement and consume. HAL is well supported by libraries for parsing and representing JSON, and there are HAL-aware REST client libraries such as <a href=""https://github.com/codegram/hyperclient"">Hyperclient</a> which make it easy to navigate resources by following links.</p>"
"2015-01",Ionic Framework,languages-and-frameworks,Trial,""
"2015-01",Nashorn,languages-and-frameworks,Trial,""
"2015-01",Om,languages-and-frameworks,Trial,""
"2015-01",Q & Bluebird,languages-and-frameworks,Trial,"<p><a href=""https://github.com/kriskowal/q""><strong>Q</strong></a> is a fully Promises/A+ compliant implementation in JavaScript that lets users compose promises arbitrarily deeply without the need for the deeply nested callbacks that obscure control flow. Q takes care of threading fulfilled values and rejected promises through the appropriate code paths. The space of Promises/A+ compliant libraries is currently very active with alternatives like <a href=""https://github.com/petkaantonov/bluebird""><strong>Bluebird</strong></a> also rapidly gaining mindshare.</p>"
"2015-01",R as Compute Platform,languages-and-frameworks,Trial,"<p>R is traditionally used as stand alone analysis tool by research teams. With improvements in packages like Rook and RJSONIO, it has become trivial to wrap the computational logic and expose it as an API. ThoughtWorks teams are using <strong>R as Compute platform</strong> to crunch large datasets in real time, using in-memory storage integrated with enterprise systems.</p>"
"2015-01",Retrofit,languages-and-frameworks,Trial,""
"2015-01",Flight.js,languages-and-frameworks,Assess,"<p>In the crowded space of JavaScript frameworks, we want to highlight <a href=""https://flightjs.github.io/""><strong>Flight.js</strong></a> as an alternative to consider. Flight is extremely lightweight and gets by without much magic when adding behavior to DOM nodes. Its event-driven and component-based nature promotes writing decoupled code. This makes testing individual components comparatively easy. Care must be taken, however, when components need to interact with each other. There is little support for testing and a real danger to get into <em>event hell</em>. We do like that it uses functional mixins for behaviour, like composition instead of inheritance.</p>"
"2015-01",Haskell Hadoop library,languages-and-frameworks,Assess,""
"2015-01",Lotus,languages-and-frameworks,Assess,""
"2015-01",React.js,languages-and-frameworks,Assess,"<p>One benefit to the ongoing avalanche of front-end JavaScript frameworks is that occasionally, a new idea crops up that makes us think. <strong>React.js</strong> is a UI/View framework in which JavaScript functions generate HTML in a reactive data flow. Although we are wary of mixing code and markup, it results in UI components that are nicely encapsulated and composable. React.js is getting a lot of developer attention and will benefit from more tools and examples ** ** becoming available.</p>"
"2015-01",Reagent,languages-and-frameworks,Assess,""
"2015-01",Rust,languages-and-frameworks,Assess,"<p><a href=""http://www.rust-lang.org/""><strong>Rust</strong></a> is a system programming language with modern affordances. It features a rich typing system, safe memory model and task-based concurrency. Compared to the Go language, Rust is more friendly to people who would like to write code in a functional style.</p>"
"2015-01",Spring Boot,languages-and-frameworks,Assess,"<p><a href=""http://projects.spring.io/spring-boot""><strong>Spring boot</strong></a> allows easy set up of standalone Spring-based applications. It's ideal for pulling up new microservices and easy to deploy. It also makes data access less of a pain due to the hibernate mappings with much less boilerplate code.</p>"
"2015-01",Swift,languages-and-frameworks,Assess,"<p><a href=""http://www.apple.com/swift/"">Swift,</a> Apple’s new development language, contains many improvements over the perennial Objective-C, including emphasis on functional programming and modern syntax. In most ways, this is an upgrade if you are coding on the Apple platform.</p>"
"2015-01",JSF,languages-and-frameworks,Hold,""
"2015-05",Composer,Tools,Adopt,""
"2015-05",GoCD,Tools,Adopt,"<p>Continuously delivering high quality software to production in a rapid and reliable manner requires coordinating many automated steps. <a href=""http://go.cd""><strong>GoCD</strong></a> is an open-source tool built by ThoughtWorks to handle exactly this scenario, with the concept of deployment pipelines at its core, it handles complex workflows over many nodes and enables transparent, traceable promotion of trusted artifacts across environments. While it is possible to craft deployment pipelines on top of continuous integration tools, our teams see the benefit derived from a tool purpose built for this job.</p>"
"2015-05",Mountebank,Tools,Adopt,""
"2015-05",Postman,Tools,Adopt,""
"2015-05",Boot2docker,Tools,Trial,"<p><strong>Boot2docker</strong> is a lightweight linux distribution running Docker, packaged as a VM for OSX and Windows. This is a great way to get started experimenting with Docker. For teams using microservices, it can also be an effective way to run multiple services on a local machine for dev and test purposes, where the overhead of multiple vagrant VMs may be too much.</p>"
"2015-05",Brighter,Tools,Trial,"<p><a href=""http://iancooper.github.io/Paramore/Brighter.html""><strong>Brighter</strong></a> is an open source library for .Net that provides scaffolding to implement Command Invocation. We have had good feedback from teams using it, especially in conjunction with the ports and adaptors pattern and <strong>CQRS</strong>. They especially like that it integrates well with <strong>Polly</strong> to provide circuit breaking functionality.</p>"
"2015-05",Consul,Tools,Trial,""
"2015-05",Cursive,Tools,Trial,"<p><a href=""https://cursiveclojure.com/"">Cursive</a> is a Clojure IDE that works as a plugin for IntelliJ. While still in early access, we have found it very useful when working with larger Clojure codebases. Cursive provides strong renaming and navigation support, has shown itself to be stable and reliable, and is great for environments with mixed JVM languages. For organizations adopting Clojure, Cursive has helped lower the barrier to entry for existing developers.</p>"
"2015-05",GitLab,Tools,Trial,"<p><strong>GitLab</strong> is an on-premise Git repository hosting platform that gives proprietary software development teams the familiar and ubiquitous workflow that hosted version control services like GitHub and BitBucket provide OSS developers. While it is available as free community edition software, the commercial enterprise option provides support and deep integration with LDAP servers.</p>"
"2015-05",Hamms,Tools,Trial,""
"2015-05",IndexedDB,Tools,Trial,""
"2015-05",Polly,Tools,Trial,"<p>Several of our teams working on .Net projects have recommended <a href=""https://github.com/michael-wolfenden/Polly""><strong>Polly</strong></a> as being useful when building microservice based systems. It encourages the fluent expression of transient exception handling policies and the circuit breaker pattern including policies such as Retry, Retry Forever and Wait and Retry. Libraries already exist in other languages, Hystrix for Java for example, and Polly is a welcome addition from the .Net community.</p>"
"2015-05",REST-assured,Tools,Trial,""
"2015-05",Swagger,Tools,Trial,"<p><strong><a href=""https://helloreverb.com/developers/swagger"">Swagger</a></strong><a href=""https://helloreverb.com/developers/swagger""><strong>2.0</strong></a> is a standard way to describe a RESTful API so that human-readable documentation and client examples can be generated automatically. The update to version 2.0 provides some significant flexibility enhancements and the list of tools for generating documentation continues to expand. There are also several alternatives to Swagger emerging from the vendor community, most significantly <a href=""http://raml.org/"">RAML</a> and <a href=""http://apiblueprint.org/"">API Blueprint</a>.</p>"
"2015-05",Xamarin,Tools,Trial,"<p>We are excited by the progress made by <strong>Xamarin</strong> in offering a solid choice for building cross-platform mobile apps. It supports C# and F# as the primary languages with bindings to platform specific SDKs and the Mono runtime environment that works across iOS, Android and Windows Phone. Applications are compiled to native code giving apps a more native look and feel. When using this toolset, it is imperative that the platform specific UI tier be separated from the rest of the tiers to ensure code reuse across different platforms. The recent open-sourcing of the .NET platform should be beneficial for <strong>Xamarin</strong> both in allowing access to a broader set of .NET tooling and also making development easier on other operating systems.</p>"
"2015-05",ZAP,Tools,Trial,""
"2015-05",Apache Kafka,Tools,Assess,""
"2015-05",Blackbox,Tools,Assess,"<p><a href=""https://github.com/StackExchange/blackbox""><strong>Blackbox</strong></a> is a simple tool for encrypting specific files while at rest in your source repository. This is particularly useful if you need to store passwords or private keys. Blackbox works with Git, Mercurial and Subversion and uses GPG for the encryption. Each user has their own key, which makes it easy to revoke access on a granular level. There is a lot happening in this space and a few other players to consider including <strong>git-crypt</strong> and <strong>Trousseau</strong>.</p>"
"2015-05",Bokeh/Vega,Tools,Assess,"<p>In the world of data science and analytics, much of the work is done using Python and R, languages which sadly offer few options for web-accessible plotting of visualizations. One approach is to convert the result of analysis into something that can be easily visualized and interacted with in the browser. We’re aware of two tools that are an attempt to do this. <a href=""http://bokeh.pydata.org/""><strong>Bokeh</strong></a> is a Python and JavaScript library that allows you to create interactive visualizations “in the style of D3.js” but with high performance over large or streaming data sets. <a href=""http://trifacta.github.io/vega/""><strong>Vega</strong></a> is a declarative visualization grammar for D3 that consumes server-generated JSON datasets and translates visualization descriptions into D3.js code.</p>"
"2015-05",Gor,Tools,Assess,""
"2015-05",NaCl,Tools,Assess,"<p>The <a href=""http://nacl.cr.yp.to/""><strong>NaCl</strong></a> library (pronounced 'Salt') provides a set of features for encryption, decryption, and signatures designed to make it easier to implement secure network communication or other cryptography requirements. Although these functions exist in other libraries, NaCl promises higher speed and easier to use APIs. Current support is for C and C++ with Python wrappers in progress.</p>"
"2015-05",Origami,Tools,Assess,"<p><strong><a href=""https://facebook.github.io/origami/"">Origami</a></strong> is a free tool for designing user prototypes with a variety of keyboard shortcuts for common functions. It provides the possibility of exporting the prototypes as code snippets to Objective-C for iOS, Java for Android and JavaScript for Web. This tool can be used to rapidly build interactive user facing prototypes and testing user flows. We recommend investigating this tool if the use case fits from the experience we have gathered from several of our teams.</p>"
"2015-05",Packetbeat,Tools,Assess,"<p>As distributed systems become more complex, it can be useful to have tools that help you understand how your system is behaving in production. <a href=""http://packetbeat.com/"">Packetbeat</a> is an open source tool which uses agents to sniff traffic between nodes, allowing you to see traffic patterns, error rates and other useful information. It requires <a href=""http://www.elasticsearch.org/overview/elasticsearch/"">Elasticsearch</a> and <a href=""http://www.elasticsearch.org/overview/kibana/"">Kibana</a> to work, but if you are already using these tools as part of log aggregation, it could be an easy drop-in to give you more insight into your production system.</p>"
"2015-05",pdfmake,Tools,Assess,"<p><strong><a href=""https://github.com/bpampuch/pdfmake"">pdfmake</a></strong> is a JavaScript library which allows for creation and printing of PDF documents directly in the browser. To use pdfmake you construct a document object that supports structural elements such as tables, columns, and rich styling, then helper methods can create and print or download a PDF without leaving client-side JavaScript.</p>"
"2015-05",PlantUML,Tools,Assess,"<p>Developing a software system by first creating a large number of detailed diagrams is an approach that, in our experience, does not compare favourably to the alternatives. However, describing a particularly complex and intricate part of the system with a diagram is usually a good idea, and the UML itself offers a number of useful and commonly understood diagrams. We like <a href=""http://plantuml.sourceforge.net/""><strong>PlantUML</strong></a>for creating these diagrams because it allows expressing the intent behind the diagrams in a clear textual form, without having to fiddle with overloaded graphical tools. Having a textual form also allows versioning and storage alongside the source code.</p>"
"2015-05",Prometheus,Tools,Assess,"<p>SoundCloud have recently open sourced a Graphite replacement, <a href=""http://prometheus.io/""><strong>Prometheus</strong></a>. Developed as a reaction to difficulties with <strong>Graphite</strong> in their production systems, Prometheus works differently to Graphite, by primarily supporting a pull-based HTTP model (although a more Graphite-like push model is also supported). It also goes beyond Graphite by being built to support alerting based on captured metrics, so it becomes a much more active part of your operational toolset. Some caution should be used in adopting new technology in the production monitoring space, but early reports are that SoundCloud are happy using it in production, and Docker are also contributing to ongoing development.</p>"
"2015-05",Quick,Tools,Assess,""
"2015-05",Security Monkey,Tools,Assess,""
"2015-05",Citrix for development,Tools,Hold,"<p>For security and compliance reasons, offshore teams are sometimes asked to use <strong>Citrix</strong> to connect to an onshore virtual desktop, where they do <strong>development</strong>. While a good tool for some use cases, Citrix provides an extremely poor remote development experience and often cripples an offshore team. There are many better technical solutions, such as the NoMachine remote desktop or Cloud9 IDE, which can provide a more workable experience. An even better solution is to tackle the underlying security and compliance concerns. Since you are trusting the remote team to work on your source code and check in to your code repository, you should try to get to a point where you also trust them to have source code on their machines. They will be much more productive!</p>"
"2015-05",Consumer-driven contract testing,Techniques,Adopt,""
"2015-05",Focus on mean time to recovery,Techniques,Adopt,"<p>Traditionally operations groups look to improve the mean time between failures. While avoiding failures is obviously still important, lessons from cloud computing have taught us to expect failure and instead to <strong>focus on mean time to recovery</strong>. Continuous Delivery automation makes rolling out rapid fixes easier and we are also seeing a growth in monitoring techniques to spot failures quickly through a ‘production immune system’. Teams are also successfully using semantic monitoring and synthetic transactions to exercise production systems in non-destructive ways. This combined focus allows teams to move rapidly with higher confidence, it can also reduce the emphasis on expensive test-execution in pre-production environments and is particularly important in responding to the ever-growing list of security vulnerabilities that are being discovered.</p>"
"2015-05",Generated infrastructure diagrams,Techniques,Adopt,""
"2015-05",Structured logging,Techniques,Adopt,"<p>Treating logs as data gives us greater insight into the operational activity of the systems we build. <strong>Structured logging</strong> , which is using a consistent, predetermined message format containing semantic information, builds on this technique and enables tools such as Graylog2 and Splunk to yield deeper insights. We recommend adopting structured logging because the benefits outweigh the minimal effort involved and the practice is becoming the default standard.</p>"
"2015-05",Canary builds,Techniques,Trial,"<p>Many projects have external code dependencies, a large amount of which is provided by open source projects. In order to ensure our builds are reproducible, we integrate against known versions of them, but that can mean that it takes a while for us to integrate against newer versions of these libraries leading to a larger merge effort down the line. One approach we have seen to avoid this is to have a nightly <strong>Canary Build</strong> which tries to pull in the latest version of all dependencies. If the build is green, we know we can change which versions we depend on.</p>"
"2015-05",Datensparsamkeit,Techniques,Trial,"<p>The term <a href=""http://martinfowler.com/bliki/Datensparsamkeit.html""><strong>Datensparsamkeit</strong></a> is taken from German privacy legislation and describes the idea to only store as much personal information as is absolutely required for the business or applicable laws. Customer privacy continues to be a hot topic. Companies such as <a href=""http://www.washingtonpost.com/blogs/the-switch/wp/2014/12/01/is-ubers-rider-database-a-sitting-duck-for-hackers/"">Uber are apparently collecting highly personal customer data, as well as being quite lax with security.</a> This is a disaster waiting to happen. Following datensparsamkeit or using <a href=""https://en.wikipedia.org/wiki/De-identification"">de-identification</a> techniques even in jurisdictions where it is not legally mandated, can allow you to reduce the information you store. If you never store the information, you do not need to worry about someone stealing it.</p>"
"2015-05",Local storage sync,Techniques,Trial,"<p>When implementing single-page applications, sooner or later the question of offline use will come up. Given how hard it is to get this right when retrofitting an offline mode into an existing application, there is a trend towards implementing single-page applications with an “offline-first” mindset. An important implementation technique that we have used successfully is <strong>local storage sync</strong>. With this technique, the user facing code never makes requests to the backend. It retrieves data solely from local storage. A background worker synchronises the data in local storage with the backend systems, usually employing calls to some form of REST API.</p>"
"2015-05",NoPSD,Techniques,Trial,"<p><a href=""https://www.thoughtworks.com/p2magazine/issue02/continuous-design/""><strong>NoPSD</strong></a> is a movement to integrate design activities into the iterative feedback cycles required to build great software. The name aims to dislodge the PSD as the final canonical design artifact rather than taking a dig at the Adobe software. Instead of signing off on a pixel-perfect design specification at the start of a project, teams are urged to embrace Continuous Design: embedding designers into delivery teams, using lo-fi techniques for prototyping, and collaborating to refine the design in the target UI technology (normally HTML and CSS). This approach speeds responding to real user feedback, allows testing designs across multiple devices and form-factors, and embraces the dynamic nature of both digital products and the product creation process.</p>"
"2015-05",Offline first web applications,Techniques,Trial,""
"2015-05",Products over projects,Techniques,Trial,"<p>Most software development efforts are done using the mental model of a project, something that is planned, executed, and delivered within defined time-slots. Agile development challenged much of this model, replacing an up-front determination of requirements with an on-going discovery process that runs concurrently with development. Lean startup techniques, such as A/B testing of <a href=""http://martinfowler.com/bliki/ObservedRequirement.html"">observed requirements</a>, further erode this mindset. We consider that most software efforts should follow the lead of <a href=""https://info.thoughtworks.com/lean-enterprise-book.html"">Lean Enterprise</a> and consider themselves to be building products that support underlying business processes. Such products do not have a final delivery, rather an on-going process of exploring how best to support and optimize that business process which continues as long as the business is worthwhile. For these reasons we encourage organizations to think in terms of <strong>products rather than projects</strong>.</p>"
"2015-05",Threat Modeling,Techniques,Trial,"<p>At this point the vast majority of development teams are aware of the importance of writing secure software and dealing with their users’ data in a responsible way. They do face a steep learning curve and a vast number of potential threats, ranging from organized crime and government spying to teenagers who attack systems 'for the lulz'. <a href=""https://www.owasp.org/index.php/Category:Threat_Modeling""><strong>Threat Modeling</strong></a>is a set of techniques, mostly from a defensive perspective, that help understand and classify potential threats. When turned into 'evil user stories' this can give a team a manageable and effective approach to making their systems more secure.</p>"
"2015-05",Append-only data store,Techniques,Assess,"<p>Immutable data structures are becoming more popular with functional languages such as Clojure providing immutability by default. Immutability allows code to be more easily written, read, and reasoned about. Using an <strong>append-only data store</strong> can confer some of these benefits in the database layer, as well as making audit and historical querying simple. Implementation options vary, from specific append-only data stores such as <a href=""http://www.datomic.com/"">Datomic</a> to simply using an “append-don’t-update” approach with a traditional database.</p>"
"2015-05",Blockchain beyond bitcoin,Techniques,Assess,"<p>While the currency aspect of Bitcoin and other cryptocurrencies gets most of the news, we are equally excited about possibilities for using the <strong>Blockchain beyond bitcoin</strong> and financial transactions. The Blockchain is a mechanism for verifying the contents of a shared ledger without relying on a centralized service. We already see the Blockchain (either the underlying technology or the public Bitcoin Blockchain) being used at the heart of systems as varied as identity, ownership, record-keeping, voting, cloud storage and even managing networks of smart devices. If you are building systems that require trust over decentralized networks, then the Blockchain is a technology worth assessing.</p>"
"2015-05",Enterprise Data Lake,Techniques,Assess,"<p>An <strong>Enterprise Data Lake</strong> is an immutable data store of largely un-processed “raw” data, acting as a source for other processing streams but also made directly available to a significant number of internal, technical consumers using some efficient processing engine. Examples include HDFS or HBase within a Hadoop, Spark or Storm processing framework. We can contrast this with a typical system that collects raw data into some highly restricted space that is only made available to these consumers as the end result of a highly controlled ETL process.</p><p>Embracing the concept of the data lake is about eliminating bottlenecks due to lack of ETL developer staffing or excessive up front data model design. It is about empowering developers to create their own data processing pipelines in an agile fashion when they need it and how they need it—within reasonable limits—and so has much in common with another model that we think highly of, the DevOps model.</p>"
"2015-05",Flux,Techniques,Assess,"<p><a href=""https://facebook.github.io/flux/""><strong>Flux</strong></a> is an application architecture that Facebook has adopted for its web application development. Usually mentioned in conjunction with <strong>react.js</strong> , Flux is based on a one-way flow of data up through the rendering pipeline triggered by users or other external events modifying data stores. It’s been a while since we’ve seen any alternatives to the venerable model-view-* architectures and Flux embraces the modern web landscape of client-side JavaScript applications talking to multiple back-end services.</p>"
"2015-05",Git based CMS/Git for non-code,Techniques,Assess,"<p>These days, most software developers are used to working with Git for source code control and collaboration. But Git can be used as a base mechanism for other circumstances where a group of people need to collaborate on textual documents (that can easily be merged). We’ve seen increasing amounts of projects use <a href=""http://git-scm.com/""><strong>Git</strong></a> as the basis for a lightweight <strong>CMS</strong> , with text-based editing formats. Git has powerful features for tracking changes and exploring alternatives, with a distributed storage model that is fast in use and tolerant of networking issues. The biggest problem with wider adoption is that Git isn’t very easy to learn for non-programmers, but we expect to see more tools that build on top of the core Git plumbing. Such tools simplify the workflow for specific audiences, such as content authors. We would also welcome more tools to support diffing and merging for non-textual documents.</p>"
"2015-05",H2O,Platforms,Assess,"<p>Predictive analytics are used in more and more products, often directly in end-user facing functionality. <a href=""http://docs.0xdata.com/""><strong>H2O</strong></a> is an interesting new open source package (with a startup behind it) that makes predictive analytics accessible to project teams due to its easy-to-use user interface. At the same time it integrates with the data scientists’ favourite tools, R and Python, as well as Hadoop and Spark. It offers great performance and, in our experience, easy integration at runtime, especially on JVM-based platforms.</p>"
"2015-05",Phoenix Environments,Techniques,Assess,"<p>The idea of <a href=""http://martinfowler.com/bliki/PhoenixServer.html"">phoenix servers</a> is now well established and has brought many benefits when applied to the right kinds of problems, but what about the environment we deploy these servers into? The concept of <strong>Phoenix Environments</strong> can help. We can use automation to allow us to create whole environments, including network configuration, load balancing and firewall ports, for example by using <strong>CloudFormation</strong> in AWS. We can then prove that the process works, by tearing the environments down and recreating them from scratch on a regular basis. Phoenix Environments can support provisioning new environments for testing, development, UAT and so on. They can also simplify the provision of a disaster recovery environment. As with Phoenix Servers this pattern is not always applicable and we need to think about carefully about things like state and dependencies. Treating the whole environment as a <a href=""http://martinfowler.com/bliki/BlueGreenDeployment.html"">green/blue deployment</a> can be one approach when environment reconfiguration needs to be done.</p>"
"2015-05",Reactive Architectures,Techniques,Assess,""
"2015-05",Long lived branches with Gitflow,Techniques,Hold,"<p><strong>Gitflow</strong> is a strict branching pattern for releases using Git. Although not an inherently bad pattern, we often see it misused. If the feature and develop branches are short lived and merged often, you are really using the power of Git, which makes these activities easy. However, a problem we often see is that these become <strong>long lived branches</strong> , which results in the dreaded merge conflicts many people began using Git to escape. A merge is a merge. Regardless of the source control tool or pattern you use. If you wait more than a day or two to merge, you could hit a big merge conflict. This becomes a real issue if you have a larger team. If you have more than a few people waiting to merge, you can have a serious a bottleneck. Introducing patterns like Gitflow require the discipline to merge often to be successful. So by all means use the pattern, but only if you have the discipline to prevent long lived branches</p>"
"2015-05",Microservice envy,Techniques,Hold,""
"2015-05",Programming in your CI/CD tool,Techniques,Hold,""
"2015-05",SAFe™,Techniques,Hold,"<p>Scaling agile across enterprises is a continuing challenge. Several approaches have been proposed, with <strong>SAFe™</strong> being one gaining significant mindshare. While SAFe™ provides a useful checklist for areas of concern, they are easy to misuse, by introducing the same kind of large release tendencies like the release train and gated control processes that agile removes. Enterprises in particular look for a degree of commonality across endeavors that SAFe™ seems to provide, promoting aggressive standardization when some degree of customization provides significant value. Other lean approaches that include experimentation and incorporate continuous improvement practices like the Improvement Katas offer organizations a better model for scaling agile.</p><p>Scaled Agile Framework® and SAFe™ are trademarks of Scaled Agile, Inc.</p>"
"2015-05",Security sandwich,Techniques,Hold,"<p>Traditional approaches to security have relied on up-front specification followed by validation at the end. This <strong>“Security Sandwich”</strong> approach is hard to integrate into Agile teams, since much of the design happens throughout the process, and it does not leverage the automation opportunities provided by continuous delivery. Organizations should look at how they can inject security practices throughout the agile development cycle. This includes: evaluating the right level of Threat Modeling to do up-front; when to classify security concerns as their own stories, acceptance criteria, or cross-cutting non-functional requirements; including automatic static and dynamic security testing into your build pipeline; and how to include deeper testing, such as penetration testing, into releases in a continuous delivery model. In much the same way that DevOps has recast how historically adversarial groups can work together, the same is happening for security and development professionals. (But despite our dislike of the Security Sandwich model, it is much better than not considering security at all, which is sadly still a common circumstance.)</p>"
"2015-05",Separate DevOps team,Techniques,Hold,""
"2015-05",Apache Spark,Platforms,Trial,""
"2015-05",Cloudera Impala,Platforms,Trial,""
"2015-05",DigitalOcean,Platforms,Trial,"<p>We have been using <a href=""http://digitalocean.com""><strong>DigitalOcean</strong></a> for basic compute infrastructure, and the service continues to impress us. If you need developer-friendly cloud infrastructure, it is worth a look.</p>"
"2015-05",TOTP Two-Factor Authentication,Platforms,Trial,"<p>Passwords continue to be a poor mechanism for authenticating users and we’ve recently seen companies such as Yahoo! move to a “no passwords” solution—a one-time code is texted to your phone whenever you need to log in from a new browser. If you are still using passwords we recommend employing <strong>two-factor authentication</strong> which can significantly improve security. <a href=""http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm"">Time-based One-Time Password</a> ( <strong>TOTP</strong> ) is the standard algorithm in this space, with free smartphone authenticator apps from <a href=""https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2"">Google</a> and <a href=""http://www.windowsphone.com/en-us/store/app/authenticator/e7994dbc-2336-4950-91ba-ca22d653759b"">Microsoft</a>.</p>"
"2015-05",Apache Kylin,Platforms,Assess,""
"2015-05",Apache Mesos,Platforms,Assess,"<p><a href=""http://mesos.apache.org/"">Mesos</a> is a platform that abstracts out underlying computing resources to make it easier to build massively scalable distributed systems. It can be used to provide a scheduling layer for Docker, or to act as an abstraction layer to things like AWS. Twitter has used it to great effect to help them scale their infrastructure. Tools build on top of Mesos are starting to appear such as <a href=""http://nerds.airbnb.com/introducing-chronos/"">Chronos</a>, which is a distributed, fault tolerant cron replacement.</p>"
"2015-05",CoreCLR and CoreFX,Platforms,Assess,""
"2015-05",CoreOS,Platforms,Assess,"<p><strong>CoreOS</strong> is a Linux distribution designed to run large, scalable systems. All applications deployed on a CoreOS instance are run in separate Docker containers, and CoreOS provides a suite of tools to help manage them, including etcd their own distributed configuration store. Newer services, such as fleet, help cluster management by ensuring that a specific number of service instances are always kept running. FastPatch allows atomic CoreOS upgrades using an active-passive root partition scheme and helps with quick rollback in case of problems. These new developments make CoreOS well worth looking into if you are already comfortable with Docker.</p>"
"2015-05",Deis,Platforms,Assess,""
"2015-05",MariaDB,Platforms,Assess,"<p>After Oracle's acquisition of MySQL, more and more close sourced modules are bundled into its enterprise edition. There are concerns over the future of MySQL. <a href=""https://mariadb.org/"">MariaDB</a> is a community-developed GPL-only fork of MySQL intended to remain truly open source, yet fully compatible and competitive with MySQL. High-profile adopters include large-scale internet organizations Google and Wikipedia, as well as key Linux distributors RedHat and SUSE.</p>"
"2015-05",Netflix OSS Full stack,Platforms,Assess,"<p>While we are reluctant to recommend wholesale adoption of the <strong>Netflix OSS Full Stack</strong> unless you happen to be entering the globally distributed video streaming business, the stack is chock full of interesting ideas, complete with open source implementations. Some of the tools, Asgard for example, are highly coupled into a virtually turnkey architecture, making them challenging to use individually. Other tools like Ice and Hystrix, which we featured on the radar previously, can be used stand-alone. We think teams should understand the ideas and approaches encapsulated within the tools even when they choose not to leverage the full stack.</p>"
"2015-05",OpenAM,Platforms,Assess,"<p>When Oracle ceased development on Sun’s OpenSSO—an open source access management platform—It was picked up by ForgeRock and integrated into their Open Identity Suite. Now named <strong><a href=""http://forgerock.com/products/open-identity-stack/openam/"">OpenAM</a></strong>, it fills the niche for a scalable, open-source platform that supports OpenID Connect and SAML 2.0. However, OpenAM’s long history has resulted in a sprawling codebase whose documentation can be inscrutable. Hopefully, a slimmed-down alternative with better support for automated deployment and provisioning will emerge soon.</p>"
"2015-05",SDN,Platforms,Assess,"<p>Software Defined Networking ( <strong>SDN</strong> ) is a broad topic, but is becoming ever more important. The ability to configure our networking devices using software is blurring the lines of where our application deployments end. It encompasses everything from virtual networking appliances like AWS’ Load Balancers or <a href=""https://github.com/coreos/flannel"">CoreOS’ Flannel</a>, to networking equipment that supports standards like <a href=""https://www.opennetworking.org/sdn-resources/openflow"">OpenFlow</a>. Where cloud providers have previously focused on compute and storage, we expect the growing array of SDN tools to deliver further efficiencies to how we handle our systems both off and on premise.</p>"
"2015-05",Spark Photon/Spark Electron,Platforms,Assess,"<p><strong><a href=""https://www.spark.io/"">Spark</a></strong> is a full stack solution for cloud connected devices. <strong>Spark Photon</strong> is a microcontroller with wifi module. <strong>Spark Electron</strong> is a variant that connects to a cellular network. Spark OS adds REST API to the devices. This simplifies the entry to IoT and building your own connected devices.</p>"
"2015-05",Text it as a service / Rapidpro.io,Platforms,Assess,"<p><strong>Text-it-as-a-service</strong> / <strong><a href=""http://rapidpro.io/"">Rapidpro</a></strong> offers ability to easily set up or modify complex short message service application for business without extensive need of a developer. With the lower costs of text messages compared to USSD sessions, this provides a more affordable way to build scalable applications targeting feature phones and we have seen success in our projects. Flows are very simple to build and actions can be triggered at any point such as sending an sms, email or even calling an external api.</p>"
"2015-05",Time series databases,Platforms,Assess,""
"2015-05",U2F,Platforms,Assess,"<p>Securing online accounts is at the same time extremely important and notoriously difficult. Two-factor authentication does greatly increase security and we have recommended TOTP as a good solution. A new entrant in this field is Universal 2nd Factor ( <strong>U2F</strong> ), a solution based on public key cryptography and inexpensive USB hardware tokens. While developed at Google, it has now become a standard managed by the FIDO Alliance. We do like the promise of better protection against phishing and man-in-the-middle attacks, but are concerned because the standard currently references a specific elliptic curve digital signature algorithm that is considered to be flawed.</p>"
"2015-05",Application Servers,Platforms,Hold,""
"2015-05",OSGi,Platforms,Hold,"<p><strong>OSGi</strong> (Open Service Gateway initiative) is a specification that aims to remedy the lack of a module system for Java, allowing for dynamic reloading of components. While some projects (notably Eclipse) use OSGi successfully, other uses have exposed the hazards of adding abstractions to platforms never designed for them. Projects that rely on OSGi to define a component system quickly realize that it solves only a small part of the overall problem, and often adds its own accidental complexity to projects such as more complex builds. Most projects now either use old-fashioned JAR files or microservice architectures to manage components, and await the native solution in Java in the Jigsaw module specification.</p>"
"2015-05",SPDY,Platforms,Hold,""
"2015-05",Nancy,languages-and-frameworks,Adopt,""
"2015-05",Dashing,languages-and-frameworks,Trial,"<p>The importance of big, visible displays in team areas has been written about many times before, and we certainly value the approach of helping everyone see and understand key pieces of information about how our software or our teams are doing. <a href=""http://dashing.io/"">Dashing</a> is a Ruby-based dashboard system we have been using for many years to create clear, visible displays optimized for large monitors. It is very hackable, allowing you to pull in information from a variety of sources from build systems, ticket or story tracking tools, or production monitoring systems.</p>"
"2015-05",Django REST,languages-and-frameworks,Trial,"<p>We have used the <a href=""http://www.django-rest-framework.org/"">Django REST framework</a>, which is a flexible and customizable framework that makes it easy to build web APIs, in several of our projects. It allows you to build RESTful APIs in Python with Django, exposing API endpoints which are accessible from a consumer front-end. Django REST gives a browsable web API that allows developers to visualize data being transferred through the API and returns response examples, which the consumer application will receive. It provides a number of authentication schemes out of the box, and allows implementation of custom schemes.</p>"
"2015-05",Ionic Framework,languages-and-frameworks,Trial,"<p><a href=""http://ionicframework.com/"">Ionic framework</a> is an open-source front-end framework that offers a library of mobile-optimized HTML, CSS and JavaScript components and tools for building highly interactive applications. It is built with SASS and optimized for AngularJS. We have seen success in several of our projects employing this framework, with its ease to install and test. We recommend investigating this framework when you are performance obsessed and looking for a seamlessly integrated front-end framework.</p>"
"2015-05",Nashorn,languages-and-frameworks,Trial,"<p><strong>Nashorn</strong> is a new JavaScript engine for Java that has been released with Java 8. When the exact same code should be run in the web browser and on the server, which is often the case for validation and data migration logic, it is the tool of choice in the Java world, and that is the case despite some rough edges. We are not convinced that using Nashorn to host entire applications, via Node support or the Avatar project, is a good idea.</p>"
"2015-05",Om,languages-and-frameworks,Trial,"<p>We have seen continued interest in <strong>Om</strong> , a ClojureScript wrapper around Facebook's ReactJS front-end programming framework. Om leverages the inherent immutability of ClojureScript, allowing automatic features like snapshots of UI state and undo. And due to the efficiency of ClojureScript's data structures, some Om applications run faster than identical ones based on the raw underlying React framework. The ecosystem of components and applications around Om is growing and our teams are starting to pick it up.</p>"
"2015-05",React.js,languages-and-frameworks,Trial,"<p>One benefit to the ongoing avalanche of front-end JavaScript frameworks is that occasionally, a new idea crops up that makes us think. <a href=""http://facebook.github.io/react/""><strong>React.js</strong></a> is a UI/View framework in which JavaScript functions generate HTML in a reactive data flow. We have seen several smaller projects achieve success with React.js and developers are drawn to its clean, composeable approach to componentization.</p>"
"2015-05",Retrofit,languages-and-frameworks,Trial,"<p><a href=""http://square.github.io/retrofit/"">Retrofit</a> offers a reliable way to build HTTP clients on Android projects by converting a REST API into a Java interface. Retrofit integrates with OkHttp and allows developers to provide custom error handling for requests. It does JSON parsing automatically using Gson and has a very well supported community.</p>"
"2015-05",Spring Boot,languages-and-frameworks,Trial,"<p><a href=""http://projects.spring.io/spring-boot""><strong>Spring Boot</strong></a> allows easy set up of standalone Spring-based applications. It's ideal for pulling up new microservices and easy to deploy. It also makes data access less of a pain due to the hibernate mappings with much less boilerplate code. We like that Spring Boot simplifies Java services built with Spring, but have learned to be cautious of the many dependencies. Spring still lurks just beneath the surface.</p>"
"2015-05",Ember.js,languages-and-frameworks,Assess,""
"2015-05",Flight.js,languages-and-frameworks,Assess,"<p>In the crowded space of JavaScript frameworks, we want to highlight <a href=""https://flightjs.github.io/""><strong>Flight.js</strong></a> as a lightweight framework to build components. Flight gets by without much magic when adding behavior to DOM nodes. Its event-driven and component-based nature promotes writing decoupled code. This makes testing individual components comparatively easy. Care must be taken, however, when components need to interact with each other. There is little support for testing and a real danger to get into <em>event hell</em>. We do like that it uses functional mixins for behavior, like composition instead of inheritance.</p>"
"2015-05",Haskell Hadoop library,languages-and-frameworks,Assess,"<p>While there are lots of fans of <strong>Haskell</strong> among ThoughtWorks' language devotees, we rarely see it on the kinds of projects we work on—until recently. Several open source projects now marry <strong>Hadoop</strong> ’s map/reduce jobs to Haskell’s syntax, which some developers and/or data scientists find appealing.</p>"
"2015-05",Lotus,languages-and-frameworks,Assess,"<p>We don’t know who named <strong><a href=""http://lotusrb.org/"">Lotus</a></strong>, but we can only assume they are too young to have worked with a certain office collaboration product. Lotus is a new Rack-based MVC framework written in Ruby that can be deployed modularly so that you are free to use only the portions of the framework you need. It is a modern alternative to the monolithic Ruby-on-Rails framework (that turned 10 this year). Lotus has the potential to make full-stack Ruby MVC development as easy as 1-2-3.</p>"
"2015-05",Reagent,languages-and-frameworks,Assess,"<p><a href=""http://holmsand.github.io/reagent/"">Reagent</a> has emerged as a lightweight minimalist alternative to Om for wrapping React.js in ClojureScript. Whereas Om provides a comprehensive Clojure-idiomatic front-end programming framework, Reagent takes advantage of Clojure’s expressiveness to focus on simple components and a readable DSL for writing HTML. By representing HTML in Clojure data, Reagent retains the performance and understandability of React.js without embedding foreign markup in the code.</p>"
"2015-05",Swift,languages-and-frameworks,Assess,"<p>With some real-world experience under our belt, <a href=""https://developer.apple.com/swift/""><strong>Swift</strong></a> still shows a lot of promise. Some of the problems, like long compile times, are being addressed. However, continued language changes cause extra development effort and make building older versions of your own software burdensome. Testing and refactoring also remain painful. On balance, though, you should still consider Swift when starting new development projects for the Apple ecosystem.</p>"
"2015-05",JSF,languages-and-frameworks,Hold,"<p>We continue to see teams run into trouble using <strong>JSF</strong> - JavaServer Faces - and are recommending you avoid this technology. Teams seem to choose JSF because it is a Java EE standard without really evaluating whether the programming model suits them. We think JSF is flawed because its programming model encourages use of its own abstractions rather than fully embracing the underlying web model. JSF, like ASP.NET webforms, attempts to create stateful component trees on top HTML markup and the stateless HTTP protocol. The improvements in JSF 2.0 and 2.2, such as the introduction of stateless views and the promotion of GET, are steps in the right direction, maybe even an acknowledgement that the original model was flawed, but we feel this is a too little too late. Rather than dealing with the complexity of JSF we recommend teams use simple frameworks and work closely with web technologies including HTTP, HTML and CSS.</p>"
"2015-11",Composer,Tools,Adopt,"<p>Although the idea of dependency management is not new and considered to be a fundamental development practice, it is not widely adopted by the PHP community. <strong><a href=""https://getcomposer.org"">Composer</a></strong> is a tool for dependency management in PHP. It is strongly influenced by tools from other technology stacks like Node's npm and Ruby's Bundler. We are now seeing wide adoption across PHP projects and it is fairly mature. You can still have to do some shims for internal libraries, you can use it for most external libraries.</p>"
"2015-11",Mountebank,Tools,Adopt,"<p>Good testing of components in an enterprise system is critical and with increased emphasis on service-based separation and deployment automation—critical factors for success with microservices—better tooling in this space is needed. The industry term “service virtualization” refers to tools that can emulate specific components in such an environment. We have seen great success with <a href=""http://www.mbtest.org/""><strong>Mountebank</strong></a>, a lightweight tool for stubbing and mocking HTTP, HTTPS, SMTP and TCP.</p>"
"2015-11",Postman,Tools,Adopt,"<p><strong><a href=""http://www.getpostman.com/features"">Postman</a></strong> is a Chrome extension that acts as a REST client in your browser, allowing you to create requests and inspect responses. It is a useful tool when developing an API or implementing a client to call an existing API. Postman supports OAuth1 and OAuth2 tokens allowing addition of them to requests where necessary. The response is available as a prettified JSON or XML. With Postman you are able to retrieve a history of requests performed to quickly edit and test the API response to different data. It offers a suite of extensions that allow you to use it as a full-blown test runner too, although we discourage the record and replay style of testing it promotes.</p>"
"2015-11",Browsersync,Tools,Trial,""
"2015-11",Carthage,Tools,Trial,""
"2015-11",Consul,Tools,Trial,"<p>We continue to be impressed with <strong><a href=""http://consul.io"">Consul</a></strong>, a service discovery tool supporting both DNS and HTTP-based discovery mechanisms. It goes beyond other discovery tools by providing customizable health-checks for registered services, ensuring that unhealthy instances are marked accordingly. More tools have emerged to work with Consul to make it even more powerful. <a href=""https://github.com/hashicorp/consul-template"">Consul Template</a> enables configuration files to be populated with information from Consul, making things like client-side load balancing using mod_proxy much easier. In the world of Docker, <a href=""https://github.com/gliderlabs/registrator"">registrator</a> can automatically register docker containers as they appear with Consul with extremely little effort, making it much easier to manage container-based setups.</p>"
"2015-11",Docker Toolbox,Tools,Trial,"<p>Previously, we recommended <a href=""https://www.thoughtworks.com/radar/tools/boot2docker"">boot2docker</a> as a way of easily running Docker on your local Windows or OS X machine. <strong><a href=""https://www.docker.com/toolbox"">Docker Toolbox</a></strong> now replaces boot2docker, adding some tooling as well. Now included is <a href=""https://kitematic.com/"">Kitematic</a> for managing your containers, as well as <a href=""https://docs.docker.com/compose/"">Docker Compose</a> for managing multi-Docker setup (Mac only). It can be used safely as a drop-in replacement for boot2docker, and it will even handle the upgrade for you.</p>"
"2015-11",Gitrob,Tools,Trial,"<p>Safely storing secrets such as passwords and access tokens in code repositories is now supported by a growing number of tools - for example, <a href=""https://github.com/AGWA/git-crypt"">git-crypt</a> and <a href=""https://www.thoughtworks.com/radar/tools/blackbox"">Blackbox</a>, which we mentioned in the previous Technology Radar. Despite the availability of these tools, it is still, unfortunately, all too common that secrets are stored unprotected. In fact, it is so common that automated exploit software is used to find AWS credentials and spin up EC2 instances to mine Bitcoins, leaving the attacker with the Bitcoins and the account owner with the bill. <a href=""https://github.com/michenriksen/gitrob""><strong>Gitrob</strong></a> takes a similar approach and scans an organization’s GitHub repositories, flagging all files that might contain sensitive information that shouldn’t have been pushed to the repository. This is obviously a reactive approach. Gitrob can only alert teams when it is (almost) too late. For this reason, Gitrob can only ever be a complementary tool, to minimize damage.</p>"
"2015-11",GitUp,Tools,Trial,""
"2015-11",Hamms,Tools,Trial,"<p>Many many wonderful stories of failure in our industry are caused by the assumption that networks are always reliable and servers respond quickly and correctly all the time. <a href=""https://github.com/kevinburke/hamms""><strong>Hamms</strong></a> is an interesting open-source tool which acts as a badly behaved HTTP server, triggering a number of failures including connection failures or slow and/or malformed responses. It may be useful for testing that your software handles failures gracefully.</p>"
"2015-11",IndexedDB,Tools,Trial,"<p>As single page applications and offline-first become more viable and widespread there is a growing need to persist data in the web browser. Local Storage is very easy to use and well supported by the web browsers. For more complex use cases, there is IndexedDB. While it can be a good solution we recommend to only use it when absolutely necessary, due to the increase in complexity and a somewhat clumsy API. We have also had positive experience with the <a href=""https://github.com/mozilla/localForage"">localForage</a> framework that provides an abstraction layer over the various persistence solutions.</p>"
"2015-11",Polly,Tools,Trial,"<p>Several of our teams working on .NET projects have recommended <strong><a href=""https://github.com/michael-wolfenden/Polly"">Polly</a></strong> as being useful in building microservice-based systems. It encourages the fluent expression of transient exception-handling policies and the Circuit Breaker pattern, including policies such as Retry, Retry Forever and Wait and Retry. Similar libraries already exist in other languages (Hystrix for Java for example), and Polly is a welcome addition from the .NET community. Integrating well with Polly is <strong><a href=""https://www.thoughtworks.com/radar/tools/brighter"">Brighter</a></strong>. Brighter is another small open source .Net library that provides scaffolding to implement command invocation. Combining the two libraries provides useful circuit-breaking functionality especially in the context of the Ports and Adapters pattern and CQRS. Although they can be used separately, in the wild our teams find they work well together.</p>"
"2015-11",REST-assured,Tools,Trial,"<p><strong><a href=""https://code.google.com/p/rest-assured/"">REST-assured</a></strong> is a Java domain specific language for testing and validating RESTful services. It simplifies the testing of REST based services built on top of HTTP Builder. REST-assured supports the different REST requests and can be used to validate and verify the responses from the APIs. It also provides a JSON schema validation and can thus be used to verify that the endpoints are returning the right types of expected data.</p>"
"2015-11",Sensu,Tools,Trial,"<p>Many monitoring tools are built around the concept of the machine or instance. The increasing use of patterns like <a href=""http://martinfowler.com/bliki/PhoenixServer.html"">Phoenix Server</a> and tools like <a href=""https://www.docker.com/"">Docker</a> mean this is an increasingly unhelpful way to model infrastructure: Instances are becoming transient while services are the things that persist. <a href=""https://sensuapp.org/""><strong>Sensu</strong></a> allows an instance to register itself as playing a particular role, and Sensu then monitors it on that basis. Over time, different instances playing that role may come and go. Given these factors and the increasing maturity of the tool, we felt it was time to bring Sensu back on to the radar.</p>"
"2015-11",SysDig,Tools,Trial,""
"2018-11",Headless Firefox,Tools,Trial,"<p><a href=""http://developer.mozilla.org/en-US/Firefox/Headless_mode""><strong>Headless Firefox</strong></a> has the same maturity as that of <a href=""/radar/tools/headless-chrome-for-front-end-test"">Headless Chrome for front-end test</a>. Similar to Headless Chrome, with Firefox in headless mode we now get to enjoy browser tests without the visible UI components, executing the UI tests suite much faster.</p>"
"2015-11",ZAP,Tools,Trial,"<p>The <strong><a href=""https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"">ZED Attack Proxy (ZAP)</a></strong> is a project from OWASP which allows you to probe an existing site for security vulnerabilities in an automated fashion. It can be used as part of periodic security testing, or else integrated into a CD pipeline to provide ongoing checks for common vulnerabilities. The use of a tool like ZAP doesn’t replace the need to think carefully about security and do other sorts of more thorough testing, but as another tool to help ensure our systems are more secure it’s a good addition to the toolbox.</p>"
"2015-11",Apache Kafka,Tools,Assess,"<p>Many recent developments in enterprise software revolve around asynchronous sequences of immutable event sequences as opposed to synchronous, point-to-point requests that modify state. <a href=""http://kafka.apache.org/""><strong>Apache</strong> <strong>Kafka</strong></a> is an open-source messaging framework that supports this architectural style by publishing ordered message feeds to many independent, lightweight consumers. Kafka’s unique design allows the number of consumers to scale while maintaining strong ordering on the messages.</p>"
"2015-11",Concourse CI,Tools,Assess,""
"2015-11",Espresso,Tools,Assess,"<p><strong><a href=""https://google.github.io/android-testing-support-library/docs/espresso/index.html"">Espresso</a></strong> is an Android functional-testing tool. Its small-core API hides the messy implementation details and helps in writing concise tests, with faster and reliable test execution.</p>"
"2015-11",Gauge,Tools,Assess,"<p><strong><a href=""http://getgauge.io/"">Gauge</a></strong> is a lightweight cross-platform test-automation tool. Specifications are written in free-form Markdown, so test cases can be written in the business language and can be incorporated into any existing documentation format. Supported languages are implemented as plugins to a single core implementation, which ensures consistency across language implementations. This tool, open sourced by ThoughtWorks, also supports parallel execution out of the box for all supported platforms.</p>"
"2015-11",Gor,Tools,Assess,"<p><a href=""https://github.com/buger/gor""><strong>Gor</strong></a> is an open-source tool for capturing and replaying live HTTP traffic into a test environment in order to continuously test your system with real data. It can be used to increase confidence in code deployments, configuration changes and infrastructure changes.</p>"
"2015-11",ievms,Tools,Assess,""
"2015-11",Let's Encrypt,Tools,Assess,"<p>Although more sites every day are implementing HTTPS to help protect their own users and improve the integrity of the web as a whole, there are many more sites to go. In addition, we see more and more people using HTTPS within their enterprises, to provide additional security guarantees. One of the main blockers to wider adoption has been the process of getting a certificate in the first place. Aside from the cost, the process itself is far from slick. <a href=""https://letsencrypt.org/""><strong>Let’s Encrypt</strong></a>, a new Certificate Authority, aims to solve all this. First, it provides certificates for free. Second, and arguably more important, it also provides an extremely easy-to-use command-line API, making it easy to fully automate the process of issuing, upgrading and installing certificates. We think that Let’s Encrypt, in beta at the moment, has the chance to be revolutionary in terms of helping more of the web get on to HTTPS, and at the same time showing what good, automatable tools for the security-conscious should look like.</p>"
"2015-11",Pageify,Tools,Assess,"<p><strong><a href=""https://github.com/paramadeep/pageify"">Pageify</a></strong> is a Ruby library for building page objects for UI automation tests, focusing on faster test execution and code readability. It offers simple APIs to dynamically define, operate and assert on the page objects, allowing readable code even when handling elements with complex hierarchies in the DOM. It bundles integration for <strong>WebDriver</strong> and <strong>Capybara</strong>.</p>"
"2015-11",Prometheus,Tools,Assess,""
"2015-11",Quick,Tools,Assess,"<p><strong><a href=""https://github.com/Quick/Quick"">Quick</a></strong> is a testing framework for Swift and Objective-C, which comes bundled with <strong>Nimble</strong> , a matcher framework for tests. Quick helps verify the behavior of Swift and Objective-C programs. Quick has the same syntactic flavour as <strong>RSpec</strong> and <strong>Jasmine</strong> and is easy to set up. It is very organized, allows for assertion of types and makes it easy to test asynchronous code.</p>"
"2015-11",RAML,Tools,Assess,""
"2015-11",Security Monkey,Tools,Assess,"<p><strong><a href=""https://github.com/Netflix/security_monkey"">Security Monkey</a></strong> is another tool in Netflix’s Simian Army, which is a suite of tools designed to ensure that systems are being built in a resilient fashion. As well as providing a (configurable) assessment of any potential security vulnerabilities in your AWS setup, it can also be used to monitor changes on an ongoing basis, alerting different groups as required. It does overlap in some ways with AWS’ own <a href=""https://aws.amazon.com/premiumsupport/trustedadvisor/"">Trusted Advisor Report</a> and <a href=""http://aws.amazon.com/cloudtrail/"">CloudTrail</a> service, as it was developed prior to both these services being made generally available, but its capabilities do go beyond these offerings. If either of those services don’t quite meet your requirements, Security Monkey is worth a look.</p>"
"2015-11",Sleepy Puppy,Tools,Assess,""
"2015-11",Visual Studio Code,Tools,Assess,"<p><strong><a href=""https://code.visualstudio.com/"">Visual Studio Code</a></strong> is Microsoft’s free IDE editor, available across platforms. We find the version-control integration with Git very beneficial to promoting continuous integration practices. Visual Studio Code also provides a means of integrating with external tools via tasks, with autodetection of grunt/gulp tasks eliminating the need for running grunt/gulp tasks via terminals and simply using the editor. With the growth of the Docker ecosystem, this IDE offers support for the dockerfile with snippets and definitions of valid commands.</p>"
"2015-11",Citrix for development,Tools,Hold,"<p>Many organizations are still forcing distributed or offshore development teams to use <strong>Citrix remote desktop for development</strong>. Although this provides a simple security model – assets supposedly never leave the organization’s servers - using remote desktops for development absolutely cripples developer productivity. There’s not much point paying a cheaper hourly rate for developers if you’re going to impose both the distribution and remote-desktop burdens on them, and we wish more offshore vendors would admit these drawbacks to their clients. It’s much better to use either a 'clean room' secured offshore environment where local development can be done, or a <a href=""/radar/techniques/hosted-ide-s"">Hosted IDE</a> (e.g. <a href=""/radar/tools/ievms"">ievms</a>)</p>"
"2015-11",Consumer-driven contract testing,Techniques,Adopt,"<p>When two independently developed services are collaborating, changes to the supplier’s API can cause failures for all its consumers. Consuming services usually cannot test against live suppliers since such tests are slow and <a href=""http://martinfowler.com/articles/nonDeterminism.html#RemoteServices"">brittle</a>, so it’s best to use <a href=""http://martinfowler.com/bliki/TestDouble.html"">Test Doubles</a>, leading to the danger that the test doubles get out of sync with the real supplier service. Consumer teams can protect themselves from these failures by using <a href=""http://martinfowler.com/bliki/IntegrationContractTest.html"">integration contract tests</a> – tests that compare actual service responses with test values. While such contract tests are valuable, they are even more useful when consuming services provide these tests to the supplier, who can then run all their consumers’ contract tests to determine if their changes are likely to cause problems – adopting <a href=""http://www.martinfowler.com/articles/consumerDrivenContracts.html"">consumer-driven contracts</a>. Such <strong>consumer-driven contract tests</strong> are an essential part of a mature <a href=""http://martinfowler.com/articles/microservice-testing/"">microservice testing</a> portfolio.</p>"
"2015-11",Decoupling deployment from release,Techniques,Adopt,""
"2015-11",Generated infrastructure diagrams,Techniques,Adopt,"<p>When we need a diagram that describes the current infrastructure or physical architecture we usually take to our favorite technical diagramming tool. If you are using the cloud or virtualization technologies this no longer makes sense, we can use the provided APIs to interrogate the actual infrastructure and generate a live, <strong>automated infrastructure diagram</strong> using simple tools like <a href=""http://www.graphviz.org/"">GraphViz</a> or by outputting SVG.</p>"
"2015-11",NoPSD,Techniques,Adopt,"<p>'Just In Time Design' is an important and useful concept for visual design that the <a href=""https://www.thoughtworks.com/p2magazine/issue02/continuous-design/""><strong>NoPSD</strong></a> movement attempts to capture. You don't need to design the whole application or every UI element up front. Design things as you need them with as lightweight tools as you can use. We have seen a corresponding growth in simpler tools with faster learning curves, such as <a href=""http://www.sketchapp.com/""><strong>Sketch</strong></a>, as well as an increasing return to pen-and-paper (especially when paired with an existing robust <a href=""https://www.thoughtworks.com/radar/techniques/living-css-style-guides""><strong>digital style guide</strong></a>). Because of the limitations of flat mock-ups when you’re designing for screens, creating prototypes of varying fidelity with tools such as <a href=""http://www.invisionapp.com/""><strong>Invision</strong></a>, <a href=""http://framerjs.com/""><strong>FramerJS</strong></a> and <strong>Origami</strong> - or simply HTML/CSS and a bit of JavaScript - has also become increasingly common and valuable for communicating design intent.</p>"
"2015-11",Products over projects,Techniques,Adopt,""
"2015-11",Threat Modeling,Techniques,Adopt,"<p>With the number of high-profile security breaches in the past months, software development teams no longer need convincing that they must place an emphasis on writing secure software and dealing with their users’ data in a responsible way. The teams face a steep learning curve, though, and the vast number of potential threats - ranging from organized crime and government spying to teenagers who attack systems 'for the lulz' can be overwhelming. <a href=""https://www.owasp.org/index.php/Category:Threat_Modeling""><strong>Threat Modeling</strong></a> provides a set of techniques, mostly from a defensive perspective, that help you understand and classify potential threats. Turned into 'evil-user stories', threat models can give a team a manageable and effective approach to making their systems more secure.</p>"
"2015-11",BEM,Techniques,Trial,"<p>Debugging CSS problems can be painful. How many times have you had to trawl through thousands of overridden styles to work out the source of your problem? This has led many of our teams to introduce various guidelines such as avoiding cascading and overrides, making styles opt-in and emphasizing thoughtful naming. <a href=""http://getbem.com/""><strong>BEM</strong></a> is a simple CSS naming convention (standing for Block, Element, Modifier) that helps give semantic clarity and structure to your CSS. By using BEM, it becomes much easier to understand which CSS rules are influencing the appearance of an element and, more importantly, the intent of those rules. This approach can be seen as moving the OO lesson of favoring composition over inheritance to the world of CSS.</p>"
"2015-11",BFF - Backend for frontends,Techniques,Trial,""
"2015-11",Docker for builds,Techniques,Trial,"<p>One of the many innovative uses of <a href=""https://www.docker.com/"">Docker</a> that we’ve seen on our projects is a technique to manage build-time dependencies. In the past, it was common to run build agents on an OS, augmented with dependencies needed for the target build. But with Docker it is possible to run the compilation step in an isolated environment complete with dependencies without contaminating the build agent. This technique of using <strong>Docker for builds</strong> has proven particularly useful for compiling Golang binaries, and the <a href=""https://github.com/CenturyLinkLabs/golang-builder"">golang-builder</a> container is available for this very purpose.</p>"
"2015-11",Event Storming,Techniques,Trial,"<p><a href=""http://ziobrando.blogspot.be/2013/11/introducing-event-storming.html""><strong>Event Storming</strong></a> is a useful way to do rapid “outside-in” domain modeling: starting with the events that occur in the domain rather than a static data model. Run as a facilitated workshop, it focuses on discovering key domain events, placing them along a timeline, identifying their triggers and then exploring their relationships. This approach is particularly useful for people taking a CQRS or <a href=""https://www.thoughtworks.com/radar/techniques/event-sourcing"">Event Sourcing</a> approach. Getting the right people in the room is important - a blend of business and technical people who bring both the questions and the answers. Ensuring that you have enough wall space for modeling is the second key to success. Look to discover the big picture, with the goal of collectively understanding the domain in all of its complexity, before diving into solutions.</p>"
"2015-11",Flux,Techniques,Trial,""
"2015-11",Idempotency filter,Techniques,Trial,""
"2015-11",iFrames for sandboxing,Techniques,Trial,""
"2015-11",NPM for all the things,Techniques,Trial,""
"2015-11",Separate DevOps team,Techniques,Hold,"<p>In the last radar issue we advised against creating a <strong>separate DevOps team</strong> , as DevOps is about creating a culture of shared responsibility in delivery teams. We recommend embedding operations skills into delivery teams to reduce friction and deliver better outcomes. However where there is a need for significant investment in tooling and automation, we do see a role for a Delivery Engineering team. Rather than being a helpdesk, these teams build tooling and enable teams to deploy, monitor, and maintain their own production environments.</p>"
"2015-11",TOTP Two-Factor Authentication,Platforms,Adopt,""
"2015-11",Offline first web applications,Techniques,Trial,"<p><strong>Offline first web applications</strong> provide the ability to design web applications for offline access by employing caching and updating mechanisms. The implementation requires a flag in the DOM to check whether the accessing device is offline or online, accessing local storage when offline, and synchronising data when online. All the major browsers now support an offline mode, which bootstraps the process of downloading and caching the resources such as HTML, CSS, JavaScript, images and other kinds of resources. There are some tools which help simplify offline first implementation such as <a href=""http://hood.ie/""><strong>Hoodie</strong></a>, and <a href=""http://couchdb.apache.org/""><strong>CouchDB</strong></a> also offers ability to work with a locally deployed application on a local data storage.</p>"
"2015-11",Phoenix Environments,Techniques,Trial,""
"2015-11",QA in production,Techniques,Trial,""
"2015-11",Accumulate-only data,Techniques,Assess,"<p>Immutable data structures are becoming more popular, with functional languages such as Clojure and Scala providing immutability by default. Immutability allows code to be more easily written, read and reasoned about. Using an <strong>accumulate-only data store</strong> can confer some of these benefits in the database layer, as well as make audit and historical querying simple. Implementation options vary, from specific accumulative data stores such as <a href=""http://www.datomic.com/"">Datomic</a> to simply using an “append-don’t-update” approach with a traditional database. <strong>Accumulate-only</strong> is a design strategy whereby data is removed via retraction rather than update; <strong>append-only</strong> is an implementation technique.</p>"
"2015-11",Bug bounties,Techniques,Assess,"<p>More and more organizations are starting to use <strong>bug bounties</strong> to encourage reporting of what are often security-related bugs, and in general help improve the quality of their software. To support these programs, companies like <a href=""https://hackerone.com/"">HackerOne</a> and <a href=""https://bugcrowd.com/"">BugCrowd</a> can help organizations manage this process more easily. We have limited experience with these offerings ourselves, but we like the idea of encouraging people to help come forward and highlight what can often be damaging vulnerabilities in an open and transparent way. It's worth noting that there might be some legal issues with encouraging users to find vulnerabilities in your software, so please do check that out first.</p>"
"2015-11",Data Lake,Techniques,Assess,"<p>A <a href=""http://martinfowler.com/bliki/DataLake.html""><strong>Data Lake</strong></a> is an immutable data store of largely unprocessed 'raw' data, acting as a source for data analytics. Whereas the more familiar Data Warehouse filters and processes the data before storing it, the lake just captures the raw data, leaving it to the users of that data to carry out the particular analysis that they need. Examples include HDFS or HBase within a <a href=""https://hadoop.apache.org/"">Hadoop</a>, <a href=""http://spark.apache.org/"">Spark</a> or <a href=""https://storm.apache.org/"">Storm</a> processing framework. Usually only a small group of data scientists work on the raw data, developing streams of processed data into lakeshore data marts for most users to query. A Data Lake should only be used for analytics and reporting. For collaboration between operational systems we prefer using services designed for that purpose.</p>"
"2015-11",Hosted IDE's,Techniques,Assess,""
"2015-11",Monitoring of invariants,Techniques,Assess,""
"2015-11",Reactive Architectures,Techniques,Assess,"<p>The techniques of functional reactive programming have steadily gained in popularity over recent years, and we’re seeing increased interest in extending this concept to distributed systems architectures. Partly inspired by “<a href=""http://www.reactivemanifesto.org/"">The Reactive Manifesto</a>”, these <strong>reactive architectures</strong> are based on a one-way, asynchronous flow of immutable events through a network of independent processes (perhaps implemented as microservices). In the right setting, these systems are scalable and resilient and decrease the coupling between individual processing units. However, architectures based entirely on asynchronous message passing introduce complexity and often rely on proprietary frameworks. We recommend assessing the performance and scalability needs of your system before committing to this as a default architectural style.</p>"
"2015-11",Gitflow,Techniques,Hold,""
"2015-11",High performance envy/web scale envy,Techniques,Hold,""
"2015-11",Microservice envy,Techniques,Hold,"<p>We remain convinced that microservices can offer significant advantages to organizations, in terms of improving team autonomy and faster frequency of change. The additional complexity that comes from distributed systems requires an additional level of maturity and investment. We are concerned that some teams are rushing in to adopting microservices without understanding the changes to development, test, and operations that are required to do them well. Our general advice remains simple. Avoid <strong>microservice envy</strong> and start with one or two services before rushing headlong into developing more, to allow your teams time to adjust and understand the right level of granularity.</p>"
"2015-11",Pace-layered Application Strategy,Techniques,Hold,"<p>Gartner's <strong>Pace-layered Application Strategy</strong> approach appears to be creating an unhelpful focus on the idea of layers within an architecture. We find thinking about the pace of change within different <strong>business capabilities</strong> (which can be made up of several architectural layers) to be a more useful concept. The danger in focusing on layers is that many types of change cut across multiple layers. For example, being able to add new class of stock to a website is not just about having an easy-to-change CMS; you also need to update the database, integration points, warehouse systems, etc. The recognition that some parts of an architecture need to be more maneuverable than others is useful. However, a focus on layers is proving unhelpful.</p>"
"2015-11",Programming in your CI/CD tool,Techniques,Hold,"<p>We still see teams configure their CI and CD tools by directly embedding complex multi-line commands directly into the configuration of the tool. Often these embedded commands also contains steps that would only ever take effect in the build environment including things such as CI specific environment variables, steps that would create/modify files and templates only in the CI environment etc. This makes the build environment a special beast - whose results cannot be duplicated locally on a developer's machine.</p><p>This is extremely problematic because the CI/CD tool, which is supposed to expose problems in your code, itself becomes a complex beast whose behavior is hard to debug and whose results are hard to replicate.</p><p>The way to avoid <strong>programming in your CI/CD tool</strong> is to extract the complexities of the build process from the guts of the tool and into a simple script which can be invoked by a single command. This script can then be executed on any developer workstation and therefore eliminates the privileged/singular status of the build environment.</p>"
"2015-11",SAFe™,Techniques,Hold,""
"2015-11",Apache Mesos,Platforms,Trial,""
"2015-11",Apache Spark,Platforms,Trial,"<p><a href=""https://spark.apache.org/""><strong>Apache Spark</strong></a> has been steadily gaining ground as a fast and general engine for large-scale data processing. The engine is written in Scala and is well suited for applications that reuse a working set of data across multiple parallel operations. It’s designed to work as a standalone cluster or as part of Hadoop YARN cluster. It can access data from sources such as HDFS, Cassandra, S3 etc. Spark also offers many higher level operators in order to ease the development of data parallel applications. As a generic data processing platform it has enabled development of many higher level tools such as interactive SQL (Spark SQL), real time streaming (Spark Streaming), machine learning library (MLib), R-on-Spark etc.</p>"
"2015-11",AWS Lambda,Platforms,Trial,"<p>AWS releases a huge number of new features on what seems like a monthly basis, so it can sometimes be hard for any new service offering to rise above the noise, but <strong><a href=""https://aws.amazon.com/lambda/"">Lambda</a></strong> certainly manages to attract notice. Initially just supporting JavaScript, but now adding support for JVM-based applications (with more no doubt to follow), Lambda allows you to fire up very short-lived processes either in reaction to an event, or via a call from the related <a href=""https://aws.amazon.com/api-gateway/"">API Gateway</a>. For stateless services, this means you don’t need to worry about running any long-lived machines, potentially reducing costs and improving security. Despite other forays into the PaaS space by AWS, Lambda looks the closest to getting this right.</p>"
"2015-11",Cloudera Impala,Platforms,Trial,"<p>For a while now the Hadoop community has been trying to bring low-latency, interactive SQL capability to the Hadoop platform (better known as SQL-on-Hadoop). This has led to a few open source systems such as Cloudera Impala, Apache Drill, Facebook’s Presto etc being developed actively through 2014. We think the SQL-on-Hadoop trend signals an important shift as it changes Hadoop's proposition from being a batch oriented technology that was complementary to databases into something that could compete with them. <a href=""http://www.cloudera.com/content/cloudera/en/products-and-services/cdh/impala.html""><strong>Cloudera Impala</strong></a> was one of the first SQL-on-Hadoop platforms. It is a distributed, massively-parallel, C++ based query engine. The core component of this platform is the Impala daemon that coordinates the execution of the SQL query across one or more nodes of the Impala cluster. Impala is designed to read data from files stored on HDFS in all popular file formats. It leverages Hive's metadata catalog, in order to share databases and tables between the two database platforms. Impala comes with a shell as well as JDBC and ODBC drivers for applications to use.</p>"
"2015-11",Fastly,Platforms,Trial,"<p><strong><a href=""https://www.fastly.com/"">Fastly</a></strong>, one of a number of CDNs on the market, has a large and growing following on ThoughtWorks projects and is used by many web-scale household names, such as GitHub and Twitter. Its feature set, speed and price point combine to make it a very attractive option when you’re looking for an edge caching solution. We have also seen significant cost savings on projects that move to this platform from another CDN. If you are in the market for a CDN, you could do worse than investigate this one.</p>"
"2015-11",H2O,Platforms,Trial,"<p>Predictive analytics are used in more and more products, often directly in end user-facing functionality. <a href=""http://h2o.ai/""><strong>H2O</strong></a> is an interesting open source package (with a startup behind it) that makes predictive analytics accessible to development teams, offering straightforward use of a wide variety of analytics, great performance and easy integration on JVM-based platforms. At the same time it integrates with the data scientists’ favorite tools, R and Python, as well as Hadoop and Spark.</p>"
"2015-11",HSTS,Platforms,Trial,""
"2015-11",Apache Kylin,Platforms,Assess,"<p><a href=""http://www.kylin.io/""><strong>Apache Kylin</strong></a> is an open source analytics solution from eBay Inc. that enables SQL based multidimensional analysis (OLAP) on very large datasets. Kylin is intended to be a Hadoop based hybrid OLAP (HOLAP) solution that will eventually support both MOLAP and ROLAP style multidimensional analysis. With Kylin you can define cubes using a Cube Designer and initiate an offline process that builds these cubes. The offline process performs a pre-join step to join facts and dimension tables into a flattened out structure. This is followed by a pre-aggregation phase where individual cuboids are built using Map Reduce jobs. The results are stored in HDFS sequence files and are later loaded into HBase. The data requests can originate from SQL submitted using a SQL-based tool. The query engine (based on <strong>Apache Calcite</strong> ), determines if the target dataset exists in HBase. If so, the engine directly accesses the target data from HBase and returns the result with sub-second latency. If not, the engine routes the queries to <strong>Hive</strong> (or any other SQL on Hadoop solution enabled on the cluster).</p>"
"2015-11",AWS ECS,Platforms,Assess,""
"2015-11",Ceph,Platforms,Assess,""
"2015-11",CoreCLR and CoreFX,Platforms,Assess,"<p><strong><a href=""https://github.com/dotnet/coreclr"">CoreCLR</a></strong> and** <a href=""https://github.com/dotnet/corefx"">CoreFX</a>** is the core platform and framework for .NET. Although not new, they have recently been open sourced by Microsoft. A key change is that these dependencies are bin-deployable, they do not need to be installed on a machine in advance. This eases side-by-side deployments, allowing applications to use different framework versions without conflicts. Something written in .NET is then an implementation detail, you can install a .NET dependency into any environment. A .NET tool is no different than something written in C from an external dependency perspective, making it a much more attractive option for general purpose applications and utilities. CoreFX is also being factored into individual NuGet dependencies, so that applications can pull what they need, keeping the footprint for .NET applications and libraries small and making it easier to replace part of the framework.</p>"
"2015-11",Deis,Platforms,Assess,"<p>Heroku, with its 12-factor application model, has changed the way we think about building, deploying, and hosting web applications. <a href=""http://deis.io/""><strong>Deis</strong></a> encapsulates the Heroku PaaS model in an open-source framework that deploys onto Docker containers hosted anywhere. Deis is still evolving, but for applications that fit the 12-factor model it has the potential to greatly simplify deployment and hosting in the environment of your choice. Deis is yet another example of the rich ecosystem of platforms and tools emerging around Docker.</p>"
"2016-04",Superficial private cloud,Platforms,Hold,""
"2016-04",Serverspec,Tools,Trial,""
"2015-11",Kubernetes,Platforms,Assess,"<p><strong><a href=""http://kubernetes.io/"">Kubernetes</a></strong> is Google's answer to the problem of deploying containers into a cluster of machines, which is becoming an increasingly common scenario. It is not the solution used by Google internally but an open source project that originated at Google and has seen a fair number of external contributions. <a href=""https://www.docker.com/"">Docker</a> and <a href=""https://coreos.com/rkt/"">Rocket</a> are supported as container formats, and services offered include health management, replication and discovery. A similar solution in this space is <a href=""/radar/platforms/rancher"">Rancher</a>.</p>"
"2015-11",Linux security modules,Platforms,Assess,"<p>While server hardening is an old technique that is considered fairly commonplace by sysadmins who have had to manage production systems, it has not become commonplace among the developer community. However, the rise in the DevOps culture has resulted in renewed focus on tools like SELinux, AppArmor and Grsecurity that aim to make this simpler, at least on the Linux ecosystem. Each of these tools comes with their own strengths and weaknesses and it is currently hard to pick one as being the only one you will need. That said, we highly recommend that all teams at least assess which <strong>Linux security modules</strong> would be the right one for them and make security and server hardening a part of their development workflow.</p>"
"2015-11",Mesosphere DCOS,Platforms,Assess,""
"2015-11",Microsoft Nano Server,Platforms,Assess,"<p>In contrast to modern cloud and container solutions based on Linux, even Windows Server Core is large and unwieldy. Microsoft is reacting and has provided the <a href=""http://www.theregister.co.uk/2015/05/15/wrestling_with_microsoft_nano_server_preview/?page=1"">first previews</a> of <a href=""https://msdn.microsoft.com/en-us/library/mt126167.aspx""><strong>Nano Server</strong></a>, a further-stripped-down version of Windows Server that drops the GUI stack, 32-bit Win32 support, local logins and remote desktop support, resulting in an on-disk size of about 400MB. The early previews are difficult to work with, and the final solution will be restricted to using the CoreCLR, but for companies that are interested in running .NET-based solutions, Nano Server is definitely worth a look at this stage.</p>"
"2015-11",Particle Photon/Particle Electron,Platforms,Assess,"<p><strong><a href=""https://www.particle.io/"">Particle</a></strong> (formally Spark.io) is a full stack solution for cloud connected devices. <strong>Particle Photon</strong> is a microcontroller with wifi module. <strong>Particle Electron</strong> is a variant that connects to a cellular network. Particle OS adds REST API to the devices. This simplifies the entry to IoT and building your own connected devices.</p>"
"2015-11",Presto,Platforms,Assess,""
"2015-11",Rancher,Platforms,Assess,"<p><strong><a href=""http://rancher.com/"">Rancher</a></strong> is an open source solution that allows deployment of containers into a cluster of machines, which is becoming an increasingly common scenario. It provides services such lifecycle management, monitoring, health checks and discovery. Also included is a completely containerized operating system based on <a href=""https://www.docker.com/"">Docker</a>. The broad focus on containerization and very small footprint are key advantages for Rancher. A similar solution in this space is <a href=""/radar/platforms/kubernetes"">Kubernetes</a>.</p>"
"2015-11",Time series databases,Platforms,Assess,"<p>A <strong>time series database</strong> (TSDB) is a system that is optimized for handling time series data. It allows users to perform CRUD operations on various time series organized as database objects. It also provides the ability to perform statistical calculations on the series as a whole. Although TSDBs are not entirely a new technology we are seeing a renewed interest in the these databases primarily in the realm of IoT applications. This is being facilitated by many open source and commercial platforms (such as <strong>OpenTSDB</strong> , <strong>InfluxDB</strong> , <strong>Druid</strong> , <strong>BlueFloodDB</strong> etc.) that have mushroomed recently. Its also worth mentioning that some of these systems use other distributed databases such <strong>Cassandra</strong> and <strong>HBase</strong> as their underlying storage engine.</p>"
"2015-11",Application Servers,Platforms,Hold,""
"2015-11",Over-ambitious API Gateways,Platforms,Hold,""
"2015-11",SPDY,Platforms,Hold,"<p>The <strong><a href=""https://www.chromium.org/spdy/spdy-whitepaper"">SPDY</a></strong> protocol was developed by Google from 2009 as an experiment to provide an alternative protocol to address performance shortcomings of HTTP/1.1. The new HTTP/2 standard protocol includes many of the key performance features of SPDY, and Google has announced it will drop browser SPDY support in early 2016. If your application requires the features of SPDY, we recommend you look instead at HTTP/2.</p>"
"2015-11",Superficial private cloud,Platforms,Hold,""
"2015-11",ECMAScript 6,languages-and-frameworks,Adopt,""
"2015-11",Nancy,languages-and-frameworks,Adopt,"<p>Since we last talked about <strong><a href=""http://nancyfx.org/"">Nancy</a></strong> on the technology radar it has become the default choice on our .NET projects. Architectures centred around small, vertical slices and microservices simply require light-weight deployment options and low ceremony tooling.</p>"
"2015-11",Swift,languages-and-frameworks,Adopt,"<p>A year after its public debut, <a href=""https://developer.apple.com/swift/""><strong>Swift</strong></a> is now our default choice for development in the Apple ecosystem. With the recent release of Swift 2, the language approaches a level of maturity that provides the stability and performance required for most projects. Swift still has issues, especially around tool support, refactoring and testing. However, we feel that these are not substantial enough to warrant avoiding Swift. At the same time, porting large, existing Objective-C codebases is unlikely to pay off. The announcement that Swift will become open source software is a further positive sign. We are hopeful that this will not just be another dumping of internally developed code into a public repository, because Apple has clearly stated that community contributions are encouraged and will be accepted.</p>"
"2015-11",Enlive,languages-and-frameworks,Trial,""
"2015-11",React.js,languages-and-frameworks,Trial,"<p>One benefit of the ongoing avalanche of front-end JavaScript frameworks is that occasionally a new idea crops up that makes us think. <a href=""http://facebook.github.io/react/""><strong>React.js</strong></a> is a UI/view framework in which JavaScript functions generate HTML in a reactive data flow. It differs significantly from frameworks like <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/angularjs"">AngularJS</a> in that it only allows one-way data bindings, greatly simplifying the rendering logic. We have seen several smaller projects achieve success with React.js, and developers are drawn to its clean, composable approach to componentization.</p>"
"2015-11",SignalR,languages-and-frameworks,Trial,""
"2015-11",Spring Boot,languages-and-frameworks,Trial,"<p><a href=""http://projects.spring.io/spring-boot""><strong>Spring Boot</strong></a> allows easy setup of standalone Spring-based applications. It's ideal for pulling up new microservices and easy to deploy. It also makes data access less of a pain, thanks to the JPA mappings through Spring Data. We like that Spring Boot simplifies Java services built with Spring but have learned to be cautious of the many dependencies. Spring still lurks just beneath the surface. If you’re writing microservices with Java, you might also consider using <strong>Dropwizard</strong> or a microframework like <a href=""http://sparkjava.com/"">Spark</a> to get the benefits of Spring Boot without the enormous weight of Spring.</p>"
"2015-11",Axon,languages-and-frameworks,Assess,"<p>While we still have some reservations about <a href=""http://martinfowler.com/bliki/CQRS.html"">CQRS</a> as a general pattern, the approach can work very well in specific places. In those specific situations, however, a lot of work is left to the developer to properly execute CQRS. <strong><a href=""http://www.axonframework.org/"">Axon</a></strong> is a framework that can help with this on the JVM, and we’ve used it with some success. Although it certainly can’t be considered a perfect solution right now, it continues to evolve and may make much more sense than trying to write everything from scratch.</p>"
"2015-11",Ember.js,languages-and-frameworks,Assess,"<p>Widespread usage of AngularJS continues on ThoughtWorks projects, although not every experience is positive. We continue to advise teams to assess whether the additional complexity of a single-page JavaScript application is necessary to meet their requirements. We also recommend assessing alternative frameworks, and in this radar edition we highlight <a href=""http://emberjs.com/""><strong>Ember.js</strong></a> which is growing in popularity within ThoughtWorks. Ember is praised for its approach of opinionated convention over configuration, responsive core team of committers, performance, and build tooling support via Ember CLI.</p>"
"2015-11",Frege,languages-and-frameworks,Assess,"<p>Following many other programming languages, one of the language geeks’ absolute favourites, <a href=""https://www.haskell.org/"">Haskell</a>, is now also available on the JVM in the form of <a href=""https://github.com/Frege/frege""><strong>Frege</strong></a>. This brings a purely functional programming language onto the platform, allowing for easy interoperability with other JVM languages and libraries.</p>"
"2015-11",HyperResource,languages-and-frameworks,Assess,"<p><strong><a href=""http://hyperresource.com/doc/"">HyperResource</a></strong> is a Ruby framework for building a RESTful API client. The framework accepts JSON in <strong>HAL</strong> format and dynamically generates a model object complete with hypermedia links. Although the framework is still in its infancy, we like that it embraces <a href=""http://martinfowler.com/articles/richardsonMaturityModel.html"">Richardson level 3 REST</a> for better service discoverability and self-documenting protocols.</p>"
"2015-11",Material UI,languages-and-frameworks,Assess,"<p><a href=""http://material-ui.com/""><strong>Material UI</strong></a> provides reusable components for use in <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/react-js"">React</a> applications that implement Google's Material Design language. Filling a similar space to <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/twitter-bootstrap"">Twitter Bootstrap</a>, it gets you up and running quickly but doesn't have the same drawbacks as your application grows. <a href=""http://elemental-ui.com/"">Elemental UI</a> is worth investigating as an alternative.</p>"
"2015-11",OkHttp,languages-and-frameworks,Assess,""
"2015-11",React Native,languages-and-frameworks,Assess,"<p>Yet another entrant into the cross-platform mobile development world, Facebook’s <a href=""https://facebook.github.io/react-native/""><strong>React Native</strong></a> brings the React.js programming model to iOS and Android developers. React Native programs are written in JavaScript, but unlike a hybrid framework such as Ionic, React Native gives developers access to native UI components on the target platform. This is an approach we’ve seen before (e.g., <a href=""http://calatrava.github.io/"">Calatrava</a>), but React Native has already inspired a substantial developer community and builds on the momentum generated by React.js. This framework could play a significant role in the future of mobile app development.</p>"
"2015-11",TLA+,languages-and-frameworks,Assess,"<p>Building systems using microservices requires us to think more deeply about failure isolation and testing. *<em><a href=""https://tlaplus.codeplex.com/"">TLA+</a> *</em>is a formal specification language that can be useful in both these scenarios. For failure isolation, TLA+ can be used to identify invariants in your system that can be monitored directly. An invariant can be the ratio of number of requests to one service to the number of requests to a second service, for example. Any change in this ratio would lead to an alert. TLA+ is also being used to identify subtle design flaws in distributed systems. Amazon, for example, used model-checking based on a formal specification written in TLA+ to identify subtle bugs in Dynamo DB before it was released to the public. For most systems, the investment required to create the formal specification and then perform model checking is probably too great; however, for critical systems - complex ones, or those with many users - we think it’s very valuable to have another tool in our toolbox.</p>"
"2015-11",Traveling Ruby,languages-and-frameworks,Assess,"<p><a href=""http://phusion.github.io/traveling-ruby/""><strong>Traveling Ruby</strong></a> makes it possible to distribute portable, ready-to-run, platform-agnostic Ruby binaries without the need to install an interpreter, packages or additional gems. It decouples running Ruby applications from the development environment they run in.</p>"
"2016-04",Consul,Tools,Adopt,""
"2016-04",Apache Kafka,Tools,Trial,""
"2016-04",Browsersync,Tools,Trial,"<p>We've had rave reviews from a number of ThoughtWorks teams using <a href=""http://www.browsersync.io/""><strong>Browsersync</strong></a>. As the number of devices we deliver web applications to grows, so does the amount of effort that must be devoted to testing across these different devices. Browsersync is a free, open source tool that can dramatically reduce this effort by synchronizing manual browser testing across multiple mobile or desktop browsers. Providing both a CLI and a UI option, the tool is build-pipeline friendly and automates repetitive tasks such as form filling.</p>"
"2016-04",Carthage,Tools,Trial,"<p>Dependency management in iOS and OS X projects used to be either completely manual or completely automatic as part of using <a href=""https://cocoapods.org/"">CocoaPods</a>. With <strong><a href=""https://github.com/Carthage/Carthage"">Carthage</a></strong> , a new middle ground has become available. Carthage manages dependencies - it downloads, builds and updates frameworks - but it leaves the integration of the frameworks into the build of the project to the project. This is in contrast to CocoaPods, which basically takes over the project structure and build setup. It should be noted that Carthage can only deal with dynamic frameworks, which are not available on iOS 7 and below.</p>"
"2016-04",Gauge,Tools,Trial,"<p><strong><a href=""http://getgauge.io/"">Gauge</a></strong> is a lightweight cross-platform test-automation tool. Specifications are written in free-form Markdown so test cases can be written in the business language, as opposed to using the more common but restrictive ""given-when-then"" format. Language and IDE support are implemented as plugins to a single core implementation, allowing testers to use the same IDEs as the rest of the team, with powerful capabilities such as autocompletion and refactoring. This tool, open sourced by ThoughtWorks, also supports parallel execution out of the box for all supported platforms.</p>"
"2016-04",GitUp,Tools,Trial,"<p>Git can be confusing. Really confusing. And even when it’s used in a simple trunk-based development process, there are still enough nuances to how it works that people can tie themselves in knots from time to time. When this happens, having an understanding of how Git works under the hood is very useful, and <strong><a href=""http://gitup.co/"">GitUp</a></strong> is a Mac-based tool that gives you exactly that. GitUp provides a graphical representation of what is happening as you type normal Git commands into the terminal. You can learn the various Git commands while also understanding what each one does as you use it. GitUp is a useful tool for both people new to Git and those with more Git experience.</p>"
"2016-04",Let's Encrypt,Tools,Trial,""
"2016-04",Load Impact,Tools,Trial,""
"2016-04",OWASP Dependency-Check,Tools,Trial,""
"2016-04",Decoupling deployment from release,Techniques,Adopt,"<p>Implementing <a href=""http://martinfowler.com/bliki/ContinuousDelivery.html"">Continuous Delivery</a> continues to be a challenge for many organizations, and it remains important to highlight useful techniques such as <strong>decoupling deployment from release</strong>. We recommend strictly using the term <em>Deployment</em> when referring to the act of deploying a change to application components or infrastructure. The term <em>Release</em> should be used when a feature change is released to end users, with a business impact. Using techniques such as feature toggles and dark launches, we can deploy changes to production systems more frequently without releasing features. More-frequent deployments reduce the risk associated with change, while business stakeholders retain control over when features are released to end users.</p>"
"2016-04",Products over projects,Techniques,Adopt,"<p>We’ve long been championing the idea that thinking of software development as a project - something budgeted and delivered during a limited time slot - doesn’t fit the needs of the modern business. Important software efforts need to be an ongoing product that supports and rethinks the business process it is supporting. Such efforts are not complete until the business process, and its software, cease to be useful. Our observation of this <strong>products over projects</strong> approach, both with our own projects and outside, makes us determine that it is the approach to use for all but exceptional cases.</p>"
"2016-04",Threat Modeling,Techniques,Adopt,""
"2016-04",BFF - Backend for frontends,Techniques,Trial,"<p>Valuable services support many variations in clients, such as mobile versus web and different forms of web interface. It’s tempting to design a single back-end API to support all clients with a reusable API. But client needs vary, as do constraints such as bandwidth for mobile devices versus the desire for lots of data on fast web connections. Consequently it’s often best to <strong>define different back-end services for each kind of front-end</strong> client. These back ends should be developed by teams aligned with each front end to ensure that each back end properly meets the needs of its client.</p>"
"2016-04",Bug bounties,Techniques,Trial,""
"2016-04",Data Lake,Techniques,Trial,""
"2016-04",Event Storming,Techniques,Trial,"<p><a href=""http://ziobrando.blogspot.be/2013/11/introducing-event-storming.html""><strong>Event Storming</strong></a> is a useful way to do rapid ""outside-in"" domain modeling: starting with the events that occur in the domain rather than a static data model. Run as a facilitated workshop, it focuses on discovering key domain events, placing them along a timeline, identifying their triggers and then exploring their relationships. This approach is particularly useful for people taking an <a href=""https://www.thoughtworks.com/radar/techniques/event-sourcing"">Event Sourced</a> approach. Getting the right people in the room is important - a blend of business and technical people who bring both the questions and the answers. Ensuring that you have enough wall space for modeling is the second key to success. Look to discover the big picture, with the goal of collectively understanding the domain in all of its complexity, before diving into solutions.</p>"
"2016-04",Flux,Techniques,Trial,"<p><a href=""https://facebook.github.io/flux/""><strong>Flux</strong></a> is an application architecture introduced by Facebook. Usually mentioned in conjunction with <strong>React.js</strong> , Flux is based on a one-way flow of data up through the rendering pipeline. Flux embraces the modern web landscape of client-side JavaScript applications in a way that avoids the venerable MV* clichés. ThoughtWorks teams are now starting to gain some experience with this architectural style and find that it meshes well with service orientation and solves some of the problems inherent in two-way data binding.</p>"
"2016-04",Idempotency filter,Techniques,Trial,"<p>Many services, especially legacy services, are written with the assumption that any request will occur only once. Networks being what they are, this can be difficult to arrange. An <strong>idempotency filter</strong> is a simple component that merely checks for duplicate requests and ensures that they are sent to the supplier service only once. Such a filter should do only this one task and be used as a decorator over existing service calls.</p>"
"2016-04",iFrames for sandboxing,Techniques,Trial,"<p>Modern web pages tend to contain a plethora of JavaScript widgets and snippets coming from a variety of third-party sources. This can have a negative impact on both security and performance. While we are still waiting for fuller JavaScript isolation with web components, our teams have benefited from using HTML5 <a href=""http://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/""><strong>iFrames for sandboxing</strong></a> untrusted JavaScript.</p>"
"2016-04",NPM for all the things,Techniques,Trial,"<p>The JavaScript world has a plethora of dependency and package-management tools, all of which rely on the Node Package Manager (NPM). Teams are starting to see these extra tools as redundant and are recommending that if you can use solely NPM for package and dependency management, you should. The simplification of using <strong>NPM for all the things</strong> helps reduce some of the churn in the JavaScript tools space.</p>"
"2016-11",Grasp,Tools,Assess,"<p>We had our collective minds blown by a little JavaScript command-line refactoring tool called <strong><a href=""http://www.graspjs.com/"">Grasp</a></strong>. Providing a rich set of selectors and operating against the abstract syntax tree, it is leagues ahead of fiddling with sed and grep. A useful addition to the toolkit in our ongoing quest to treat <a href=""/radar/languages-and-frameworks/javascript-as-a-first-class-language"">JavaScript as a first-class language</a>.</p>"
"2016-04",Phoenix Environments,Techniques,Trial,"<p>The time taken to provision and update environments continues to be a significant bottleneck on many software projects. Phoenix Environments can help with this delay by extending the idea of <a href=""http://martinfowler.com/bliki/PhoenixServer.html"">Phoenix Servers</a> to cover entire environments. We feel this is such a valuable and time-saving technique that you should consider trialing this approach. Using automation, we can create whole environments - including network configuration, load balancing and firewall ports - for example by using <a href=""https://aws.amazon.com/cloudformation/""><strong>CloudFormation</strong></a> in AWS. We can then prove that the process works by tearing the environments down and recreating them from scratch on a regular basis. <strong>Phoenix Environments</strong> can support provisioning new environments for testing, development, UAT and disaster recovery. As with Phoenix Servers, this pattern is not always applicable, and we need to think carefully about things like state and dependencies. Treating the whole environment as a <a href=""http://martinfowler.com/bliki/BlueGreenDeployment.html"">blue/green deployment</a> can be one approach when environment reconfiguration needs to be done.</p>"
"2016-04",QA in production,Techniques,Trial,"<p>Traditionally, QA roles have focused on assessing the quality of a software product in a pre-production environment. With the rise of Continuous Delivery, the QA role is shifting to include analyzing software product quality in production. This involves monitoring of the production systems, coming up with alert conditions to detect urgent errors, determining ongoing quality issues and figuring out what measurements you can use in the production environment to make this work. While there is a danger that some organizations will go too far and neglect pre-production QA, our experience shows that <strong>QA in production</strong> is a valuable tool for organizations that have already progressed to a reasonable degree of Continuous Delivery.</p>"
"2016-04",Reactive architectures,Techniques,Trial,""
"2016-04",Content Security Policies,Techniques,Assess,""
"2016-04",Hosted IDE's,Techniques,Assess,"<p>Many organizations want to leverage distributed or offshore development but have security concerns with their code and other intellectual property sitting outside their control. The result is often to use high-latency remote-desktop solutions for development, adhering to an organization’s security controls but crippling developer productivity. An alternative is to use a <strong>Hosted IDE</strong> delivered to a browser via VPN. The IDE, code and build environment are hosted within the organization's private cloud, easing security concerns, and the developer experience is significantly improved. Tools in this space include <a href=""https://orionhub.org/"">Orion</a> and <a href=""http://www.eclipse.org/che/"">Che</a> from the Eclipse Foundation, <a href=""https://c9.io/"">Cloud9</a> and <a href=""https://codenvy.com/"">Code Envy</a>.</p>"
"2016-04",Hosting PII data in the EU,Techniques,Assess,"<p>In a number of countries around the world, we see government agencies seeking broad access to private, personally identifiable information (PII). In the EU, the highest court has invalidated the Safe Harbor framework, and Privacy Shield, its successor, is expected to be challenged too. At the same time, the use of cloud computing is increasing, and all the major cloud providers—Amazon, Google and Microsoft—offer multiple data centers and regions within the European Union. Therefore, we recommend that companies, especially those with a global user base, assess the feasibility of a safe haven for their users' data, protected by the most progressive privacy laws, by <strong>Hosting PII in the EU</strong>.</p>"
"2016-04",Monitoring of invariants,Techniques,Assess,"<p>In monitoring, the common approach is to conceive of erroneous conditions and set alerts when these appear. But it’s often difficult to enumerate the myriad failure modes in a software system. <strong>Monitoring of invariants</strong> is a complementary approach to setting expected normal ranges, often by examining historical behavior, and alerting whenever a system goes outside those bounds.</p>"
"2016-04",OWASP ASVS,Techniques,Assess,""
"2016-04",Serverless architecture,Techniques,Assess,"<p><strong>Serverless architecture</strong> replaces long-running virtual machines with ephemeral compute power that comes into existence on request and disappears immediately after use. Examples include <a href=""https://www.firebase.com/"">Firebase</a> and <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a>. Use of this architecture can mitigate some security concerns such as security patching and SSH access control, and can make much more efficient use of compute resources. These systems cost very little to operate and can have inbuilt scaling features (this is especially true for AWS Lambda). An example architecture could be a JavaScript app with static assets served by a CDN or S3 coupled with AJAX calls served by the API Gateway and Lambda. While serverless architectures have significant benefits, there are drawbacks too: Deploying, managing and sharing code across services is more complex, and local or offline testing is more difficult if not impossible.</p>"
"2016-04",Unikernels,Techniques,Assess,""
"2016-04",VR beyond gaming,Techniques,Assess,""
"2016-04",A single CI instance for all teams,Techniques,Hold,""
"2016-04",Big Data envy,Techniques,Hold,"<p>While we've long understood the value of Big Data to better understand how people interact with us, we've noticed an alarming trend of <strong>Big Data envy</strong> : organizations using complex tools to handle ""not-really-that-big” Data. Distributed map-reduce algorithms are a handy technique for large data sets, but many data sets we see could easily fit in a single-node relational or graph database. Even if you do have more data than that, usually the best thing to do is to first pick out the data you need, which can often then be processed on such a single node. So we urge that before you spin up your clusters, take a realistic assessment of what you need to process, and if it fits—maybe in RAM—use the simple option.</p>"
"2016-04",Gitflow,Techniques,Hold,"<p>We firmly believe that long-lived version-control branches harm valuable engineering practices such as continuous integration, and this belief underlies our dislike for <strong>Gitflow</strong>. We love the flexibility of <a href=""https://git-scm.com"">Git</a> underneath but abhor tools that encourage bad engineering practices. Very short-lived branches hurt less, but most teams we see using Gitflow feel empowered to abuse its branch-heavy workflow, which encourages late integration (therefore discouraging true continuous integration).</p>"
"2016-04",High performance envy/web scale envy,Techniques,Hold,"<p>We see many teams run into trouble because they have chosen complex tools, frameworks or architectures because they ""might need to scale"". Companies such as Twitter and Netflix need to be able to support extreme loads and so need these architectures, but they also have extremely skilled development teams able to handle the complexity. Most situations do not require these kinds of engineering feats; teams should keep their <strong>web scale envy</strong> in check in favor of simpler solutions that still get the job done.</p>"
"2016-04",SAFe™,Techniques,Hold,"<p>The <a href=""http://www.scaledagileframework.com/"">Scaled Agile Framework®</a> (aka <strong>SAFe™</strong> ) continues to gain mindshare in many organizations at scale. In addition, tools and certification are becoming a significant aspect of the adoption of SAFe™. We continue to be concerned that actual adoptions are prone to over-standardization and are tending towards large release practices, resulting in practices that hinder agile adoption. In its place, we continue to recommend lean approaches that include experimentation and incorporate continuous improvement practices like the Improvement Katas offer organizations a better model for scaling agile.</p><p>Scaled Agile Framework® and SAFe™ are trademarks of Scaled Agile, Inc.</p>"
"2016-04",Docker,Platforms,Adopt,""
"2016-04",TOTP Two-Factor Authentication,Platforms,Adopt,"<p>Password security is still a hotly debated topic with the <a href=""https://www.gov.uk/government/publications/password-policy-simplifying-your-approach/password-policy-executive-summary"">UK government advocating technical controls</a> that let users remember simpler passwords and <a href=""https://www.youtube.com/watch?v=yzGzB-yYKcc"">Edward Snowden’s password advice</a> being described as only ""<a href=""http://www.wired.com/2015/04/snowden-sexy-margaret-thatcher-password-isnt-so-sexy/"">borderline secure</a>"". Passwords are generally one of the weakest links in the security chain, so we recommend employing <strong>two-factor authentication</strong> , which can significantly improve security. <a href=""http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm"">Time-based One-Time Password</a> ( <strong>TOTP</strong> ) is the standard algorithm in this space, with straightforward server-side implementations and free smartphone authenticator apps from <a href=""https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2"">Google</a> and <a href=""http://www.windowsphone.com/en-us/store/app/authenticator/e7994dbc-2336-4950-91ba-ca22d653759b"">Microsoft</a>.</p>"
"2016-04",Apache Mesos,Platforms,Trial,"<p><strong><a href=""http://mesos.apache.org/"">Mesos</a></strong> is a platform that abstracts out underlying computing resources to make it easier to build massively scalable distributed systems. It can be used to provide a scheduling layer for <a href=""https://www.docker.com/"">Docker</a>, or to act as an abstraction layer to things like AWS. Twitter has used it to great effect to help it scale its infrastructure. Tools built on top of Mesos are starting to appear, such as <a href=""http://nerds.airbnb.com/introducing-chronos/"">Chronos</a>, which is a distributed, fault-tolerant cron replacement. Prominent success stories are appearing, such as <a href=""https://mesosphere.com/blog/2015/04/23/apple-details-j-a-r-v-i-s-the-mesos-framework-that-runs-siri/"">Apple's Siri</a> rearchitecting to use Mesos.</p>"
"2016-04",AWS Lambda,Platforms,Trial,"<p>Our teams continue to enjoy using <strong><a href=""https://aws.amazon.com/lambda/"">AWS Lambda</a></strong> and are beginning to use it to experiment with <a href=""/radar/techniques/serverless-architecture"">Serverless architectures</a>, combining Lambda with the <a href=""https://aws.amazon.com/api-gateway/"">API Gateway</a> to produce highly scalable systems with invisible infrastructure. We have run into significant problems using Java for Lambda functions, with erratic latencies up to several seconds as the Lambda container is started. We recommend sticking with JavaScript or Python for the time being.</p>"
"2016-04",H2O,Platforms,Trial,"<p>Predictive analytics are used in more and more products, often directly in end user-facing functionality. <a href=""http://h2o.ai/""><strong>H2O</strong></a> is an interesting open source package (with a startup behind it) that makes predictive analytics accessible to development teams, offering straightforward use of a wide variety of analytics, great performance and easy integration on JVM-based platforms. At the same time it integrates with the data scientists’ favorite tools, R and Python, as well as Hadoop and Spark.</p>"
"2016-04",HSTS,Platforms,Trial,"<p><a href=""https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"">HTTP Strict Transport Security</a> ( <strong>HSTS</strong> ) is a now widely supported policy that allows websites to protect themselves from downgrade attacks. A downgrade attack in the context of HTTPS is one that can cause users of your site to fall back to HTTP rather than HTTPS, allowing for further attacks such as man-in-the-middle attacks. By using the server header, you inform browsers that they should only use HTTPS to access your website, and should ignore downgrade attempts to contact the site via HTTP. Browser support is now widespread enough that this easy-to-implement feature should be considered for any site using HTTPS.</p>"
"2016-04",Kubernetes,Platforms,Trial,""
"2016-04",Linux security modules,Platforms,Trial,"<p>In earlier versions of the Radar, we have highlighted the value of <strong>Linux security modules</strong> , talking about how they enable people to think about server hardening as a part of their development workflow. More recently, with <a href=""https://linuxcontainers.org/"">LXC</a> and <a href=""/radar/platforms/docker"">Docker</a> containers now shipping with default <a href=""https://wiki.ubuntu.com/AppArmor"">AppArmor</a> profiles on certain Linux distributions, it has forced the hand of many teams to understand how these tools work. In the event that teams use container images to run any process that they did not themselves create, these tools help them assess questions about who has access to what resources on the shared host and the capabilities that these contained services have, and be conservative in managing levels of access.</p>"
"2016-04",Pivotal Cloud Foundry,Platforms,Trial,""
"2016-04",Rancher,Platforms,Trial,""
"2016-04",Amazon API Gateway,Platforms,Assess,"<p><a href=""https://aws.amazon.com/api-gateway/""><strong>Amazon API Gateway</strong></a> is Amazon's offering enabling developers to expose API services to Internet clients, offering the usual API gateway features like traffic management, monitoring, authentication and authorization. Our teams have been using this service to front other AWS capabilities like AWS Lambda as part of <a href=""/radar/techniques/serverless-architecture"">serverless architectures</a>. We continue to monitor for the challenges presented by <a href=""/radar/platforms/overambitious-api-gateways"">overambitious API gateways</a>, but at this stage Amazon's offering appears to be lightweight enough to avoid those problems.</p>"
"2016-04",AWS ECS,Platforms,Assess,"<p>The <strong><a href=""http://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html"">Elastic Container Service (ECS)</a></strong> is AWS’ entry into the multihost Docker space. Although there is a lot of competition in this area, there aren’t many off-premises managed solutions out there yet. Although ECS seems like a good first step, we are worried that it is overly complicated at the moment and lacks a good abstraction layer. If you want to run <a href=""https://www.docker.com/"">Docker</a> on AWS, though, this tool should certainly be high on your list. Just don’t expect it to be easy to get started with.</p>"
"2016-04",Bluetooth Mesh,Platforms,Assess,"<p>While many deployments of smart devices rely on Wi-Fi connectivity, we have been seeing success with <strong>Bluetooth Mesh</strong> networks that don't necessitate a hub or gateway. With better energy usage than Wi-Fi and better smartphone adoption than ZigBee, Bluetooth LE deployed as a self-healing mesh provides interesting new approaches for connecting local device-area networks. We are still waiting for the formal approach to emerge from the Bluetooth SIG but have already had successful deployments. We particularly like the lack of infrastructure required to stand up a decentralized network but still retain the option to ""progressively enhance"" the system with the addition of a gateway and cloud services.</p>"
"2016-04",Ceph,Platforms,Assess,"<p><strong><a href=""http://ceph.com/"">Ceph</a></strong> is a storage platform that can be used as object storage, as block storage, and as a file system, typically running on a cluster of commodity servers. With its first major release having been in July 2012, Ceph is certainly not a new product. We do want to highlight it on this Technology Radar as an important building block for private clouds. It is particularly attractive because its RADOS Gateway component can expose the object store through a RESTful interface that is compatible with <a href=""https://aws.amazon.com/s3/"">Amazon S3</a> and the <a href=""https://wiki.openstack.org/wiki/Swift"">OpenStack Swift APIs</a>.</p>"
"2016-04",Deflect,Platforms,Assess,"<p><a href=""https://deflect.ca/""><strong>Deflect</strong></a> is an open source service protecting NGOs, activist and independent media companies from DDoS attacks. Similar to a commercial CDN, it uses distributed reverse-proxy caching and also hides your server IP addresses and blocks public access to admin URLs. Particular effort is put in to combat the botnets typically used for extrajudicial censoring of independent voices.</p>"
"2016-04",ESP8266,Platforms,Assess,"<p>Our growing ranks of hardware hackers have been excited by the <strong><a href=""http://esp8266.net/"">ESP8266</a></strong> Wi-Fi microcontroller. Rather than a specific technology innovation, it is the combination of low price point and small form factor that has sparked an inflection point in people's thinking about what is now feasible to achieve with custom hardware devices. Its main characteristics are: Wi-Fi capabilities (it can act as station, access point or a combination of both), low power, open hardware, Arduino SDK programmability, Lua programmability, huge community support and low cost compared with other IoT modules.</p>"
"2016-04",MemSQL,Platforms,Assess,"<p>As Moore's Law predicts, we continue to increase the capacity of computer systems and reduce their cost, and so new processing techniques become possible that only a few years ago would have seemed out of reach. One of these techniques is the in-memory database: Instead of using slow disks or relatively slow SSDs to store data, we can keep it in memory for high performance. One such in-memory database, <a href=""http://www.memsql.com/""><strong>MemSQL</strong></a>, is making waves because it is horizontally scalable across a cluster and provides a familiar SQL-based query language. MemSQL also connects to Spark for analytics against real-time data, rather than stale data in a warehouse.</p>"
"2016-04",Mesosphere DCOS,Platforms,Assess,"<p><strong><a href=""https://mesosphere.com/product/"">Mesosphere DCOS</a></strong> is a platform built on top of <a href=""http://mesos.apache.org/"">Mesos</a>. It provides an abstraction over underling machines, giving you a pool of storage and compute that allows services built for DCOS to operate at massive scale (Support is already there for Hadoop, Spark and Cassandra, among others). This is probably overkill for more modest workloads at the moment (where plain old Mesos could still be a good fit), but it will be interesting to see if Mesosphere starts trying to position DCOS as a general-purpose system.</p>"
"2016-04",Nomad,Platforms,Assess,""
"2016-04",Presto,Platforms,Assess,"<p><strong><a href=""https://prestodb.io/"">Presto</a></strong> is an open source distributed SQL query engine designed and optimized for running interactive analytics workloads. Presto's massively parallel processing architecture - combined with advanced code-generation techniques and in-memory processing pipelines - makes it highly scalable. It supports a large subset of ANSI SQL including complex queries, joins, aggregations and window functions. Presto comes with support for a wide range of data sources including <strong>Hive</strong> , <strong>Cassandra</strong> , <strong>MySQL</strong> and <strong>PostgreSQL</strong> , thereby unifying the interactive analytics interface across data stores of an organization. Applications can connect to Presto using its JDBC interface.</p>"
"2016-04",Realm,Platforms,Assess,"<p><strong><a href=""https://realm.io/"">Realm</a></strong> is a database designed for use on mobile devices, with its own persistence engine to achieve high performance. Realm is marketed as a replacement for SQLite and Core Data, and our teams have enjoyed using it. Note that migrations are not quite as straightforward as the Realm documentation would have you believe. Still, Realm has us excited, and we suggest you take a look.</p>"
"2016-04",Sandstorm,Platforms,Assess,"<p>For people who want the benefit of cloud-based collaboration tools but don't want to inadvertently ""become the product"" of a major cloud provider, <a href=""https://sandstorm.io/""><strong>Sandstorm</strong></a> provides an interesting open source alternative with the potential for self-hosting. Of particular interest is the isolation approach, whereby containerization is applied per document rather than per application, and syscall whitelisting is added to further <a href=""http://docs.sandstorm.io/en/latest/using/security-practices/#server-sandboxing"">secure the sandbox</a>.</p>"
"2016-04",TensorFlow,Platforms,Assess,""
"2016-04",Application Servers,Platforms,Hold,"<p>The rise of containers, phoenix servers and continuous delivery has seen a move away from the usual approach to deploying web applications. Traditionally we have built an artifact and then installed that artifact into an application server. The result was long feedback loops for changes, increased build times and the not insignificant overhead of managing these application servers in production. Many of them are a pain to automate too. Most teams we work with favor bundling an embedded http server within your web application. There are plenty of options available: Jetty, SimpleWeb, Webbit and Owin Self-Host amongst others. Easier automation, easier deployment and a reduction in the amount of infrastructure you have to manage lead us to recommend embedded servers over <strong>application servers</strong> for future projects.</p>"
"2016-04",Over-ambitious API Gateways,Platforms,Hold,"<p>One of our common complaints is the pushing of business smarts into middleware, resulting in application servers and enterprise service buses with ambitions to run critical application logic. These require complex programming in environments not well suited to the purpose. We're seeing a worrying re-emergence of this disease with <strong>overambitious API Gateway</strong> products. API Gateways can provide utility in dealing with some generic concerns - for example, authentication and rate-limiting - but any domain smarts such as data transformation or rule processing should live in applications or services where they can be controlled by product teams working closely with the domains they support.</p>"
"2016-04",SysDig,Tools,Trial,"<p>Although <strong><a href=""http://www.sysdig.org/"">SysDig</a></strong> isn’t the newest tool on the Technology Radar, we’re still surprised by how many people haven’t heard of it. A pluggable open source CLI for Linux system troubleshooting, SysDig has some pretty powerful features. One of the key things we like is the ability to generate a system trace on a machine that is experiencing difficulties, which you can then interrogate afterward to find out what was happening. SysDig also contains support for working with containers, something that makes a previously useful tool even more powerful.</p>"
"2016-04",Webpack,Tools,Trial,""
"2016-04",Zipkin,Tools,Trial,""
"2016-04",Apache Flink,Tools,Assess,"<p><strong><a href=""http://flink.apache.org/"">Apache Flink</a></strong> is a new-generation platform for scalable distributed batch and stream processing. At its core is a streaming data-flow engine. It also supports tabular (SQL-like), graph-processing and machine-learning operations. Apache Flink stands out with feature-rich capabilities for stream processing: event time, rich streaming window operations, fault tolerance and exactly-once semantics. While it hasn't reached version 1.0, it has raised significant community interest due to innovations in stream processing, memory handling, state management and simplicity of configuration.</p>"
"2016-04",Concourse CI,Tools,Assess,"<p>Many development teams are making the move from simple continuous integration servers to Continuous Delivery pipelines, often spanning multiple environments, reaching into production. To implement such a pipeline successfully and operate it in a sustainable way requires a CI/CD tool that treats build pipelines and artifacts as first-class citizens; and unfortunately there aren’t many. <a href=""http://concourse.ci/""><strong>Concourse CI</strong></a> is a promising new entrant in this field, and our teams that have tried it are excited about its setup, which enables builds that run in containers, has a clean, usable UI and discourages snowflake build servers.</p>"
"2016-04",Gitrob,Tools,Assess,"<p>Attackers continue to use automated software to crawl public GitHub repositories to find AWS credentials and spin up EC2 instances to mine Bitcoins or for other nefarious purposes. Although adoption of tools like <a href=""https://github.com/AGWA/git-crypt"">git-crypt</a> and <a href=""/radar/tools/blackbox"">Blackbox</a> to safely store secrets such as passwords and access tokens in code repositories is increasing, it is still all too common that secrets are stored unprotected. It is also not uncommon to see project secrets accidentally checked in to developers' personal repositories. <a href=""https://github.com/michenriksen/gitrob""><strong>Gitrob</strong></a> can help minimize the damage of exposing secrets. It scans an organization's GitHub repositories, flagging all files that might contain sensitive information that shouldn't have been pushed to the repository. The current release of the tool has some limitations: It can only be used to scan public GitHub organizations and their members, it doesn't inspect the contents of files, it doesn't review the entire commit history, and it fully scans all repositories each time it is run. Despite these limitations, it can be a helpful reactive tool to help alert teams before it is too late. It should be considered a complementary approach to a proactive tool such as <a href=""https://github.com/thoughtworks/talisman"">Talisman</a>.</p>"
"2016-04",Grasp,Tools,Assess,""
"2016-04",HashiCorp Vault,Tools,Assess,"<p>Having a way to securely manage secrets is increasingly becoming a huge project issue. The old idea of just having a file with secrets or environment variables is becoming hard to manage, especially in environments with multiple applications like <a href=""/radar/techniques/microservices"">microservices</a> or microcontainer environments, where the applications need to access a multitude of secrets. <a href=""https://github.com/hashicorp/vault""><strong>HashiCorp Vault</strong></a> is a promising tool that tries to solve the problem by providing mechanisms for securely accessing secrets through an unified interface. It has some features that make life easier, such as encryption and automatically generating secrets for known tools, among others.</p>"
"2016-04",ievms,Tools,Assess,"<p>Despite the shrinking usage of Internet Explorer, for many products the IE user base is not an insignificant share of the market, and browser compatibility needs to be tested. This is particularly troublesome if you prefer the joys of a UNIX-based system for development. To aid in this dilemma, <a href=""https://github.com/xdissent/ievms""><strong>ievms</strong></a> provides a utility script that brings together Windows-distributed VM images and VirtualBox to automate the setup and testability of various IE versions, from 6 up to Edge.</p>"
"2016-04",Jepsen,Tools,Assess,"<p>With the growth in usage of NoSQL data stores, and the growth in popularity of polyglot approaches to persistence, teams now have many choices when it comes to storing their data. While this has brought many advantages, product behavior with flaky networks can introduce subtle (and not so subtle) issues that are often not well understood, even in some cases by the product developers themselves. The <a href=""https://github.com/aphyr/jepsen""><strong>Jepsen</strong></a> toolkit and accompanying <a href=""https://aphyr.com/tags/Jepsen"">blog</a> have become the de-facto reference for anyone looking to understand how different database and queuing technologies react under adverse conditions. Crucially, the approach to testing, which includes clients in the transactions, shines a spotlight on possible failure modes for many teams building microservices.</p>"
"2016-04",LambdaCD,Tools,Assess,""
"2016-04",Pinpoint,Tools,Assess,""
"2016-04",Pitest,Tools,Assess,""
"2016-04",Prometheus,Tools,Assess,"<p>SoundCloud has recently open sourced its monitoring and alerting toolkit, <a href=""http://prometheus.io/""><strong>Prometheus</strong></a>. Developed in reaction to difficulties with <a href=""http://graphite.readthedocs.org/"">Graphite</a> in its production systems, Prometheus primarily supports a pull-based HTTP model (although a more Graphite-like push model is also supported). It also goes further by supporting alerts, making it an active part of your operational toolset. As of this writing, Prometheus is still only in release 0.15.1 but is evolving rapidly. We’re glad to see the recent product focus on core time-series DB and multidimensional indexing capabilities while allowing for export to a wider variety of front-end graphing tools.</p>"
"2016-04",RAML,Tools,Assess,"<p>With a growing landscape of services providing RESTful APIs, it is becoming increasingly important to document them. We have previously mentioned <a href=""https://www.thoughtworks.com/radar/tools/swagger"">Swagger</a>, and in this Technology Radar we’d like to highlight the RESTful API modeling language (<a href=""http://raml.org/""><strong>RAML</strong></a>). Our teams feel that in comparison to Swagger it is more lightweight and moves the focus from adding documentation to existing APIs to designing APIs.</p>"
"2016-04",Repsheet,Tools,Assess,""
"2016-04",Sleepy Puppy,Tools,Assess,"<p><strong><a href=""https://github.com/Netflix/sleepy-puppy"">Sleepy Puppy</a></strong> is a delayed cross-site scripting (XSS) payload-management framework recently open sourced by Netflix. It enables you to test vulnerabilities for XSS past the target application when the perpetrator intends to attack a secondary underlying system. With XSS being one of the OWASP Top10, we see this framework assisting with automated security checks for several applications. It simplifies the capturing, managing and tracking of XSS propagation over long periods of time, with customizable payloads. Sleepy puppy also exposes an API that can be integrated with vulnerability tools like <a href=""https://www.thoughtworks.com/radar/tools/zap"">ZAP</a>, for automated security checks.</p>"
"2016-04",Jenkins as a deployment pipeline,Tools,Hold,""
"2016-04",ES6,languages-and-frameworks,Adopt,"<p>Over many years, JavaScript has grown to become probably the most widely used programming language in the world. Nevertheless, the language itself has a few problems that many have attempted to address by using libraries or even by implementing their own languages that run on top of JavaScript (of which we’ve mentioned both <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/coffeescript"">CoffeeScript</a> and <a href=""https://www.thoughtworks.com/radar/languages-and-frameworks/clojurescript"">ClojureScript</a> before). <strong><a href=""http://es6-features.org/"">ES6</a></strong> (aka ECMAScript 6 or ECMAScript 2015), the new version of JavaScript, addresses many of the concerns of the older versions currently in use. Although browser support is scarce, support from mature transpilers like <a href=""http://babeljs.io"">Babel</a> allows you to write ES6 and have it supported in older browsers. For new projects, we strongly suggest starting with ES6 from day one.</p>"
"2016-04",React.js,languages-and-frameworks,Adopt,""
"2016-04",Spring Boot,languages-and-frameworks,Adopt,""
"2016-04",Swift,languages-and-frameworks,Adopt,"<p><a href=""https://developer.apple.com/swift/""><strong>Swift</strong></a> is now our default choice for development in the Apple ecosystem. With the release of Swift 2, the language approached a level of maturity that provides the stability and performance required for most projects. A good number of libraries that support iOS development—<a href=""https://github.com/SwiftyJSON/SwiftyJSON"">SwiftyJSON</a>, <a href=""https://github.com/Quick/Quick"">Quick</a>, etc.—are now migrated over to Swift, which is where the rest of the applications should follow. Swift has now been open sourced, and we are seeing a community of developers dedicated to continuously improving development in iOS.</p>"
"2016-04",Butterknife,languages-and-frameworks,Trial,""
"2016-04",Dagger,languages-and-frameworks,Trial,""
"2016-04",Dapper,languages-and-frameworks,Trial,""
"2016-04",Ember.js,languages-and-frameworks,Trial,"<p><a href=""http://emberjs.com/""><strong>Ember.js</strong></a> has developed further support based on project experiences and is clearly a strong contender in the field of JavaScript application frameworks. Ember is praised for its developer experience, with far fewer surprises than other frameworks such as <a href=""/radar/languages-and-frameworks/angularjs"">AngularJS</a>. The Ember CLI build tooling, convention-over-configuration approach and <a href=""/radar/languages-and-frameworks/es6"">ES6</a> support also gain positive feedback.</p>"
"2016-04",Enlive,languages-and-frameworks,Trial,"<p>Most templating frameworks like <a href=""https://mustache.github.io/"">Mustache</a> or <a href=""http://freemarker.org/"">FreeMarker</a> mix code with markup in a single file to implement complex, dynamic content. <a href=""https://github.com/cgrand/enlive/wiki""><strong>Enlive</strong></a> is a Clojure-based templating framework that completely separates programming language from HTML markup and employs CSS selectors to find and replace parts of the document. Enlive demonstrates the power of functional programming to implement complex behavior through a series of simple, composable functions acting on a common abstraction. Our teams working in Clojure have found it to be a very useful and straightforward tool.</p>"
"2016-04",Fetch,languages-and-frameworks,Trial,"<p>Our teams are moving away from JQuery or raw XHR for remote JavaScript calls and instead are using the new <a href=""https://fetch.spec.whatwg.org/"">Fetch</a> API and the <strong><a href=""https://github.com/github/fetch"">Fetch</a></strong> polyfill in particular. The semantics remain similar but have cleaner support for promises and CORS support. We are seeing this as the new de-facto approach.</p>"
"2016-04",React Native,languages-and-frameworks,Trial,""
"2016-04",Redux,languages-and-frameworks,Trial,"<p><a href=""http://redux.js.org/""><strong>Redux</strong></a> is a great, mature tool that has helped many of our teams reframe how they think about managing state in client-side apps. Using a <a href=""/radar/techniques/flux"">Flux</a>-style approach, it enables a loosely coupled state-machine architecture that's easy to reason about. We've found it a good companion to some of our favored JavaScript frameworks, such as <a href=""/radar/languages-and-frameworks/ember-js"">Ember</a> and <a href=""/radar/languages-and-frameworks/react-js"">React</a>.</p>"
"2016-04",Robolectric,languages-and-frameworks,Trial,""
"2016-04",SignalR,languages-and-frameworks,Trial,"<p>We have a number of reservations about the use of HTML5 WebSockets. By allowing the server to initiate actions on the browser, WebSockets departs from the connectionless, request/response model that underpins the World Wide Web today. Security is another big risk with WebSockets. For example, the standard does not impose any cross-origin request policy. However, we do recognize that in certain monitoring or alerting applications, WebSockets can be very useful. If you need to build a .NET WebSockets server, <a href=""http://signalr.net/""><strong>SignalR</strong></a> conveniently implements much of the additional code you need for a robust production application. This includes some recommended security practices such as validating connection tokens and activating SSL when encryption is needed. Although ThoughtWorks teams have been very happy with SignalR, there are still fundamental issues with WebSockets that you should consider before diving in.</p>"
"2016-04",Alamofire,languages-and-frameworks,Assess,"<p>Networking and decoding in iOS applications have been a difficult endeavor for many years. There have been many libraries and attempts to solve this ongoing problem. It looks as though <a href=""https://github.com/Alamofire/Alamofire""><strong>Alamofire</strong></a> is the most robust and developer-friendly library to handle decoding JSON. It was written by the same creator as its Objective-C counterpart (AFNetworking), which was used at great length during the Objective-C days.</p>"
"2016-04",AngularJS,languages-and-frameworks,Assess,"<p>While we have delivered many successful projects using <a href=""https://angularjs.org/""><strong>AngularJS</strong></a> and are seeing an acceleration of adoption in corporate settings, we have decided to move Angular back to Assess on this edition of the Radar. This move is intended as a note of caution: <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> and <a href=""/radar/languages-and-frameworks/ember-js"">Ember</a> offer strong alternatives; the migration path from Angular version 1 to version 2 is causing uncertainty; and we see some organizations adopting the framework without really thinking through whether a single-page application fits their needs. We have passionate internal debates about this topic but have certainly seen codebases become overly complex from a combination of two-way binding and inconsistent state-management patterns. We believe that rather than requiring that a solid framework be jettisoned, these issues can be solved through careful design and use of Redux or Flux from the outset.</p>"
"2016-04",Aurelia,languages-and-frameworks,Assess,""
"2016-04",Cylon.js,languages-and-frameworks,Assess,"<p>The intersection between IoT devices and the JavaScript ecosystem offers interesting possibilities. <strong><a href=""https://cylonjs.com/"">Cylon.js</a></strong> is a JavaScript library for building interfaces for robotics and the Internet of Things, which has excited our technical community. It offers support for 50+ platform devices, as well as general-purpose input/output support with a shared set of drivers provided by the cylon-gpio module. Control of the devices is then possible through a web browser interface.</p>"
"2016-04",Elixir,languages-and-frameworks,Assess,"<p>We continue to see a lot of excitement from people using the <a href=""http://elixir-lang.org/""><strong>Elixir</strong></a> programming language. Elixir, which is built on top of the Erlang virtual machine, is showing promise for creating highly concurrent and fault-tolerant systems. Elixir has distinctive features such as the Pipe operator, which allows developers to build a pipeline of functions as you would in the UNIX command shell. The shared byte code allows Elixir to interoperate with Erlang and leverage existing libraries while supporting tools such as the Mix build tool, the Iex interactive shell and the ExUnit unit testing framework.</p>"
"2016-04",Elm,languages-and-frameworks,Assess,""
"2016-04",GraphQL,languages-and-frameworks,Assess,""
"2016-04",Immutable.js,languages-and-frameworks,Assess,"<p>Immutability is often emphasized in the functional programming paradigm, and most languages have the ability to create immutable objects, which cannot be changed once created. <strong><a href=""https://facebook.github.io/immutable-js/"">Immutable.js</a></strong> is a library for JavaScript that provides many persistent immutable data structures, which are highly efficient on modern JavaScript virtual machines. Immutable.js objects are, however, not normal JavaScript objects, so references to JavaScript objects from immutable objects should be avoided. Our teams have had value using this library for tracking mutation and maintaining state, and it is a library we encourage developers to investigate, especially when it's combined with the rest of the Facebook stack.</p>"
"2016-04",OkHttp,languages-and-frameworks,Assess,"<p><strong><a href=""http://square.github.io/okhttp/"">OkHttp</a></strong> is a Java HTTP connection library from Square that provides a fluent interface for creating connections, as well as support for the faster HTTP/2 protocol. Even when using HTTP/1.1, OkHttp can provide performance improvements via connection pooling and transparent gzip compression. Supporting both blocking synchronous and nonblocking asynchronous calls, it can also be used as a drop-in replacement for the widely used Apache HttpClient.</p>"
"2016-04",Recharts,languages-and-frameworks,Assess,""
"2016-04",JSPatch,languages-and-frameworks,Hold,""
"2016-11",Consumer-driven contract testing,Techniques,Adopt,"<p>We’ve decided to bring <strong>consumer-driven contract testing</strong> back from the archive for this edition even though we had allowed it to fade in the past. The concept isn’t new, but with the mainstream acceptance of microservices, we need to remind people that <a href=""http://www.martinfowler.com/articles/consumerDrivenContracts.html"">consumer-driven contracts</a> are an essential part of a mature <a href=""http://martinfowler.com/articles/microservice-testing/"">microservice testing</a> portfolio, enabling independent service deployments. But in addition, we want to point out that consumer-driven contract testing is a technique and an attitude that requires no special tool to implement. We love frameworks like <a href=""https://github.com/realestate-com-au/pact"">Pact</a> because they make proper contract tests easier to implement in certain contexts. But we have noticed a tendency for teams to focus on the framework rather than on the general practice. Writing Pact tests is not a guarantee that you are creating consumer-driven contracts; likewise, in many situations you should be creating good consumer-driven contracts even where no pre-built testing tool exists.</p>"
"2016-11",Pipelines as code,Techniques,Adopt,"<p>Teams are pushing for automation across their environments, including their development infrastructure. <strong>Pipelines as code</strong> is defining the deployment pipeline through code instead of configuring a running CI/CD tool. <a href=""/radar/tools/lambdacd"">LambdaCD</a>, <a href=""http://readme.drone.io/usage/overview/"">Drone</a>, <a href=""/radar/tools/gocd"">GoCD</a> and <a href=""/radar/tools/concourse-ci"">Concourse</a> are examples that allow usage of this technique. Also, configuration automation tools for CI/CD systems like <a href=""https://github.com/SpringerSBM/gomatic"">GoMatic</a> can be used to treat the deployment pipeline as code—versioned and tested.</p>"
"2016-11",Threat Modeling,Techniques,Adopt,"<p>With the number of high-profile security breaches in the past months, software development teams no longer need convincing that they must place an emphasis on writing secure software and dealing with their users' data in a responsible way. The teams face a steep learning curve, though, and the vast number of potential threats—ranging from organized crime and government spying to teenagers who attack systems ""for the lulz""—can be overwhelming. <a href=""https://www.owasp.org/index.php/Category:Threat_Modeling""><strong>Threat Modeling</strong></a> provides a set of techniques that help you identify and classify potential threats early in the development process. It is important to understand that it is only part of a strategy to stay ahead of threats. When used in conjunction with techniques such as establishing cross-functional security requirements to address common risks in the technologies a project uses and using automated security scanners, threat modeling can be a powerful asset.</p>"
"2018-11",Codefresh,Tools,Assess,"<p><a href=""https://codefresh.io/""><strong>Codefresh</strong></a> is a hosted CI server similar to <a href=""/radar/tools/circleci"">CircleCI</a> or <a href=""/radar/tools/buildkite"">Buildkite</a>. It's container-centric, making Dockerfiles and container-hosting clusters first-class entities. We like that the tool encourages a pipelined delivery approach and supports branching and merging. Early reports from our teams are positive, but we've yet to see how it works for larger projects and complex pipelines.</p>"
"2016-11",APIs as a product,Techniques,Trial,"<p>Businesses have wholeheartedly embraced APIs as a way to expose business capabilities to both external and internal developers. APIs promise the ability to experiment quickly with new business ideas by recombining core capabilities. But what differentiates an API from an ordinary enterprise integration service? One difference lies in treating <strong>APIs as a product</strong> , even when the consumer is an internal system. Teams that build APIs should understand the needs of their customers and make the product compelling to them. Products are also improved, maintained and supported over the long term. They should have an owner who advocates for the customer and strives for continual improvement. Products are actively maintained and supported, easy to find and easy to use. In our experience, a product orientation is the missing ingredient that makes the difference between ordinary enterprise integration and an agile business built on a platform of APIs.</p>"
"2016-11",Bug bounties,Techniques,Trial,"<p>The use of <strong>bug bounties</strong> continues to grow in popularity for many organizations, including enterprises and notable government bodies. A bug-bounty program encourages participants to identify potentially damaging vulnerabilities in return for reward or recognition. Companies like <a href=""https://hackerone.com/"">HackerOne</a> and <a href=""https://bugcrowd.com/"">Bugcrowd</a> offer services to help organizations manage this process more easily, and we're seeing these services gather adoption.</p>"
"2016-11",Data Lake,Techniques,Trial,"<p>A <strong><a href=""http://martinfowler.com/bliki/DataLake.html"">Data Lake</a></strong> is an immutable data store of largely unprocessed ""raw"" data, acting as a source for data analytics. While the technique can clearly be misused, we have used it successfully at clients, hence motivating its move to trial. We continue to recommend other approaches for operational collaborations, limiting the use of the data lake to reporting, analytics and feeding data into data marts.</p>"
"2016-11",Hosting PII data in the EU,Techniques,Trial,"<p>In a number of countries, we see government agencies seeking broad access to private, personally identifiable information (PII). The increased use of public cloud solutions makes it more difficult for organizations to protect the data entrusted to them by their users while also respecting all relevant laws. The European Union has some of the most progressive privacy laws, and all the major cloud providers—Amazon, Google and Microsoft—offer multiple data centers and regions within the European Union. Therefore, we recommend that companies, especially those with a global user base, assess the feasibility of a safe haven for their users' data by <strong>hosting PII data in the EU</strong>. Since we wrote about this technique in the last Radar, we have rolled out a new internal system that handles sensitive information relating to all our employees, and we have chosen to host it in a data center located in the European Union.</p>"
"2016-11",Lightweight Architecture Decision Records,Techniques,Trial,"<p>Although much documentation can be replaced with highly readable code and tests, in a world of <a href=""/radar/techniques/evolutionary-architecture"">evolutionary architecture</a> it's important to record certain design decisions for the benefit of future team members and for external oversight. <strong>Lightweight Architecture Decision Records</strong> is <a href=""http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"">a technique</a> for capturing important architectural decisions along with their context and consequences. Although these items are often stored in a wiki or collaboration tool, we generally prefer <a href=""https://github.com/npryce/adr-tools"">storing them in source control</a> with simple markup.</p>"
"2016-11",Reactive architectures,Techniques,Trial,"<p>We see continued adoption and success of <strong>reactive architectures</strong> , with reactive language extensions and reactive frameworks being very popular (we added several such blips in this edition of the Radar). User interfaces, in particular, benefit greatly from a reactive style of programming. Our caveats last time still hold true: Architectures based on asynchronous message passing introduce complexity and make the overall system harder to understand—it's no longer possible to simply read the program code and understand what the system does. We recommend assessing the performance and scalability needs of your system before committing to this architectural style.</p>"
"2016-11",Serverless architecture,Techniques,Trial,"<p><a href=""http://www.martinfowler.com/articles/serverless.html""><strong>Serverless architecture</strong></a> is an approach that replaces long-running virtual machines with ephemeral compute power that comes into existence on request and disappears immediately after use. Since the last Radar, we have had several teams put applications into production using a ""serverless"" style. Our teams like the approach, it’s working well for them and we consider it a valid architectural choice. Note that serverless doesn’t have to be an all-or-nothing approach: some of our teams have deployed a new chunk of their systems using serverless while sticking to a traditional architectural approach for other pieces.</p>"
"2016-11",Client-directed query,Techniques,Assess,"<p>Although many problems that people encounter with RESTful approaches to APIs can be attributed to the <a href=""/radar/techniques/anemic-rest"">anemic REST</a> antipattern, some use cases warrant exploration of other approaches. In particular, organizations that have to support a long tail of client applications (and thus a likely proliferation of API versions even if they employ <a href=""/radar/techniques/consumer-driven-contract-testing"">consumer-driven contracts</a>)—and have a large portion of their APIs supporting the endless-list style of activity feeds—may hit some limits in RESTful architectures. These can sometimes be mitigated by employing the <strong>client-directed query</strong> approach to client-server interaction. We see this approach being successfully used in both <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> and <a href=""https://github.com/Netflix/falcor"">Falcor</a>, where clients have more control over both the contents and the granularity of the data returned to them. This does put more responsibility onto the service layer and can still lead to tight coupling to the underlying data model, but the benefits may be worth exploring if well-modeled RESTful APIs aren’t working for you.</p>"
"2016-11",Container security scanning,Techniques,Assess,"<p>The container revolution instigated by <a href=""/radar/platforms/docker"">Docker</a> has massively reduced the friction in moving applications between environments but at the same time has blown a rather large hole in the traditional controls over what can go to production. The technique of <strong>container security scanning</strong> is a necessary response to this threat vector. Docker now provides its own <a href=""https://blog.docker.com/2016/05/docker-security-scanning/"">security scanning tools</a>, as does <a href=""https://coreos.com/blog/vulnerability-analysis-for-containers/"">CoreOS</a>, and we’ve also had success with the <a href=""https://benchmarks.cisecurity.org/"">CIS Security Benchmarks</a>. Whichever approach you take, we believe the topic of automated container security validation is of high value and a necessary part of PaaS thinking.</p>"
"2016-11",Content Security Policies,Techniques,Assess,"<p>We are finding <a href=""https://en.wikipedia.org/wiki/Content_Security_Policy""><strong>Content Security Policies</strong></a> to be a helpful addition to our security toolkit when dealing with websites that pull assets from mixed contexts. The policy defines a set of rules about where assets can come from (and whether to allow inline script tags). The browser then refuses to load or execute JavaScript, CSS or images that violate those rules. When used in conjunction with good practices, such as output encoding, it provides good mitigation for XSS attacks. Interestingly, the optional endpoint for posting JSON reports of violations is how Twitter discovered that ISPs were injecting HTML or JavaScript into their pages.</p>"
"2016-11",Differential privacy,Techniques,Assess,"<p>It has long been known that ""anonymized"" bulk data sets can reveal information about individuals, especially when multiple data sets are cross-referenced together. With <a href=""https://www.washingtonpost.com/news/the-switch/wp/2016/05/13/new-government-data-shows-a-staggering-number-of-americans-have-stopped-basic-online-activities/"">increasing concern over personal privacy</a>, some companies—including <a href=""https://www.wired.com/2016/06/apples-differential-privacy-collecting-data/"">Apple</a> and <a href=""http://research.google.com/pubs/pub42852.html"">Google</a>—are turning to <strong>differential privacy</strong> techniques in order to improve individual privacy while retaining the ability to perform useful analytics on large numbers of users. Differential privacy is a cryptographic technique that attempts to maximize the accuracy of statistical queries from a database while minimizing the chances of identifying its records. These results can be achieved by introducing a low amount of ""noise"" to the data, but it’s important to note that this is an ongoing research area. Apple has announced plans to incorporate differential privacy into its products—and we wholeheartedly applaud its commitment to customers' privacy—but the usual Apple secrecy has left some security experts <a href=""https://blog.cryptographyengineering.com/2016/06/15/what-is-differential-privacy/"">scratching their heads</a>. We continue to recommend <a href=""http://martinfowler.com/bliki/Datensparsamkeit.html"">Datensparsamkeit</a> as an alternative approach: simply storing the minimum data you actually need will achieve better privacy results in most cases.</p>"
"2016-11",Micro frontends,Techniques,Assess,"<p>We've seen significant benefit from introducing <a href=""/radar/techniques/microservices"">microservice architectures</a>, which have allowed teams to scale delivery of independently deployed and maintained services. However, teams have often struggled to avoid the creation of front-end monoliths—large and sprawling browser applications that are as difficult to maintain and evolve as the monolithic server-side applications we've abandoned. We're seeing an approach emerge that our teams call <strong>micro frontends</strong>. In this approach, a web application is broken up by its pages and features, with each feature being owned end-to-end by a single team. Multiple techniques exist to bring the application features—some old and some new—together as a cohesive user experience, but the goal remains to allow each feature to be developed, tested and deployed independently from others. The <a href=""/radar/techniques/bff-backend-for-frontends"">BFF - backend for frontends</a> approach works well here, with each team developing a BFF to support its set of application features.</p>"
"2016-11",OWASP ASVS,Techniques,Assess,"<p>As more development teams incorporate security earlier in the development life cycle, figuring out requirements to limit security risks can seem like a daunting task. Few people have the extensive technical knowledge needed to identify all the risks that an application might face, and teams might struggle just trying to decide where to begin. Relying on frameworks such as OWASP's <a href=""https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project""><strong>ASVS</strong></a> (Application Security Verification Standard) can help make this easier. Although somewhat lengthy, it contains a thorough list of requirements categorized by functions such as authentication, access control, and error handling and logging, which can be reviewed as needed. It is also helpful as a resource for testers when it comes time to verify software.</p>"
"2016-11",Unikernels,Techniques,Assess,"<p>With the continued rise to domination of the container model led by Docker adoption, we think it's worth calling attention to the continued rapid development in the <strong>Unikernel</strong> space. Unikernels are single-purpose library operating systems that can be compiled down from high-level languages to run directly on the hypervisors used by commodity cloud platforms. They promise a number of advantages over containers, not least their superfast startup time and very small attack surface area. Many are still at the research-project phase—<a href=""http://research.microsoft.com/en-us/projects/drawbridge/"">Drawbridge</a> from Microsoft Research, <a href=""https://mirage.io/"">MirageOS</a> and <a href=""http://galois.com/project/halvm/"">HaLVM</a> amongst others—but we think the ideas are very interesting and combine nicely with the technique of <a href=""/radar/techniques/serverless-architecture"">serverless architecture</a>.</p>"
"2016-11",VR beyond gaming,Techniques,Assess,"<p>The idea of virtual reality has been around for more than 50 years, and with successive improvements of computing technology many ideas have been hyped and explored. We believe that we're reaching a tipping point now. Modern graphics cards provide sufficient compute power to render detailed, realistic scenes in high resolutions, and at the same time at least two consumer-oriented VR headsets (the <a href=""http://www.htcvive.com/uk/"">HTC Vive</a> and Facebook's <a href=""https://www.oculus.com/en-us/"">Oculus Rift</a>) are coming to market. These headsets are affordable, they have high-resolution displays, and they eliminate perceivable motion-tracking lag, which was causing issues such as headaches and nausea before. The headsets are mainly targeted at enthusiast video gaming, but we are convinced that they will open many possibilities for <strong>VR beyond gaming</strong> , particularly as the low-fi approaches, such as <a href=""https://www.google.co.uk/get/cardboard/get-cardboard/"">Google Cardboard</a>, are driving greater awareness.</p>"
"2016-11",A single CI instance for all teams,Techniques,Hold,"<p>There might be the impression that it's easier to manage a <strong>single CI (Continuous Integration) instance for all teams</strong> because it gives them a single configuration and monitoring point. But a bloated instance that is shared by every team in an organization can cause a lot of damage. We have found that problems like build timeouts, configuration conflicts and gigantic build queues appear more frequently. Having this single point of failure can interrupt the work of many teams. Carefully consider the trade-off between these pitfalls and having a single point of configuration. In organizations with multiple teams, we recommend having CI instances distributed by teams, with enterprise decisions based not on the single CI installation but on defining guidelines about the instances' selection and configuration.</p>"
"2016-11",Anemic REST,Techniques,Hold,"<p>With the increasing popularity of the <a href=""/radar/techniques/bff-backend-for-frontends"">BFF - Backend for frontends</a> pattern and use of one-way data-binding frameworks like <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>, we’ve noticed a backlash against REST-style architectures. Critics accuse REST of causing chatty, inefficient interactions among systems and failing to adapt as client needs evolve. They offer frameworks such as <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> or <a href=""https://netflix.github.io/falcor/"">Falcor</a> as alternative data-fetch mechanisms that let the client specify the format of the data returned. But in our experience, it isn’t REST that causes these problems. Rather, they stem from a failure to properly model the domain as a set of resources. Naively developing services that simply expose static, hierarchical data models via templated URLs result in an <strong>anemic REST</strong> implementation. In a richly modeled domain, REST should enable more than simple repetitive data fetching. In a fully evolved RESTful architecture, business events and abstract concepts are also modeled as resources, and the implementation should make effective use of hypertext, link relations and media types to maximize decoupling between services. This antipattern is closely related to the <a href=""http://www.martinfowler.com/bliki/AnemicDomainModel.html"">Anemic Domain Model</a> pattern and results in services that rank low in <a href=""http://martinfowler.com/articles/richardsonMaturityModel.html"">Richardson Maturity Model</a>. We have more advice for designing effective REST APIs in our <a href=""https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"">Insights article</a>.</p>"
"2016-11",Big Data envy,Techniques,Hold,"<p>We continue to see organizations chasing ""cool"" technologies, taking on unnecessary complexity and risk when a simpler choice would be better. One particular theme is using distributed, Big Data systems for relatively small data sets. This behavior prompts us to put <strong>Big Data envy</strong> on hold once more, with some additional data points from our recent experience. The <a href=""http://cassandra.apache.org/"">Apache Cassandra</a> database promises massive scalability on commodity hardware, but we have seen teams overwhelmed by its architectural and operational complexity. Unless you have data volumes that require a 100+ node cluster, we recommend against using Cassandra. The operational team you’ll need to keep the thing running just isn’t worth it. While creating this edition of the Radar, we discussed several new database technologies, many offering ""10x"" performance improvements over existing systems. We’re always skeptical until new technology—especially something as critical as a database—has been properly proven. <a href=""/radar/tools/jepsen"">Jepsen</a> provides <a href=""http://jepsen.io/analyses.html"">analysis</a> of database performance under difficult conditions and has found <a href=""https://aphyr.com/posts/283-call-me-maybe-redis"">numerous</a> <a href=""https://aphyr.com/posts/284-call-me-maybe-mongodb"">bugs</a> in various NoSQL databases. We recommend maintaining a healthy dose of skepticism and keeping an eye on sites such as Jepsen when you evaluate database tech.</p>"
"2016-11",Cloud lift and shift,Techniques,Hold,"<p>As more organizations are choosing to deploy applications in the cloud, we're regularly finding IT groups that are wastefully trying to replicate their existing data center management and security approaches in the cloud. This often comes in the form of firewalls, load balancers, network proxies, access control, security appliances and services that are extended into the cloud with minimal rethinking. We've seen organizations build their own orchestration APIs in front of the cloud providers to constrain the services that can be utilized by teams. In most cases these layers serve only to cripple the capability, taking away most of the intended benefits of moving to the cloud. In this edition of the Radar, we've chosen to rehighlight <strong>cloud lift and shift</strong> as a technique to avoid. Organizations should instead look more deeply at the intent of their existing security and operational controls, and look for alternative controls that work in the cloud without creating unnecessary constraints. Many of those controls will already exist for mature cloud providers, and teams that adopt the cloud can use native APIs for self-serve provisioning and operations.</p>"
"2016-11",Docker,Platforms,Adopt,"<p>We remain excited about <a href=""https://www.docker.com/""><strong>Docker</strong></a> as it evolves from a tool to a complex platform of technologies. Development teams love Docker, as the Docker image format makes it easier to achieve parity between development and production, making for reliable deployments. It is a natural fit in a microservices-style application as a packaging mechanism for self-contained services. On the operational front, Docker support in monitoring tools (<a href=""/radar/tools/sensu"">Sensu</a>, <a href=""/radar/tools/prometheus"">Prometheus</a>, <a href=""https://github.com/google/cadvisor"">cAdvisor</a>, etc.), orchestration tools (<a href=""/radar/platforms/kubernetes"">Kubernetes</a>, <a href=""https://mesosphere.github.io/marathon/"">Marathon</a>, etc.) and deployment-automation tools reflect the growing maturity of the platform and its readiness for production use. A word of caution, though: There is a prevalent view of Docker and Linux containers in general as being ""lightweight virtualization,"" but we would not recommend using Docker as a secure process-isolation mechanism, though we are paying attention to the introduction of user namespaces and seccomp profiles in version 1.10 in this regard.</p>"
"2016-11",HSTS,Platforms,Adopt,"<p><a href=""https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"">HTTP Strict Transport Security</a> ( <strong>HSTS</strong> ) is a now widely supported policy that allows websites to protect themselves from downgrade attacks. A downgrade attack in the context of HTTPS is one that can cause users of your site to fall back to HTTP rather than HTTPS, allowing for further attacks such as man-in-the-middle attacks. With HSTS, the server sends a header that informs the browser that it should only use HTTPS to access the website. Browser support is now widespread enough that this easy-to-implement feature should be added to any site using HTTPS. Mozilla’s <a href=""https://observatory.mozilla.org/"">Observatory</a> can help identify this and other useful headers and configuration options that improve security and privacy. When implementing HSTS, it is critical to verify that all resources load properly over HTTPS, because once HSTS is turned on, there is (almost) no turning back until the expiry time. The directive to include subdomains should be added but, again, a thorough verification that all subdomains support secure transport is required.</p>"
"2016-11",Ember.js,languages-and-frameworks,Adopt,"<p>If you are faced with building a single-page application (SPA) and trying to choose a framework to build with, <strong><a href=""http://emberjs.com/"">Ember.js</a></strong> has emerged as a leading choice. Our teams praise Ember for its highly productive developer experience, with far fewer surprises than other frameworks such as <a href=""/radar/languages-and-frameworks/angularjs"">AngularJS</a>. The Ember CLI build tooling is a haven in the storm of JavaScript build tools, and the Ember core team and community are highly active and responsive.</p>"
"2016-11",Linux security modules,Platforms,Adopt,"<p><a href=""http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-167.pdf"">Application whitelisting</a> has proven to be <a href=""http://www.asd.gov.au/infosec/top-mitigations/top-4-strategies-explained.htm#mitigation1"">one of the most effective ways to mitigate cyber intrusion attacks</a>. A convenient way to implement this widely recommended practice is through <strong>Linux security modules</strong>. With SELinux or AppArmor included by default in most Linux distributions, and with more comprehensive tools such as Grsecurity readily available, we have moved this technology into the Adopt ring in this edition. These tools help teams assess questions about who has access to what resources on shared hosts, including contained services. This conservative approach to access management will help teams build security into their SDLC processes.</p>"
"2016-11",Apache Mesos,Platforms,Trial,"<p>We've continued to have positive experiences deploying the <strong><a href=""http://mesos.apache.org/"">Apache Mesos</a></strong> platform to manage cluster resources for highly distributed systems. Mesos abstracts out underlying computing resources such as CPU and storage, aiming to provide efficient utilization while maintaining isolation. Mesos includes <a href=""https://mesos.github.io/chronos/"">Chronos</a> for distributed and fault-tolerant execution of scheduled jobs, and <a href=""https://mesosphere.github.io/marathon/"">Marathon</a> for orchestrating long-running processes in containers.</p>"
"2016-11",Auth0,Platforms,Trial,"<p>We have a growing belief that for most scenarios it is rarely worth rolling your own authentication code. Outsourced identity management speeds up delivery, reduces mistakes and tends to enable a faster response to newly discovered vulnerabilities. <strong><a href=""https://auth0.com/"">Auth0</a></strong> has particularly impressed us in this field for its ease of integration, range of protocols and connectors supported, and rich management API.</p>"
"2016-11",AWS Lambda,Platforms,Trial,"<p>Our teams continue to enjoy using <strong><a href=""https://aws.amazon.com/lambda/"">AWS Lambda</a></strong> and are beginning to use it to experiment with <a href=""/radar/techniques/serverless-architecture"">serverless architectures</a>, combining Lambda with the <a href=""/radar/platforms/amazon-api-gateway"">API Gateway</a>. We do recommend that Lambda functions contain only a moderate amount of code. Ensuring the quality of a solution based on a tangle of many large Lambda functions is difficult, and such a solution may not be cost-effective. For more complex needs, deployments based on containers or VMs are still preferable. In addition, we have run into significant problems using Java for Lambda functions, with erratic latencies up to several seconds as the Lambda container is started. Of course, you can sidestep this issue by using JavaScript or Python, and if Lambda functions do not contain a lot of code, the choice of programming language should not matter too much.</p>"
"2016-11",Kubernetes,Platforms,Trial,"<p><strong><a href=""http://kubernetes.io/"">Kubernetes</a></strong> is Google's answer to the problem of deploying containers into a cluster of machines, which is becoming an increasingly common scenario. It is not the solution used by Google internally but an open source project that originated at Google and has seen a fair number of external contributions. Since we mentioned Kubernetes on the previous Radar, our initial positive impressions have been confirmed, and we are seeing successful use of Kubernetes in production at our clients.</p>"
"2016-11",Pivotal Cloud Foundry,Platforms,Trial,"<p>The PaaS space has seen a lot of movement since we last mentioned <a href=""/radar/platforms/cloud-foundry"">Cloud Foundry</a> in 2012. While there are various distributions of the open source core, we have been impressed by the offering and ecosystem assembled as <a href=""http://pivotal.io/platform""><strong>Pivotal Cloud Foundry</strong></a>. While we expect continued convergence between the unstructured approach (<a href=""/radar/platforms/docker"">Docker</a>, <a href=""/radar/platforms/apache-mesos"">Mesos</a>, <a href=""/radar/platforms/kubernetes"">Kubernetes</a>, etc.) and the more structured and opinionated buildpack style offered by Cloud Foundry and others, we see real benefit for organizations that are willing to accept the constraints and rate of evolution to adopt a PaaS. Of particular interest is the speed of development that comes from the simplification and standardization of the interaction between development teams and platform operations.</p>"
"2016-11",Rancher,Platforms,Trial,"<p>The emerging Containers as a Service (CaaS) space is seeing a lot of movement and provides a useful option between basic IaaS (Infrastructure as a Service) and more opinionated PaaS (Platform as a Service). While <a href=""http://rancher.com/""><strong>Rancher</strong></a> creates less noise than some other players, we have enjoyed the simplicity that it brings to running <a href=""/radar/platforms/docker"">Docker</a> containers in production. It can run stand-alone as a full solution or in conjunction with tools like <a href=""/radar/platforms/kubernetes"">Kubernetes</a>.</p>"
"2016-11",Realm,Platforms,Trial,"<p><strong><a href=""https://realm.io/"">Realm</a></strong> is a database designed for use on mobile devices, with its own persistence engine to achieve high performance. Realm is marketed as a replacement for SQLite and Core Data. Note that migrations are not quite as straightforward as the Realm documentation would have you believe. However, more and more teams are choosing Realm as the persistence mechanism in production environments for mobile applications.</p>"
"2016-11",Unity beyond gaming,Platforms,Trial,"<p>After experiencing years of growth as a platform for game development, <strong><a href=""https://unity3d.com/"">Unity</a></strong> has recently become the platform of choice for VR and AR application development. Whether you’re creating a fully immersive world for the Oculus or HTC Vive headsets, a holographic layer for your newly spatial enterprise application or an AR feature set for your mobile app, Unity likely provides what you need to both prototype it and get it ready for prime time. Many of us at ThoughtWorks believe that VR and AR represent the next significant shift in the computing platform, and for now, Unity is the single most important tool in the toolbox we use to develop for this change. We’ve used Unity to develop all our VR prototypes, as well as AR functionality for headsets and phone/tablet applications.</p>"
"2016-11",IndiaStack,Platforms,Assess,"<p><strong><a href=""http://www.indiastack.org"">IndiaStack</a></strong> is a set of Open APIs designed with the goal of transforming India from a data-poor to a data-rich country. The stack emphasizes layered innovation by specifying a minimal set of APIs and encourages the rest of the ecosystem to build custom applications on top of these APIs. <a href=""http://www.indiastack.org/Resource#Aadhaar"">Aadhaar</a> serves as one of the foundation layers, providing authentication services for more than a billion Indian citizens. In addition, there are services to provide paperless transactions through digital signatures (eSign), unified online payment (UPI) and an electronic consent layer (<a href=""https://uidai.gov.in/beta/authentication/aadhaar-financial-inclusion/aadhaar-e-kyc.html"">e-KYC</a>) to securely provide Aadhaar details to service providers. We believe in the Open API–driven initiative to bring digital innovation, and the design principles behind IndiaStack could be used as a change agent for other regions/countries.</p>"
"2016-11",.NET Core,Platforms,Assess,"<p><strong><a href=""https://www.microsoft.com/net/core"">.NET Core</a></strong> is an open source modular product for creating applications that can be easily deployed in Windows, macOS and Linux. .NET Core makes it possible to build cross-platform web applications using <a href=""http://www.asp.net/core"">ASP.NET Core</a> with a set of tools, libraries and frameworks—another choice for microservices architecture. The community around .NET Core and other related projects has been growing. New tools have appeared and evolved quickly, such as <a href=""/radar/tools/visual-studio-code"">Visual Studio Code</a>. There are <a href=""/radar/platforms/docker"">Docker</a> <a href=""https://www.microsoft.com/net/core#docker"">images</a> based on both Linux and Windows (<a href=""/radar/platforms/microsoft-nano-server"">Nano Server</a>) with .NET Core that simplify applying a microservice architecture. CoreCLR and CoreFX appeared in the Radar in the past. However, a few months ago Microsoft <a href=""https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0"">announced</a> the release of .NET Core 1.0, the first stable version. We see good new opportunities, changes and a vibrant community as reasons to keep assessing this product.</p>"
"2016-11",Amazon API Gateway,Platforms,Assess,"<p><a href=""https://aws.amazon.com/api-gateway/""><strong>Amazon API Gateway</strong></a> is Amazon's offering enabling developers to expose API services to Internet clients. It offers the usual API gateway features like traffic management, monitoring, authentication and authorization. Our teams have been using this service to front other AWS capabilities like AWS Lambda as part of <a href=""/radar/techniques/serverless-architecture"">serverless architectures</a>. We continue to monitor for the challenges presented by <a href=""/radar/platforms/overambitious-api-gateways"">overambitious API gateways</a>, but at this stage Amazon's offering appears to be lightweight enough to avoid those problems.</p>"
"2016-11",Apache Flink,Platforms,Assess,"<p>Interest continues to build for <strong><a href=""https://flink.apache.org/"">Apache Flink</a></strong>, a new-generation platform for scalable distributed batch and stream processing. At the core of Apache Flink is a streaming data-flow engine, with support for tabular (SQL-like), graph-processing and machine learning operations. Apache Flink stands out with feature rich capabilities for stream processing: event time, rich streaming window operations, fault tolerance and exactly-once semantics. The project shows significant ongoing activity, with the latest release (1.1) introducing new datasource/sink integrations as well as improved streaming features.</p>"
"2016-11",AWS Application Load Balancer,Platforms,Assess,"<p>Amazon recently launched the <a href=""https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/""><strong>AWS Application Load Balancer</strong></a> (ALB), a direct replacement for Elastic Load Balancers introduced back in 2009. ALB supports Layer 7 traffic inspection and is built to support modern cloud architecture. If you’re building a microservices-based system using <a href=""/radar/platforms/aws-ecs"">ECS</a>, the new load balancers will directly understand container hosting and scaling, with multiple containers and ports per EC2 instance. Content-based routing allows segmentation of requests onto groups of target servers, along with independent scaling of those groups. Health checks performed by the load balancers are much improved, with the ability to capture detailed metrics about application performance. We like everything that we see here, and teams have begun to report successful usage of ALB.</p>"
"2016-11",Cassandra carefully,Platforms,Assess,"<p>Apache’s <a href=""http://cassandra.apache.org/"">Cassandra</a> database is a powerful, scalable Big Data solution for storing and processing large amounts of data, often using hundreds of nodes split over multiple worldwide locations. It’s a great tool and we like it, but too often we see teams run into trouble using it. We recommend using <strong>Cassandra carefully</strong>. Teams often misunderstand the use case for Cassandra, attempting to use it as a general-purpose data store when in fact it is optimized for fast reads on large data sets based on predefined keys or indexes. Its dependence on the storage schema can also make it difficult to evolve over time. Cassandra also has significant operational complexity and some rough edges, so unless you absolutely need the scaling it provides, a simpler solution is usually better. If you don’t need Cassandra’s specific use-case and scaling characteristics, you might just be choosing it out of <a href=""/radar/techniques/big-data-envy"">Big Data envy</a>. Careful use of Cassandra will include extensive automated testing, and we’re happy to recommend <a href=""https://github.com/jsevellec/cassandra-unit"">CassandraUnit</a> as part of your testing strategy.</p>"
"2016-11",Electron,Platforms,Assess,"<p><strong><a href=""http://electron.atom.io/"">Electron</a></strong> is a solid framework for building native desktop clients using web technologies such as HTML, CSS and JavaScript. Teams can leverage their web know-how to deliver polished cross-platform desktop clients without spending time learning another set of technologies.</p>"
"2016-11",Ethereum,Platforms,Assess,"<p>The hype seems to have peaked for blockchain and cryptocurrencies, as evidenced by the previous firehose-scale announcements in this area slowing to a trickle, and we expect some of the more speculative efforts to die out over time. One of the blockchains, <a href=""https://www.ethereum.org/""><strong>Ethereum</strong></a>, is making good progress and is worth watching. Ethereum is a public blockchain with a built-in programming language that allows ""smart contracts"" to be built into it. These are algorithmic movements of ""ether"" (the Ethereum cryptocurrency) in response to activity happening on the blockchain. R3Cev, the consortium building blockchain tech for banks, built its first proofs of concept on Ethereum. Ethereum has been used to build a Distributed Autonomous Organization (DAO)—one of the first ""algorithmic corporations""—although a recent heist of <a href=""http://www.coindesk.com/dao-attacked-code-issue-leads-60-million-ether-theft/"">$150m worth of Ether</a> demonstrates that the blockchain and cryptocurrencies are still the Wild West of the technology world.</p>"
"2016-11",HoloLens,Platforms,Assess,"<p>In the <strong><a href=""https://www.microsoft.com/microsoft-hololens/en-us"">HoloLens</a></strong>, Microsoft has delivered the first truly usable AR headset. Not only is it a beautiful piece of industrial design and an eminently comfortable device to wear, but it also clearly demonstrates the promise of AR for the enterprise via its gorgeous optics and deep Windows 10 integration. We expect HoloLens to be the first AR platform on which we deliver substantial application functionality to our clients in the near term, and we look forward to its evolution as it gains broader traction.</p>"
"2016-11",Nomad,Platforms,Assess,"<p>HashiCorp continues to turn out interesting software. The latest to catch our attention is <a href=""https://www.nomadproject.io/""><strong>Nomad</strong></a>, which is competing in the ever-more-populated scheduler arena. Major selling points include not just being limited to containerized workloads, and operating in multi–data center / multiregion deployments.</p>"
"2016-11",Nuance Mix,Platforms,Assess,"<p><strong><a href=""https://developer.nuance.com/public/index.php?task=mix"">Nuance Mix</a></strong> is a framework for natural language processing from the company that created the speech-to-text technology behind Dragon Speaking and the first roll-out of Siri. This framework supports the creation of grammars that allow for free-form user interaction via voice. The developer defines a domain-specific grammar that the framework can train itself to understand. The outcomes are responses to user input that identify the user's intents and interaction concepts. At first, it is limited to phrases close to the ones used to train it, but over time it can start to identify meaning from more divergent phrasing. Though it is still in beta, the accuracy from early exploration has been compelling, and the eventual product is one to watch for application forms that could benefit from hands-free user interaction—including mobile, IoT, AR, VR and interactive spaces.</p>"
"2016-11",OpenVR,Platforms,Assess,"<p><strong><a href=""https://github.com/ValveSoftware/openvr"">OpenVR</a></strong> is the underlying SDK in making many of the VR head-mounted displays (HMDs) work with Unity and will likely keep growing in importance. Much of the VR work at ThoughtWorks was built on top of OpenVR, because it will run on any HMD, unlike the other SDKs. Though it is not open source, it is free via the license. The Oculus SDK is more restrictive in its licensing and only works on Oculus devices. <a href=""http://www.osvr.org/"">OSVR</a>, while truly open source, doesn't seem to have as much adoption yet. If you're going to develop a VR application and target as many devices as possible—and not use Unity or Unreal to develop them—OpenVR is the most concrete and pragmatic solution right now.</p>"
"2016-11",Tarantool,Platforms,Assess,"<p><strong><a href=""https://tarantool.org"">Tarantool</a></strong> is an open source <a href=""/radar/tools/nosql"">NoSQL</a> solution that combines database and cache into one entity and provides APIs for writing application logic in <a href=""/radar/languages-and-frameworks/lua"">Lua</a>. Both in-memory and disk-based engines are supported, and users can create multiple indexes (HASH, TREE, RTREE, BITSET) based on their use cases. The data itself is stored in <a href=""http://msgpack.org"">MessagePack</a> format and uses the same protocol to communicate between clients and server. Tarantool supports write-ahead logs, transactions and asynchronous master-master replication. We are happy with the architectural decision of embracing single-writer policy and cooperative multitasking to handle concurrent connections.</p>"
"2016-11",TensorFlow,Platforms,Assess,"<p>Google's <strong><a href=""https://www.tensorflow.org/"">TensorFlow</a></strong> is an open source machine-learning platform that can be used for everything from research through to production and will run on hardware from a mobile CPU all the way to a large GPU compute cluster. It's an important platform because it makes implementing deep-learning algorithms much more accessible and convenient. Despite the hype, though, TensorFlow isn't really anything new algorithmically: All of these techniques have been available in the public domain via academia for some time. It's also important to realize that most businesses are not yet doing even basic predictive analytics and that jumping to deep learning likely won't help make sense of most data sets. For those who do have the right problem and data set, however, TensorFlow is a useful toolkit.</p>"
"2016-11",wit.ai,Platforms,Assess,"<p>Hype surrounding machine intelligence has reached a crescendo, but as with Big Data, useful frameworks and tools are waiting to be discovered among all the hot air. One such tool is <a href=""https://wit.ai/""><strong>wit.ai</strong></a>, a SaaS platform that allows developers to create conversational interfaces using natural language processing (NLP). Wit works with either text or speech inputs, helps developers manage conversational intent and allows custom business logic to be implemented using JavaScript. The system is free for commercial and noncommercial use and encourages the creation of open applications. Be aware that you must agree to let Wit use your data in order to improve the service and for its own analysis, so read the <a href=""https://wit.ai/terms"">terms and conditions</a> carefully. Another contender in this space is the <a href=""https://dev.botframework.com/"">Microsoft Bot Framework</a>, but it’s available only in limited preview form as of this writing. As with most things Microsoft, we expect the Bot Framework to evolve quickly, so it’s worth keeping an eye on.</p>"
"2016-11",CMS as a platform,Platforms,Hold,"<p>We are seeing too many organizations run into trouble as they attempt to use their <strong>CMS as a platform</strong> for delivering large and complex digital applications. This is often driven by the vendor-fueled hope of bypassing unresponsive IT organizations and enabling the business to drag and drop changes directly to production. While we are very supportive of providing content producers with the right tools and workflows, for applications with complex business logic we tend to recommend treating your CMS as a component of your platform (often in a hybrid or headless mode) cooperating cleanly with other services, rather than attempting to implement all of your functionality in the CMS itself.</p>"
"2016-11",Overambitious API gateways,Platforms,Hold,"<p>One of our regular complaints is about business smarts implemented in middleware, resulting in transport software with ambitions to run critical application logic. Vendors in the highly competitive API gateway market continue to add features that differentiate their products. This results in <strong>overambitious API gateway</strong> products whose functionality—on top of what is essentially a reverse proxy—encourages designs that are difficult to test and deploy. API gateways can provide utility in dealing with some generic concerns—for example, authentication and rate-limiting—but any domain smarts such as data transformation or rule processing should live in applications or services where they can be controlled by product teams working closely with the domains they support.</p>"
"2016-11",Superficial private cloud,Platforms,Hold,"<p>We've seen the indisputable productivity gains that come from deployment of applications and services into mature cloud providers. Much of that gain comes from the ability of teams to deploy and operate their own services with a high degree of autonomy and responsibility. We are now regularly coming across <strong>Superficial Private Cloud</strong> offerings within organizations, where basic virtualization platforms are being given the “cloud” label. Often teams can self-provision a restricted set of fixed service types with limited access and little ability to customize the centrally governed “enterprise blueprints,” leading to kludge solutions. Deployment pace regularly remains constrained by manually provisioned infrastructure such as network, firewall and storage. We encourage organizations to more fully consider the costs of mandating the use of an inadequate private cloud offering.</p>"
"2016-11",React.js,languages-and-frameworks,Adopt,"<p>In the avalanche of front-end JavaScript frameworks, <a href=""http://facebook.github.io/react/""><strong>React.js</strong></a> stands out due to its design around a reactive data flow. Allowing only one-way data binding greatly simplifies the rendering logic and avoids many of the issues that commonly plague applications written with other frameworks. We're seeing the benefits of React.js on a growing number of projects, large and small, while at the same time we continue to be concerned about the state and the future of other popular frameworks like <a href=""/radar/languages-and-frameworks/angularjs"">AngularJS</a>. This has led to React.js becoming our default choice for JavaScript frameworks.</p>"
"2016-11",Redux,languages-and-frameworks,Adopt,"<p>With the increasing complexity of single-page JavaScript applications, we have seen a more pressing need to make client-side state management predictable. <a href=""http://redux.js.org/""><strong>Redux</strong></a>, with its <a href=""http://redux.js.org/docs/introduction/ThreePrinciples.html"">three principles</a> of restrictions for updating state, has proven to be invaluable in a number of projects we have implemented. <a href=""https://egghead.io/courses/getting-started-with-redux"">Getting Started with Redux</a> and <a href=""https://egghead.io/courses/building-react-applications-with-idiomatic-redux"">idiomatic Redux</a> tutorials are a good starting point for new and experienced users. Its minimal library design has spawned a rich set of tools, and we encourage you to check out the <a href=""https://github.com/markerikson/redux-ecosystem-links"">redux-ecosystem-links</a> project for examples, middleware and utility libraries. We also particularly like the testability story: Dispatching actions, state transitions and rendering can be unit-tested separately from one another and with minimal amounts of mocking.</p>"
"2016-11",Spring Boot,languages-and-frameworks,Adopt,"<p>A lot of work has gone into <a href=""http://projects.spring.io/spring-boot""><strong>Spring Boot</strong></a> to reduce complexity and dependencies, which largely alleviates our previous reservations. If you live in a Spring ecosystem and are moving to microservices, Spring Boot is now the obvious choice. For those not in Springland, <a href=""/radar/languages-and-frameworks/dropwizard"">Dropwizard</a> is also worthy of serious consideration.</p>"
"2016-11",Butterknife,languages-and-frameworks,Trial,"<p><strong><a href=""https://github.com/JakeWharton/butterknife"">Butterknife</a></strong> is a field and method binding view-injection library. It allows the injection of arbitrary objects, views and listeners, thereby ensuring cleaner code with reduced glue code for Android development. With Butterknife, multiple views can be grouped into a list or array with common actions applied to the views simultaneously, without heavy reliance on XML configurations. Our project teams have used this library and benefited from its simplicity and ease of use.</p>"
"2016-11",Dagger,languages-and-frameworks,Trial,"<p>With the increased need for Android-based applications, <strong><a href=""http://google.github.io/dagger/"">Dagger</a></strong> offers a fully static, compile-time dependency-injection framework. Dagger's strictly generated implementation and nonreliance on reflection-based solutions addresses many of the performance and development issues, thereby making it suitable for Android development. With Dagger, there is full traceability with easy debugging because the entire call stack for provision and creation is made available.</p>"
"2016-11",Dapper,languages-and-frameworks,Trial,"<p><a href=""https://github.com/StackExchange/dapper-dot-net""><strong>Dapper</strong></a> is a minimal, lightweight ORM of sorts for .NET. Rather than trying to write the SQL queries for you, Dapper maps SQL queries to dynamic objects. Though it's not brand new, Dapper has steadily gained acceptance from ThoughtWorks teams working in .NET. For the C# programmer, it removes some of the drudgery of mapping relational queries to objects while still allowing complete control over the SQL or stored procedures.</p>"
"2016-11",Elixir,languages-and-frameworks,Trial,"<p>Interest in the <a href=""http://elixir-lang.org/""><strong>Elixir</strong></a> programming language continues to build. Increasingly, we see it used in serious projects and hear feedback from developers who find its Actor model to be robust and very fast. Elixir, which is built on top of the Erlang virtual machine, is showing promise for creating highly concurrent and fault-tolerant systems. Elixir has distinctive features such as the Pipe operator, which allows developers to build a pipeline of functions as you would in the UNIX command shell. The shared byte code allows Elixir to interoperate with Erlang and leverage existing libraries while supporting tools such as the Mix build tool, the IEx interactive shell and the <a href=""http://elixir-lang.org/docs/stable/ex_unit/ExUnit.html"">ExUnit</a> unit-testing framework.</p>"
"2016-11",Enzyme,languages-and-frameworks,Trial,"<p>We’ve been enjoying the rapid component-level UI testing that <a href=""http://airbnb.io/enzyme/""><strong>Enzyme</strong></a> provides for <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> applications. Unlike many other snapshot-based testing frameworks, Enzyme allows you to test without doing on-device rendering, which results in faster and more granular testing. This is a contributing factor in our ability to massively reduce the amount of functional testing we find we have to do in React applications.</p>"
"2016-11",Immutable.js,languages-and-frameworks,Trial,"<p>Immutability is often emphasized in the functional programming paradigm, and most languages have the ability to create immutable objects—objects that can't be changed once created. <strong><a href=""https://facebook.github.io/immutable-js/"">Immutable.js</a></strong> is a library for JavaScript that provides many persistent immutable data structures, which are highly efficient on modern JavaScript virtual machines. Immutable.js objects are, however, not normal JavaScript objects, so references to JavaScript objects from immutable objects should be avoided. More teams are using this library for tracking mutation and maintaining state in production. We recommend that developers investigate this library, especially when it's combined with the rest of the Facebook stack.</p>"
"2016-11",Phoenix,languages-and-frameworks,Trial,"<p>Some of our ThoughtWorks teams have had very positive experiences with <strong>Phoenix</strong> , a server-side web MVC framework written in <a href=""/radar/languages-and-frameworks/elixir"">Elixir</a>. In addition to being streamlined and easy to use, Phoenix takes advantage of Elixir to be extremely fast. For some developers, Phoenix evokes the joy they experienced when first discovering Ruby and Rails. Although the ecosystem of libraries for Phoenix is not as extensive as for some more mature frameworks, it should benefit from the continuing success and growth of support for Elixir.</p>"
"2016-11",Quick and Nimble,languages-and-frameworks,Trial,"<p>Most of our iOS teams are now using the <strong><a href=""https://github.com/Quick/Quick"">Quick</a> and <a href=""https://github.com/Quick/Nimble"">Nimble</a></strong> pairing for their unit tests. In the <a href=""http://rspec.info/"">RSpec</a> family of behavior-driven development (BDD) testing tools, it provides very readable tests (with describe blocks) across <a href=""/radar/languages-and-frameworks/swift"">Swift</a> and Objective-C and has good support for asynchronous testing.</p>"
"2016-11",React Native,languages-and-frameworks,Trial,"<p>We are seeing continued success with <a href=""https://facebook.github.io/react-native/""><strong>React Native</strong></a> for rapid cross-platform mobile development. Despite some churn as it undergoes continuing development, the advantages of trivial integration between native and nonnative code and views, the rapid development cycle (instant reload, chrome debugging, Flexbox layout) and general growth of the React style is winning us over. As with many frameworks, care needs to be taken to keep your code well structured, but diligent use of a tool like <a href=""/radar/languages-and-frameworks/redux"">Redux</a> really helps here.</p>"
"2016-11",Robolectric,languages-and-frameworks,Trial,"<p>In the Android application-development world, <strong><a href=""http://robolectric.org/"">Robolectric</a></strong> is a unit-testing framework that has been used by multiple teams within our technical community. It offers the best option among those available for writing real unit tests that extend or interact directly with Android components and support JUnit tests. We caution, though, that because it is an implementation of the Android SDK, there might be device-specific issues for some tests that pass in Robolectric. To manually mock all the Android dependencies, ensuring only test of the system-in-test will require a lot of complex code, and this framework addresses this effectively.</p>"
"2016-11",Aurelia,languages-and-frameworks,Assess,"<p><a href=""http://aurelia.io/""><strong>Aurelia</strong></a> is considered the next-generation JavaScript client framework and was written using a modern version of JavaScript: ECMAScript 2016. Aurelia was created by Rob Eisenberg, the creator of <a href=""http://durandaljs.com/"">Durandal</a>. He left the <a href=""https://angular.io/"">Angular 2.0</a> core team to dedicate his time to this project. The great thing about Aurelia is that it's highly modular, contains simple small libraries and is designed to be customized easily. Aurelia follows the pattern of convention over configuration, which enables easier production and consumption of modules, but there are no strong conventions that you have to adhere to. Aurelia has a large community, and in the project website you can learn more by using the tutorials.</p>"
"2016-11",ECMAScript 2017,languages-and-frameworks,Assess,"<p><strong>ECMAScript 2017</strong> —not to be confused with ES7 (a.k.a. ECMAScript 2016)—brings several noteworthy improvements to the language. Browsers are expected to implement this standard fully in the summer of 2017, but the <a href=""/radar/tools/babel"">Babel</a> JavaScript compiler already supports a number of the features today. If you make extensive use of JavaScript and your codebase is under active development, we recommend that you add Babel to your build pipeline and begin using the <a href=""https://www.npmjs.com/package/babel-preset-es2017"">supported features</a></p><p>.</p>"
"2016-11",Elm,languages-and-frameworks,Assess,"<p>We have been prompted to reconsider <a href=""http://elm-lang.org/""><strong>Elm</strong></a> because of the rapid adoption of <a href=""/radar/languages-and-frameworks/redux"">Redux</a> framework. Elm—the original inspiration for Redux—offers the view componentization and reactiveness of <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> along with the predictable state of Redux in a compiled, strongly typed functional language. Elm is written in Haskell and has a Haskell-like syntax but compiles down to HTML, CSS and JavaScript for the browser. JavaScript programmers rushing to embrace React.js and Redux might want to also consider Elm as a type-safe alternative for some applications.</p>"
"2016-11",GraphQL,languages-and-frameworks,Assess,"<p>When we look at REST implementations in the wild, we frequently see REST misused to naively retrieve object graphs through chatty interactions between client and server. Facebook's <a href=""https://github.com/facebook/graphql""><strong>GraphQL</strong></a> is an interesting alternative to REST that might be a better approach for this very common use case. As a protocol for remotely retrieving object graphs, GraphQL has received enormous attention recently. One of GraphQL's most interesting features is its consumer-oriented nature: The structure of a response is driven entirely by the client, not the server. This decouples the consumer and forces the server to obey Postel's law. Client implementations are now available in many programming languages, but we have seen a flurry of interest of Facebook's <a href=""https://facebook.github.io/relay/"">Relay</a>, a JavaScript framework that was designed to support the <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> stateless component model.</p>"
"2016-11",JuMP,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/JuliaOpt/JuMP.jl"">JuMP</a></strong> is a domain-specific language for <a href=""https://en.wikipedia.org/wiki/Mathematical_optimization"">mathematical optimizations</a> in <a href=""http://julialang.org/"">Julia</a>. JuMP defines a common API called <a href=""https://github.com/JuliaOpt/MathProgBase.jl"">MathProgBase</a> and enables users to write solver-agnostic code in Julia. Currently supported solvers include <a href=""http://artelys.com/en/optimization-tools/knitro"">Artelys Knitro</a>, <a href=""https://projects.coin-or.org/Bonmin"">Bonmin</a>, <a href=""https://projects.coin-or.org/Cbc"">Cbc</a>, <a href=""https://projects.coin-or.org/Clp"">Clp</a>, <a href=""https://projects.coin-or.org/Couenne"">Couenne</a>, <a href=""http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/"">CPLEX</a>, <a href=""https://github.com/ifa-ethz/ecos"">ECOS</a>, <a href=""http://www.fico.com/en/products/fico-xpress-optimization-suite"">FICO Xpress</a>, <a href=""http://www.gnu.org/software/glpk/"">GLPK</a>, <a href=""http://www.gurobi.com"">Gurobi</a>, <a href=""https://projects.coin-or.org/Ipopt"">Ipopt</a>, <a href=""http://www.mosek.com/"">MOSEK</a>, <a href=""http://ab-initio.mit.edu/wiki/index.php/NLopt"">NLopt</a> and <a href=""https://github.com/cvxgrp/scs"">SCS</a>. One other benefit is the implementation of automatic differentiation technique in reverse mode to compute derivatives so users are not limited to the standard operators like sin, cos, log and sqrt but can also implement their own custom objective functions in Julia.</p>"
"2016-11",Physical Web,languages-and-frameworks,Assess,"<p>We have been intrigued by the <strong><a href=""https://google.github.io/physical-web/"">Physical Web</a></strong> standard created by Google. The idea of Physical Web is simple—beacons broadcast a URL—but the possibilities are broad. Basically, this is a way to annotate the physical world, tying objects and locations into the digital realm. The current transport mechanism is <a href=""https://github.com/google/eddystone/tree/master/eddystone-url"">Eddystone URLs</a> over Bluetooth LE, and sample clients are available. Although there are obvious security concerns with following randomly discovered links, we are most interested in use cases with customized clients where you can filter or proxy the URLs as required.</p>"
"2016-11",Rapidoid,languages-and-frameworks,Assess,"<p><strong><a href=""http://www.rapidoid.org/"">Rapidoid</a></strong> is a collection of web framework modules, including a fast low-level HTTP server implemented from scratch on top of Java NIO. Clever usage of off-heap input/output buffers, object pools and thread-local data structures provide Rapidoid an edge over other NIO-based servers like <a href=""http://netty.io/"">Netty</a>. Being a fairly new project, Rapidoid has yet to implement a few features like built-in cache and SSL support; we suggest you check the <a href=""https://github.com/rapidoid/rapidoid"">roadmap</a> for updates.</p>"
"2016-11",Recharts,languages-and-frameworks,Assess,"<p>We've been enjoying how <strong><a href=""http://recharts.org/"">Recharts</a></strong> integrates <a href=""/radar/tools/d3"">D3</a> charts into <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> in a clean and declarative manner.</p>"
"2016-11",ReSwift,languages-and-frameworks,Assess,"<p>We are excited that the <a href=""/radar/languages-and-frameworks/redux"">Redux</a> paradigm has made its way to Swift-land in the form of <a href=""http://reswift.github.io/ReSwift""><strong>ReSwift</strong></a>. We’ve found real benefits in the simplicity and readability of codebases once state and state changes are managed in a central place and common idiom. This also helps with building ""offline first"" applications.</p>"
"2016-11",Three.js,languages-and-frameworks,Assess,"<p>Despite the fervor surrounding the spate of new headsets, we believe there are many VR and AR scenarios that make sense in the browser, particularly on mobile. Given this trend, we have seen an uptick in usage of <a href=""https://threejs.org/""><strong>Three.js</strong></a>, a powerful JavaScript visualization and 3D rendering framework. The growth in support for WebGL, which it is based on, has helped adoption, as has the vibrant community supporting this open source project.</p>"
"2016-11",Vue.js,languages-and-frameworks,Assess,"<p>In the ever-changing world of front-end JavaScript frameworks, <a href=""https://vuejs.org/""><strong>Vue.js</strong></a> has gained a lot of ground as a lightweight alternative to <a href=""/radar/languages-and-frameworks/angularjs"">AngularJS</a>. It is designed to be a very flexible—and a less opinionated—library that offers a set of tools for building interactive web interfaces around concepts like modularity, components and reactive data flow. It has a low learning barrier, which makes it interesting for junior developers and beginners. Vue.js itself is not a full-blown framework; it is focused on the view layer only and therefore is easy to integrate with other libraries or existing projects.</p>"
"2016-11",WebRTC,languages-and-frameworks,Assess,"<p>Widespread adoption of AR/VR as a collaboration and communication medium requires a modern and readily available video streaming platform. <strong><a href=""https://webrtc.org/"">WebRTC</a></strong> is an emerging standard for real-time communication between browsers that enables video streaming within commonly available web technologies. The range of browsers that support this standard is increasing, but Microsoft and Apple have been slow to adopt WebRTC in their proprietary browsers. If momentum continues to build, WebRTC could form the future foundation for AR/VR collaboration on the web.</p>"
"2016-11",AngularJS,languages-and-frameworks,Hold,"<p><a href=""https://angularjs.org/""><strong>AngularJS</strong></a> helped revolutionize the world of single-page JavaScript applications, and we have delivered many projects successfully with it over the years. However, we are no longer recommending it (v1) for teams starting fresh projects. We prefer the ramp-up speed and more maintainable codebases we are seeing with <a href=""/radar/languages-and-frameworks/ember-js"">Ember</a> and <a href=""/radar/languages-and-frameworks/react-js"">React</a>, particularly in conjunction with <a href=""/radar/languages-and-frameworks/redux"">Redux</a>.</p>"
"2016-11",JSPatch,languages-and-frameworks,Hold,"<p>Many iOS developers are using <strong><a href=""https://github.com/bang590/JSPatch"">JSPatch</a></strong> to dynamically patch their apps. When a JSPatch-enabled app runs, it loads a chunk of JavaScript (potentially via an insecure HTTP connection) and then bridges to the main Objective-C application code to change behavior, fix bugs, and so on. While convenient, we think monkey-patching live apps is a bad idea and should be avoided. When doing any amount of incremental patching, it's very important that your testing process matches what end users will experience, in order to properly validate functionality. An alternative approach is to use <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> for the app and <a href=""https://apphub.io/"">AppHub</a> and <a href=""https://microsoft.github.io/code-push/"">CodePush</a> to push small updates and new features.</p>"
"2016-11",Babel,Tools,Adopt,"<p><a href=""http://babeljs.io/""><strong>Babel.js</strong></a> has become the default compiler for writing next-generation JavaScript. Its ecosystem is really taking off, thanks to its restructured <a href=""http://babeljs.io/docs/plugins/#presets"">plugin system</a>. It allows developers to write <a href=""/radar/languages-and-frameworks/es6"">ES6</a> (and even ES7) code that runs in the browser or in the server without sacrificing backward compatibility for older browsers, and with very little configuration. It has first-class support for different build-and-test systems, which makes integration with any current workflow simple. It is a great piece of software that has become the main driver of ES6 (and ES7) adoption and innovation.</p>"
"2016-11",Consul,Tools,Adopt,"<p>We have moved <strong><a href=""http://consul.io"">Consul</a></strong>, the service-discovery tool supporting both DNS- and HTTP-based discovery mechanisms, into Adopt. It goes beyond other discovery tools by providing customizable health checks for registered services, ensuring that unhealthy instances are marked accordingly. More tools have emerged to work with Consul to make it even more powerful. <a href=""https://github.com/hashicorp/consul-template"">Consul Template</a> enables configuration files to be populated with information from Consul, making things like client-side load balancing using mod_proxy much easier. In the world of Docker, <a href=""https://github.com/gliderlabs/registrator"">registrator</a> can automatically register Docker containers as they appear with Consul with extremely little effort, making it much easier to manage container-based setups. You should still think long and hard about whether you need a tool like this or whether something simpler will do, but if you decide you need service discovery, you won't go far wrong with Consul.</p>"
"2016-11",Serverspec,Tools,Trial,"<p>In the past we have included automated <a href=""/radar/techniques/provisioning-testing"">Provisioning Testing</a> as a recommended technique, and in this issue we highlight <a href=""http://serverspec.org/""><strong>Serverspec</strong></a> as a popular tool for implementing those tests. Although this tool is not new, we are seeing its use become more common as more cross-functional delivery teams take on responsibility for infrastructure provisioning. Serverspec is built on the Ruby library RSpec and comes with a comprehensive set of helpers for asserting that server configuration is correct.</p>"
"2016-11",Grafana,Tools,Adopt,"<p>When combining modern techniques and architecture styles, such as <a href=""/radar/techniques/microservices"">microservices</a>, <a href=""/radar/techniques/devops"">DevOps</a> and <a href=""/radar/techniques/qa-in-production"">QA in production</a>, development teams need increasingly sophisticated monitoring. Simply looking a graphs of disk usage and CPU utilization is not sufficient anymore, and many teams collect application and business-specific metrics using tools such a Graphite and Kibana. <strong><a href=""http://grafana.org/"">Grafana</a></strong> makes it easy to create useful and elegant dashboards for data from a number of sources. A particularly useful feature allows timescales of different graphs to be synchronized, which helps with spotting correlations in the underlying data. The templating system that is being added shows a lot promise and will likely make managing sets of similar services even easier. Based on its strengths, Grafana has become our default choice in this category.</p>"
"2016-11",Packer,Tools,Adopt,"<p>Machine images have become a staple of modern deployment pipelines, and there are a number of tools and techniques to create the images. Because of its comprehensive feature set and the positive experiences we've had with it, we recommend <a href=""http://packer.io""><strong>Packer</strong></a> over the alternatives. We also recommend against trying to write custom scripts to do what Packer does out of the box.</p>"
"2016-11",Apache Kafka,Tools,Trial,"<p>Many organizations are now looking closely at new data architectures that capture information as immutable sequences of events at scale. <a href=""http://kafka.apache.org/""><strong>Apache Kafka</strong></a> continues to build momentum as an open source messaging framework that provides a solution for publishing ordered event feeds to large numbers of independent, lightweight consumers. Configuring Kafka is nontrivial, but our teams are reporting positive experiences with the framework.</p>"
"2016-11",Espresso,Tools,Trial,"<p>At the top of the testing pyramid for Android application development, our teams are increasingly using <strong><a href=""https://google.github.io/android-testing-support-library/docs/espresso/index.html"">Espresso</a></strong> as the functional-testing tool. Its small-core API hides the messy implementation details and helps in writing concise tests, with faster and reliable test execution. With Espresso, you can run automated UI tests simulating user interactions within a single target app on both emulators and real devices across different Android versions.</p>"
"2016-11",fastlane,Tools,Trial,"<p><strong><a href=""https://fastlane.tools/"">fastlane</a></strong> is our go-to tool for automating most of the boring activities involved in getting iOS and Android mobile apps built, tested, documented and provisioned. Simple configuration, a range of tooling and multiple pipelines make this a key ingredient in doing <a href=""/radar/techniques/continuous-delivery-cd"">continuous delivery</a> for mobile.</p>"
"2016-11",Galen,Tools,Trial,"<p>Testing that layout and styling of responsive websites is working as expected across various form factors can be a slow and often manual process. <strong><a href=""http://galenframework.com/"">Galen</a></strong> helps ease this problem by providing a simple language, running on top of <a href=""http://www.seleniumhq.org/"">Selenium</a>, that allows you to specify expectations for the appearance of your website in various screen sizes. Although Galen suffers from the typical brittleness and speed issues of any end-to-end testing approach, we have found benefit in the early feedback on design issues.</p>"
"2016-11",HashiCorp Vault,Tools,Trial,"<p>Having a way to securely manage secrets is increasingly becoming a huge project issue. The old practice of keeping secrets in a file or in environment variables is becoming hard to manage, especially in environments with multiple applications and large numbers of <a href=""/radar/techniques/microservices"">microservices</a>. <a href=""https://github.com/hashicorp/vault""><strong>HashiCorp Vault</strong></a> addresses the problem by providing mechanisms for securely accessing secrets through a unified interface. It has served us well on a number of projects, and our teams liked how easy it was to integrate Vault with their services. Storing and updating secrets is a bit cumbersome, because it relies on a command-line tool and a fair amount of discipline from the team.</p>"
"2016-11",JSONassert,Tools,Trial,"<p>More projects are emitting and consuming information formatted as JSON. Writing tests in Java for JSON can be laborious. <strong><a href=""http://jsonassert.skyscreamer.org/"">JSONassert</a></strong> is a small library to help write smaller tests dealing with JSON by simplifying assertions and providing better error messages.</p>"
"2016-11",Let's Encrypt,Tools,Trial,"<p><a href=""https://letsencrypt.org/""><strong>Let's Encrypt</strong></a> first appeared on the Radar last edition, and since December 2015 this project has moved its beta status from private to public, meaning users will no longer be required to have an invitation in order to try it. Let's Encrypt grants access to a simpler mechanism to obtain and manage certificates for a larger set of users who are seeking a way to secure their websites. It also promotes a big step forward in terms of security and privacy. This trend has already begun within ThoughtWorks, and many of our projects now have certificates verified by Let's Encrypt.</p>"
"2016-11",Load Impact,Tools,Trial,"<p><strong><a href=""https://loadimpact.com/"">Load Impact</a></strong> is a SaaS load-testing tool that can generate highly realistic loads of up to 1.2 million concurrent users. Record and playback web interactions using a Chrome plugin simulate network connections for mobile or desktop users and generate load from up to 10 different locations around the world. While not the only on-demand load-testing tool we've used—we also like <a href=""https://blazemeter.com/"">BlazeMeter</a>—our teams were very enthusiastic about Load Impact.</p>"
"2016-11",OWASP Dependency-Check,Tools,Trial,"<p>In a world full of libraries and tools that simplify the life of many software developers, deficiencies in their security have become visible and have increased the vulnerability surface in the applications that use them. <a href=""https://www.owasp.org/index.php/OWASP_Dependency_Check""><strong>OWASP Dependency-Check</strong></a> automatically identifies potential security problems in the code, checking if there are any known publicly disclosed vulnerabilities, then using methods to constantly update the database of public vulnerabilities. Dependency-Check has some interfaces and plugins to automate this verification in Java and .NET (which we have used successfully) as well as Ruby, Node.js and Python.</p>"
"2016-11",Pa11y,Tools,Trial,"<p><a href=""http://pa11y.org/""><strong>Pa11y</strong></a> is an automatic accessibility tester that can run from the command line and be embedded into a build pipeline. Our teams have had success using Pa11y on a highly dynamic site by first creating a static HTML version, then running the accessibility tests against that. For many systems—especially government websites—accessibility testing is a requirement, and Pa11y makes it all a lot easier.</p>"
"2016-11",Talisman,Tools,Trial,"<p>With the maturity of tools such as <a href=""/radar/tools/hashicorp-vault"">Vault</a>, there is no longer an excuse for storing secrets in code repositories, particularly since this often ends up being the soft underbelly of important systems. We’ve previously mentioned repository-scanning tools such as <a href=""/radar/tools/gitrob"">Gitrob</a>, but we are now pushing proactive tools such as (the ThoughtWorks-created) <strong><a href=""https://github.com/thoughtworks/talisman"">Talisman</a></strong>, which is a prepush hook for Git that scans commits for secrets matching predefined patterns.</p>"
"2016-11",Terraform,Tools,Trial,"<p>With <strong><a href=""https://www.terraform.io/"">Terraform</a></strong>, you can manage cloud infrastructure by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to tools like Puppet, Chef or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports a number of cloud providers while making no attempt to provide an artificial abstraction across those providers. Following our first, more cautious, mention of Terraform almost two years ago, it has seen continued development and has evolved into a stable product that has proven its value in our projects. The issue with state file management can now be sidestepped by using what Terraform calls a ""remote state backend."" We’ve successfully used <a href=""/radar/tools/consul"">Consul</a> for that purpose.</p>"
"2016-11",tmate,Tools,Trial,"<p>Pair programming is an essential technique for us, and—given that we’re seeing more and more teams whose members are distributed across multiple locations—we have experimented with a number of tools to support remote pairing. We certainly liked <a href=""https://screenhero.com/"">ScreenHero</a> but are concerned about its future. For teams that don’t rely on a graphical IDE, using <strong><a href=""https://tmate.io/"">tmate</a></strong> for pairing has turned out to be a great solution. tmate is a fork of the popular tmux tool, and compared to <a href=""http://hamvocke.com/blog/remote-pair-programming-with-tmux/"">tmux for remote pairing</a>, the setup is much easier. Compared to graphical screen-sharing solutions, the bandwidth and resource requirements are modest, and it obviously never suffers from blurry screens. Teams can also set up their own server, thus retaining full control of the privacy and integrity of the solution.</p>"
"2016-11",Webpack,Tools,Trial,"<p><a href=""http://webpack.github.io/""><strong>Webpack</strong></a> has solidified itself as our go-to JavaScript module bundler. With its ever-growing <a href=""https://github.com/webpack/docs/wiki/list-of-loaders"">list of loaders</a>, it provides a single dependency tree for all your static assets, allowing flexible manipulation of JavaScript, CSS, etc. and minimizing what needs to be sent to the browser and when. Of particular relevance is the smooth integration among AMD, CommonJS and <a href=""/radar/languages-and-frameworks/es6"">ES6</a> modules and how it has enabled teams to work in ES6 and seamlessly transpile (using <a href=""http://babeljs.io/"">Babel</a>) to earlier versions for browser compatibility. Many of our teams also value <a href=""http://browserify.org/"">Browserify</a>, which covers a similar space but is more focused on making Node.js modules available for client-side use.</p>"
"2016-11",Zipkin,Tools,Trial,"<p>Development on <a href=""https://github.com/openzipkin/zipkin""><strong>Zipkin</strong></a> has continued apace, and since the middle of 2015 it has moved to the <em>openzipkin/zipkin</em> organization at GitHub. There are now bindings for Python, Go, Java, Ruby, Scala and C#; and there are Docker images available for those wanting to get started quickly. We still like this tool. There is an active and growing community around usage of it, and implementation is getting easier. If you need a way of measuring the end-to-end latency of many logical requests, Zipkin continues to be a strong choice.</p>"
"2016-11",Android-x86,Tools,Assess,"<p><strong><a href=""http://www.android-x86.org/"">Android-x86</a></strong> is a port of the <a href=""http://source.android.com/"">Android open source</a> project to x86 platforms. The project started by hosting various patches from the community for x86 support but then later created its own codebase to provide support for different x86 platforms. We have seen significant time savings by utilizing Android-x86 in our CI servers instead of emulators for hermetic UI testing. However, for UI-specific tests targeting a particular device resolution—simulating low memory, bandwidth and battery—it is better to stick with emulators.</p>"
"2016-11",axios,Tools,Assess,"<p>Our teams have had success with <a href=""https://github.com/mzabriskie/axios""><strong>axios</strong></a>, a promises-based HTTP client in JavaScript that they describe as ""better than <a href=""/radar/languages-and-frameworks/fetch"">Fetch</a>."" The project has lots of endorsements and activity on GitHub, and it gets a thumbs-up from us.</p>"
"2016-11",Bottled Water,Tools,Assess,"<p>With the growth of interest in streaming data architectures and the downstream data lakes they feed, we have seen an increased reliance on ""change data capture"" tooling to connect transactional data stores to stream-processing systems. <strong><a href=""https://github.com/confluentinc/bottledwater-pg"">Bottled Water</a></strong> is a welcome addition to this field, converting changes in <a href=""/radar/platforms/postgresql-for-nosql"">PostgreSQL</a>’s write-ahead log into <a href=""/radar/tools/apache-kafka"">Kafka</a> events. One downside of this approach, however, is that you are tied to low-level database events rather than the higher-level <a href=""/radar/techniques/capture-domain-events-explicitly"">business events</a> we recommend as the foundation for an event-oriented architecture.</p>"
"2016-11",Clojure.spec,Tools,Assess,"<p>One of those perpetual developer debates involves language typing: How much is just right? <a href=""/radar/languages-and-frameworks/clojure"">Clojure</a>, the dynamically typed functional Lisp on the JVM, added a new entry into this discussion that blurs the lines. <strong><a href=""https://clojure.org/about/spec"">Clojure.spec</a></strong> is a new facility built into Clojure that allows developers to wrap type and other verification criteria around data structures, such as allowable value ranges. Once they are established, Clojure uses these specifications to provide a slew of benefits: generated tests, validation, destructuring of data structures and others. Clojure.spec is a promising way to have the benefits of types and ranges where developers need them but not everywhere.</p>"
"2016-11",FBSnapshotTestcase,Tools,Assess,"<p>Testing the visual portion of iOS applications can be painful, slow and flakey, which is why we’re happy to include <strong><a href=""https://github.com/facebook/ios-snapshot-test-case"">FBSnapshotTestcase</a></strong> in our toolkit. It automates taking, storing and diff-ing snapshots of UI components so you can keep your interfaces pixel-perfect. Since it runs as a unit test (in the simulator), it is faster and more reliable than functional-testing approaches.</p>"
"2016-11",LambdaCD,Tools,Assess,"<p><a href=""http://www.lambda.cd""><strong>LambdaCD</strong></a> provides teams with a way to define Continuous Delivery pipelines in Clojure. This brings the benefits of <a href=""/radar/tools/infrastructure-as-code"">Infrastructure as code</a> to the configuration of CD servers: source-control management, unit testing, refactoring and code reuse. In the ""pipelines as code"" space, LambdaCD stands out for being lightweight, self-contained and fully programmable, allowing teams to work with their pipelines in the same way that they do with their code.</p>"
"2016-11",Pinpoint,Tools,Assess,"<p>Teams using the Phoenix Server or <a href=""/radar/techniques/phoenix-environments"">Phoenix Environment</a> techniques have found little in the way of support from Application Performance Management (APM) tools. Their licensing models, based on long-running, limited amounts of tin, and their difficulty in dealing with ephemeral hardware, have meant that they are often more trouble than they are worth. However, distributed systems need monitoring, and at some point many teams recognize the need for an APM tool. We think <strong><a href=""https://github.com/naver/pinpoint"">Pinpoint</a></strong>, an open source tool in this space, is worth investigating as an alternative to AppDynamics and Dynatrace. Pinpoint is written in Java, with plugins available for many servers, databases and frameworks. While we think you can go a long way using a combination of other lightweight open source tools—<a href=""/radar/tools/zipkin"">Zipkin</a>, for example—if you are in the market for an APM, Pinpoint is worth considering.</p>"
"2016-11",Pitest,Tools,Assess,"<p><a href=""http://pitest.org""><strong>Pitest</strong></a> is a test coverage analysis tool for Java that uses a mutation-testing technique. Traditional test coverage analysis tends to measure the number of lines that are executed by your tests. It is therefore only able to identify code that is definitely not tested. Mutation testing, on the other hand, tries to test the quality of those lines that are executed by your test code and yet might contain general errors. Several problems can be spotted this way, helping the team to measure and grow a healthy test suite. Most of such tools tend to be slow and difficult to use, but Pitest has proven to have better performance, is easy to set up, and is actively supported.</p>"
"2016-11",Repsheet,Tools,Assess,"<p>Attacks on web properties using bots are becoming more sophisticated. Identifying these bad actors and their behaviors is the goal of the <a href=""http://getrepsheet.com/""><strong>Repsheet</strong></a> project. It's a plugin for either Apache or NGINX that records user activity, fingerprints actors using predefined and user-defined rules, and then allows action to be taken, including the ability to block offensive actors. It includes a utility that visualizes current actors; this puts the ability to manage bot-based threats in the hands of team members, increasing security awareness for teams. We like this since it's a good example of a simple tool solving a very real but often invisible problem—bot-based attacks.</p>"
"2016-11",Scikit-learn,Tools,Assess,"<p><a href=""http://scikit-learn.org/stable/""><strong>Scikit-learn</strong></a> is an increasingly popular machine-learning library written in Python. It provides a robust set of machine-learning models such as clustering, classification, regression and dimensionality reduction, and a rich set of functionality for companion tasks like model selection, model evaluation and data preparation. Since it is designed to be simple, reusable in various contexts and well documented, we see this tool accessible even to nonexperts to explore the machine-learning space.</p>"
"2016-11",Jenkins as a deployment pipeline,Tools,Hold,"<p>We know we're in perilous territory here, since we build a competing tool, but we feel we have to address a persistent problem. Continuous Integration tools like CruiseControl and Jenkins are valuable for software development, but as your build process gets more complex it requires something beyond just Continuous Integration: It requires a <a href=""http://martinfowler.com/bliki/DeploymentPipeline.html"">deployment pipeline</a>. We frequently see people trying to use <strong>Jenkins as a Deployment Pipeline</strong> with the aid of plugins, but our experience is that these quickly become a tangle. Jenkins 2.0 introduces ""Pipeline as Code"" but continues to model pipelines using plugins and fails to change the core Jenkins product to model pipelines directly. In our experience, tools that are built around a first-class representation of deployment pipelines are much more suitable, and this is what drove us to replace CruiseControl with <a href=""https://www.go.cd/"">GoCD</a>. Today we see several products that embrace deployment pipelines, including <a href=""/radar/tools/concourse-ci"">ConcourseCI</a>, <a href=""/radar/tools/lambdacd"">LambdaCD</a>, <a href=""http://spinnaker.io/"">Spinnaker,</a> <a href=""https://github.com/drone"">Drone</a> and <a href=""/radar/tools/gocd"">GoCD</a>.</p>"
"2017-03",fastlane,Tools,Adopt,"<p>Web application developers have it easy when it comes to simplifying and automating diverse application workflows; they can choose from a variety of solutions to help automate release processes. When developing for mobile, however, we're dealing with two operating systems with two different ways of building, testing, distribution, generating screenshots, signing and distributing applications. To help ease the pain, our teams have adopted <strong><a href=""https://fastlane.tools/"">fastlane</a></strong> as the go-to tool to automate the release process for iOS and Android applications. Using simple configurations and multiple pipelines, they can achieve <a href=""/radar/techniques/continuous-delivery-cd"">continuous delivery</a> for mobile development.</p>"
"2017-03",Grafana,Tools,Adopt,"<p>When combining modern techniques and architecture styles, such as <a href=""/radar/techniques/microservices"">microservices</a>, <a href=""/radar/techniques/devops"">DevOps</a> and <a href=""/radar/techniques/qa-in-production"">QA in production</a>, development teams need increasingly sophisticated monitoring. Simply looking a graphs of disk usage and CPU utilization is not sufficient anymore, and many teams collect application and business-specific metrics using tools such a Graphite and Kibana. <strong><a href=""http://grafana.org/"">Grafana</a></strong> makes it easy to create useful and elegant dashboards for data from a number of sources. A particularly useful feature allows timescales of different graphs to be synchronized, which helps with spotting correlations in the underlying data. The templating system that is being added shows a lot promise and will likely make managing sets of similar services even easier. Based on its strengths, Grafana has become our default choice in this category.</p>"
"2017-03",Airflow,Tools,Trial,"<p><strong><a href=""https://airflow.incubator.apache.org/"">Airflow</a></strong> is a tool to programmatically create, schedule and monitor data pipelines. By treating Directed Acyclic Graphs (DAGs) as code, it encourages maintainable, versionable and testable data pipelines. We've leveraged this configuration in our projects to create dynamic pipelines that resulted in lean and explicit data workflows. Airflow makes it easy to define your operators and executors and to extend the library so that it fits the level of abstraction that suits your environment.</p>"
"2017-03",Cake and Fake,Tools,Trial,"<p>MSBuild has been the primary build system in the .NET ecosystem since its introduction in 2005; however, it suffers from many of the same weaknesses we've previously called out in <a href=""/radar/tools/maven"">Maven</a>. The .NET community has started to develop alternatives to MSBuild which are easier to maintain and more flexible, and evolve more fluidly as a project grows. Two of these alternatives are <strong><a href=""http://cakebuild.net/"">Cake</a> and <a href=""http://fsharp.github.io/FAKE/"">Fake</a></strong>. Cake uses a DSL built in C#, while Fake uses F#. Each has seen significant growth over the last year and has proven to be a viable alternative to MSBuild for orchestrating common build tasks in .NET projects.</p>"
"2017-03",Galen,Tools,Trial,"<p>Testing that layout and styling of responsive websites is working as expected across various form factors can be a slow and often manual process. <strong><a href=""http://galenframework.com/"">Galen</a></strong> helps ease this problem by providing a simple language, running on top of <a href=""http://www.seleniumhq.org/"">Selenium</a>, that allows you to specify expectations for the appearance of your website in various screen sizes. Although Galen suffers from the typical brittleness and speed issues of any end-to-end testing approach, we have found benefit in the early feedback on design issues.</p>"
"2017-03",HashiCorp Vault,Tools,Trial,"<p>Having a way to securely manage secrets is increasingly becoming a huge project issue. The old practice of keeping secrets in a file or in environment variables is becoming hard to manage, especially in environments with multiple applications and large numbers of <a href=""/radar/techniques/microservices"">microservices</a>. <a href=""https://github.com/hashicorp/vault""><strong>HashiCorp Vault</strong></a> addresses the problem by providing mechanisms for securely accessing secrets through a unified interface. It has served us well on a number of projects, and our teams liked how easy it was to integrate Vault with their services. Storing and updating secrets is a bit cumbersome, because it relies on a command-line tool and a fair amount of discipline from the team.</p>"
"2017-03",Pa11y,Tools,Trial,"<p><a href=""http://pa11y.org/""><strong>Pa11y</strong></a> is an automatic accessibility tester that can run from the command line and be embedded into a build pipeline. Our teams have had success using Pa11y on a highly dynamic site by first creating a static HTML version, then running the accessibility tests against that. For many systems—especially government websites—accessibility testing is a requirement, and Pa11y makes it all a lot easier.</p>"
"2017-03",Scikit-learn,Tools,Trial,"<p><strong><a href=""http://scikit-learn.org/stable/"">Scikit-learn</a></strong> is not a new tool (it is approaching its tenth birthday); what is new is the rate of adoption of machine-learning tools and techniques outside of academia and major tech companies. Providing a robust set of models and a rich set of functionality, Scikit-learn plays an important role in making machine-learning concepts and capabilities more accessible to a broader (and often non-expert) audience.</p>"
"2017-03",Serverless Framework,Tools,Trial,"<p>The popular <strong><a href=""https://serverless.com/"">Serverless Framework</a></strong> provides tooling for scaffolding and deployment of serverless applications, primarily using <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> and other AWS offerings. Serverless Framework provides template support for JavaScript, Python, Java and C#, and has an active community that contributes plugins that extend the framework. The framework also supports the Apache incubator project OpenWhisk as an alternative to AWS Lambda.</p>"
"2017-03",Talisman,Tools,Trial,"<p>With the maturity of tools such as <a href=""/radar/tools/hashicorp-vault"">Vault</a>, there is no longer an excuse for storing secrets in code repositories, particularly since this often ends up being the soft underbelly of important systems. We've previously mentioned repository-scanning tools such as <a href=""/radar/tools/gitrob"">Gitrob</a>, but we are now pushing proactive tools such as (the ThoughtWorks-created) <strong><a href=""https://github.com/thoughtworks/talisman"">Talisman</a></strong>, which is a prepush hook for Git that scans commits for secrets matching predefined patterns.</p>"
"2017-03",Terraform,Tools,Trial,"<p>With <strong><a href=""https://www.terraform.io/"">Terraform</a></strong>, you can manage cloud infrastructure by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to tools like Puppet, Chef or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports a number of cloud providers while making no attempt to provide an artificial abstraction across those providers. Following our first, more cautious, mention of Terraform almost two years ago, it has seen continued development and has evolved into a stable product that has proven its value in our projects. The issue with state file management can now be sidestepped by using what Terraform calls a ""remote state backend."" We've successfully used <a href=""/radar/tools/consul"">Consul</a> for that purpose.</p>"
"2017-03",Amazon Rekognition,Tools,Assess,"<p><strong><a href=""https://aws.amazon.com/rekognition/"">Amazon Rekognition</a></strong> is one of the cloud-based image comprehension tools we've mentioned elsewhere in this Radar. What we like about it is that Amazon has taken a somewhat novel approach to making faces anonymous (using GUIDs) from AWS to accommodate some of the privacy concerns that come with facial recognition.</p>"
"2017-03",Android-x86,Tools,Assess,"<p><strong><a href=""http://www.android-x86.org/"">Android-x86</a></strong> is a port of the <a href=""http://source.android.com/"">Android open source</a> project to x86 platforms. The project started by hosting various patches from the community for x86 support but then later created its own codebase to provide support for different x86 platforms. We have seen significant time savings by utilizing Android-x86 in our CI servers instead of emulators for hermetic UI testing. However, for UI-specific tests targeting a particular device resolution—simulating low memory, bandwidth and battery—it is better to stick with emulators.</p>"
"2017-03",Bottled Water,Tools,Assess,"<p>With the growth of interest in streaming data architectures and the downstream data lakes they feed, we have seen an increased reliance on ""change data capture"" tooling to connect transactional data stores to stream-processing systems. <strong><a href=""https://github.com/confluentinc/bottledwater-pg"">Bottled Water</a></strong> is a welcome addition to this field, converting changes in <a href=""/radar/platforms/postgresql-for-nosql"">PostgreSQL</a>'s write-ahead log into <a href=""/radar/tools/apache-kafka"">Kafka</a> events. One downside of this approach, however, is that you are tied to low-level database events rather than the higher-level <a href=""/radar/techniques/capture-domain-events-explicitly"">business events</a> we recommend as the foundation for an event-oriented architecture.</p>"
"2017-03",Claudia,Tools,Assess,"<p>The combination of <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> with <a href=""/radar/platforms/amazon-api-gateway"">Amazon API Gateway</a> has had a big impact on how we deploy services and APIs. However, even in this serverless configuration, the amount of configuration required to wire things together is not trivial. <strong><a href=""https://claudiajs.com/"">Claudia</a></strong> is a tool which automates deployment of AWS Lambda functions written in JavaScript and associated API Gateway configurations. It provides reasonable defaults, and our teams have found it allows them to get started quickly with Lambda-based microservices.</p>"
"2017-03",Clojure.spec,Tools,Assess,"<p>One of those perpetual developer debates involves language typing: How much is just right? <a href=""/radar/languages-and-frameworks/clojure"">Clojure</a>, the dynamically typed functional Lisp on the JVM, added a new entry into this discussion that blurs the lines. <strong><a href=""https://clojure.org/about/spec"">Clojure.spec</a></strong> is a new facility built into Clojure that allows developers to wrap type and other verification criteria around data structures, such as allowable value ranges. Once they are established, Clojure uses these specifications to provide a slew of benefits: generated tests, validation, destructuring of data structures and others. Clojure.spec is a promising way to have the benefits of types and ranges where developers need them but not everywhere.</p>"
"2017-03",InSpec,Tools,Assess,"<p>How does a business hand autonomy to delivery teams while still making sure their deployed solutions are safe and compliant? How do you ensure that servers, once deployed, remain secure and compliant over their operational lifetime? These are the problems that <strong>InSpec</strong> tries to address. InSpec is an infrastructure testing tool inspired by <a href=""/radar/tools/serverspec"">Serverspec</a>, but with modifications that make the tool more useful for security professionals who need to ensure compliance across thousands of servers. Individual tests can be combined into complete security profiles and run remotely from a command line. InSpec is useful for developers but extends to testing deployed production infrastructure continuously, moving toward <a href=""/radar/techniques/qa-in-production"">QA in production</a>.</p>"
"2017-03",Molecule,Tools,Assess,"<p><strong><a href=""https://github.com/metacloud/molecule"">Molecule</a></strong> is designed to aid in the development and testing of <a href=""/radar/tools/ansible"">Ansible</a> roles. By building the scaffolding for running Ansible role tests on a virtual machine or container of choice, we don't have to setup our testing environment manually. Molecule leverages <a href=""/radar/tools/vagrant"">Vagrant</a>, <a href=""/radar/platforms/docker"">Docker</a>, and <a href=""/radar/platforms/openstack"">OpenStack</a> to manage virtual machines or containers, and supports <a href=""/radar/tools/serverspec"">Serverspec</a>, <a href=""/radar/tools/testinfra"">Testinfra</a>, or <a href=""https://github.com/aelsabbahy/goss"">Goss</a> to run the tests. The default steps in the sequence facility model include: virtual machine management, Ansible linting, idempotence testing and convergence testing. Although it is a fairly young project, we see a great potential for its usage.</p>"
"2017-03",Spacemacs,Tools,Assess,"<p>As any Emacs fan will tell you, Emacs is more than a text editor; it is a platform for character-mapped applications. Over the past few years, there has been an explosion of new developments on this platform, but we think <strong><a href=""https://spacemacs.org"">Spacemacs</a></strong> deserves particular attention. Spacemacs provides an introduction to the Emacs platform, with a new keyboard user-interface, simplified customization layers, and a curated distribution of Emacs packages. One of the project's aims is to be the best of worlds by combining the Vim UI with the <a href=""https://martinfowler.com/bliki/InternalReprogrammability.html"">internal reprogrammability</a> of Emacs. We consider developer productivity tools to be a vital part of effective software development, and if you haven't considered Emacs for a while, we suggest you take a look at how Spacemacs rethinks this classic development platform.</p>"
"2017-03",spaCy,Tools,Assess,"<p><a href=""https://spacy.io/""><strong>spaCy</strong></a> is a Natural Language Processing (NLP) library written in Python. It is a high-performance library, intended for use by developers in production, and applies NLP models suited for processing text that often mixes in emoticons and inconsistent punctuation marks. Unlike other NLP frameworks, spaCy is a pluggable library and not a platform; it is aimed at production applications rather than model training for research. It plays well with <a href=""/radar/platforms/tensorflow"">TensorFlow</a> and the rest of the Python AI ecosystem. We've used spaCy in the enterprise context to build a search engine that takes human language queries and helps users make business decisions.</p>"
"2017-03",Spinnaker,Tools,Assess,"<p><a href=""http://techblog.netflix.com/2015/11/global-continuous-delivery-with.html"">Netflix</a> has open sourced <a href=""http://www.spinnaker.io/""><strong>Spinnaker</strong></a>, its microservices continuous delivery (CD) platform. Compared to other CI/CD platforms, Spinnaker implements cluster management and deployment of baked images to the cloud as first-class features. It supports out-of-the-box deployment and cluster management for multiple cloud providers such as Google Cloud Platform, AWS and <a href=""/radar/platforms/pivotal-cloud-foundry"">Pivotal Cloud Foundry</a>. You can integrate Spinnaker with Jenkins to run a Jenkins job build. We like Spinnaker's opinionated approach for deploying microservices to the cloud—with the exception that Spinnaker's pipelines are created via a user interface (UI) and cannot be configured as code.</p>"
"2017-03",Testinfra,Tools,Assess,"<p>Given the wide use of infrastructure tools today, it should come as no surprise that infrastructure as code has increased in current projects. With this tendency comes the need for testing this code. With <strong>Testinfra</strong> you can test the actual state of your servers configured manually or by tools such as <a href=""/radar/tools/ansible"">Ansible</a>, <a href=""/radar/tools/puppet"">Puppet</a> and <a href=""/radar/platforms/docker"">Docker</a>. Testinfra aims to be a <a href=""/radar/tools/serverspec"">Serverspec</a> equivalent in Python and is written as a plugin to the Pytest test engine.</p>"
"2017-03",Yarn,Tools,Assess,"<p><strong><a href=""https://yarnpkg.com/en/"">Yarn</a></strong> is a new package manager that replaces the existing workflow for the npm client while remaining compatible with the npm registry. With the npm client, we may end up with a different tree structure under node_modules based on the order that dependencies are installed. This nondeterministic nature can cause ""works on my machine"" problems. By breaking the installation steps into resolution, fetching and linking, Yarn avoids these issues using deterministic algorithms and lockfiles and thus guarantees repeatable installations. We've also seen significantly faster builds in our continuous integration (CI) environment because of Yarn caching all the packages it downloads.</p>"
"2017-03",Pipelines as code,Techniques,Adopt,"<p>Teams are pushing for automation across their environments(testing), including their development infrastructure. <strong>Pipelines as code</strong> is defining the deployment pipeline through code instead of configuring a running CI/CD tool. <a href=""/radar/tools/lambdacd"">LambdaCD</a>, <a href=""http://readme.drone.io/usage/overview/"">Drone</a>, <a href=""/radar/tools/gocd"">GoCD</a> and <a href=""/radar/tools/concourse-ci"">Concourse</a> are examples that allow usage of this technique. Also, configuration automation tools for CI/CD systems like <a href=""https://github.com/SpringerSBM/gomatic"">GoMatic</a> can be used to treat the deployment pipeline as code—versioned and tested.</p>"
"2017-03",APIs as a product,Techniques,Trial,"<p>Companies have wholeheartedly embraced APIs as a way to expose business capabilities to both external and internal developers. APIs promise the ability to experiment quickly with new business ideas by recombining core capabilities. But what differentiates an API from an ordinary enterprise integration service? One difference lies in treating <strong>APIs as a product</strong> , even when the consumer is an internal system or fellow developer. Teams that build APIs should understand the needs of their customers and make the product compelling to them. Usability testing and UX research can lead to a better design and understanding of the API usage patterns and help bring a product mindset to APIs. APIs, like products, should be actively maintained and supported, and, easy to use. They should have an owner who advocates for the customer and strives for continual improvement. In our experience, product orientation is the missing ingredient that makes the difference between ordinary enterprise integration and an agile business built on a platform of APIs.</p>"
"2017-03",Decoupling secret management from source code,Techniques,Trial,"<p>In previous Radars issues we mentioned tools such as <a href=""https://www.agwa.name/projects/git-crypt/"">git-crypt</a> and <a href=""/radar/tools/blackbox"">Blackbox</a> that allow us to keep secrets safe inside the source code. <strong>Decoupling secret management from source code</strong> is our way to remind technologists that there are other options for storing secrets. For example, <a href=""/radar/tools/hashicorp-vault"">HashiCorp vault</a>, CI servers and configuration management tools provide mechanisms for storing secrets that are not linked to the source code of an application. Both approaches are viable and we recommend you use at least one of them in your projects.</p>"
"2017-03",Hosting PII data in the EU,Techniques,Trial,"<p>In a number of countries, we see government agencies seeking broad access to private, personally identifiable information (PII). The increased use of public cloud solutions makes it more difficult for organizations to protect the data entrusted to them by their users while also respecting all relevant laws. The European Union has some of the most progressive privacy laws, and all the major cloud providers—Amazon, Google and Microsoft—offer multiple data centers and regions within the European Union. Therefore, we recommend that companies, especially those with a global user base, assess the feasibility of a safe haven for their users' data by <strong>hosting PII data in the EU</strong>. Since we wrote about this technique in the last Radar, we have rolled out a new internal system that handles sensitive information relating to all our employees, and we have chosen to host it in a data center located in the European Union.</p>"
"2017-03",Legacy in a box,Techniques,Trial,"<p>Working with legacy code, especially large monoliths, is one of the most unsatisfying, high-friction <a href=""https://thoughtworks.wistia.com/medias/ogq5b8d80y"">experiences for developers</a>. Although we caution against extending and actively maintaining legacy monoliths, they continue to be dependencies in our environments, and developers often underestimate the cost and time required to develop against these dependencies. To help reduce the friction, developers have used virtualized <a href=""/radar/techniques/machine-image-as-a-build-artifact"">machine images</a> or container images with <a href=""/radar/platforms/docker"">Docker</a> containers to create immutable images of legacy systems and their configurations. The intent is to contain the <strong>legacy in a box</strong> for developers to run locally and remove the need for rebuilding, reconfiguring or sharing environments. In an ideal scenario, teams that own legacy systems generate the corresponding boxed legacy images through their build pipelines, and developers can then run and orchestrate these images in their allocated sandbox more reliably. Although this approach has reduced the overall time spent by each developer, it has had limited success when the teams owning the downstream dependencies have been reluctant to create container images for others to use.</p>"
"2017-03",Lightweight Architecture Decision Records,Techniques,Trial,"<p>Although much documentation can be replaced with highly readable code and tests, in a world of <a href=""/radar/techniques/evolutionary-architecture"">evolutionary architecture</a> it's important to record certain design decisions for the benefit of future team members and for external oversight. <strong>Lightweight Architecture Decision Records</strong> is <a href=""http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"">a technique</a> for capturing important architectural decisions along with their context and consequences. Although these items are often stored in a wiki or collaboration tool, we generally prefer <a href=""https://github.com/npryce/adr-tools"">storing them in source control</a> with simple markup.</p>"
"2017-03",Progressive Web Applications,Techniques,Trial,"<p>The increase in <strong>Progressive Web Applications</strong> (PWAs) is the latest attempt to bring back the mobile web in response to users' ""app fatigue"". Originally proposed by Google in 2015, PWAs are web applications that take advantage of the latest technologies to combine the best of web and native mobile applications. Using a set of open standard technologies such as, <a href=""https://w3c.github.io/ServiceWorker/"">service workers</a>, the <a href=""https://www.w3.org/TR/appmanifest/"">app manifest</a>, and cache and push APIs, we can create applications that are platform independent and deliver app-like user experiences. This brings parity to web and native applications and helps mobile developers reach users beyond the walled garden of the app stores. Think of PWAs as websites that act and feel like native apps.</p>"
"2017-03",Prototyping with InVision and Sketch,Techniques,Trial,"<p>The combined use of InVision and Sketch has changed the way some people approach web application development. Although these are tools, it is really the technique of <strong>prototyping with InVision and Sketch</strong> that makes this blip significant. Creating rich, clickable prototypes as the starting point for implementing front-end and back-end behavior helps speed up the development and eliminates churn in the implementation details. This combined use of these tools strikes the right balance between premature elaboration of visual detail and capturing early user feedback on the interactive experience.</p>"
"2017-03",Serverless architecture,Techniques,Trial,"<p>A <strong><a href=""http://www.martinfowler.com/articles/serverless.html"">serverless architecture</a></strong> approach replaces long-running virtual machines with ephemeral compute power that comes into existence on request and disappears immediately after use. Our teams like the serverless approach; it's working well for us and we consider it a valid architectural choice. Note that serverless doesn't have to be an all-or-nothing approach: some of our teams have deployed a new chunk of their systems using serverless while sticking to a traditional architectural approach for other pieces. Although <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> is almost synonymous with serverless, the other major cloud providers all have similar offerings, and we also recommend assessing niche players such as <a href=""https://webtask.io/"">webtask</a>.</p>"
"2017-03",Client-directed query,Techniques,Assess,"<p>Although many problems that people encounter with RESTful approaches to APIs can be attributed to the <a href=""/radar/techniques/anemic-rest"">anemic REST</a> antipattern, some use cases warrant exploration of other approaches. In particular, organizations that have to support a long tail of client applications (and thus a likely proliferation of API versions even if they employ <a href=""/radar/techniques/consumer-driven-contract-testing"">consumer-driven contracts</a>)—and have a large portion of their APIs supporting the endless-list style of activity feeds—may hit some limits in RESTful architectures. These can sometimes be mitigated by employing the <strong>client-directed query</strong> approach to client-server interaction. We see this approach being successfully used in both <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> and <a href=""https://github.com/Netflix/falcor"">Falcor</a>, where clients have more control over both the contents and the granularity of the data returned to them. This does put more responsibility onto the service layer and can still lead to tight coupling to the underlying data model, but the benefits may be worth exploring if well-modeled RESTful APIs aren't working for you.</p>"
"2017-03",Container security scanning,Techniques,Assess,"<p>The container revolution instigated by <a href=""/radar/platforms/docker"">Docker</a> has massively reduced the friction in moving applications between environments but at the same time has blown a rather large hole in the traditional controls over what can go to production. The technique of <strong>container security scanning</strong> is a necessary response to this threat vector. Docker now provides its own <a href=""https://blog.docker.com/2016/05/docker-security-scanning/"">security scanning tools</a>, as does <a href=""https://coreos.com/blog/vulnerability-analysis-for-containers/"">CoreOS</a>, and we've also had success with the <a href=""https://benchmarks.cisecurity.org/"">CIS Security Benchmarks</a>. Whichever approach you take, we believe the topic of automated container security validation is of high value and a necessary part of PaaS thinking.</p>"
"2017-03",Conversationally aware APIs,Techniques,Assess,"<p>Technologies such as <a href=""https://developer.amazon.com/alexa"">Amazon Alexa</a>, <a href=""https://voice.google.com"">Google Voice</a> and Siri have dramatically lowered the bar for voice-based interaction with software. However, a more conversational style of input (voice or text) can be hard to build on top of many existing APIs, especially when it comes to a more stateful style of interaction where a follow-up interaction needs to be aware of the overall conversational context. In this style of interaction, for example, we'd like to inquire about trains from Manchester to Glasgow and then being able to ask ""What time is the first departure?"" without having to give the context of the conversation again. Normally this context would be present in the initial response we send back to a browser, but in the case of voice interfaces we need to handle this context elsewhere. <strong>Conversationally aware APIs</strong> can be an example of the <a href=""/radar/techniques/bff-backend-for-frontends"">backend for front-end pattern</a> where the front-end is a voice or chat platform. This type of API can handle the specifics of this style of interaction by managing conversation states while calling underlying services on behalf of the voice front-end.</p>"
"2017-03",Differential privacy,Techniques,Assess,"<p>It has long been known that ""anonymized"" bulk data sets can reveal information about individuals, especially when multiple data sets are cross-referenced together. With <a href=""https://www.washingtonpost.com/news/the-switch/wp/2016/05/13/new-government-data-shows-a-staggering-number-of-americans-have-stopped-basic-online-activities/"">increasing concern over personal privacy</a>, some companies—including <a href=""https://www.wired.com/2016/06/apples-differential-privacy-collecting-data/"">Apple</a> and <a href=""http://research.google.com/pubs/pub42852.html"">Google</a>—are turning to <strong>differential privacy</strong> techniques in order to improve individual privacy while retaining the ability to perform useful analytics on large numbers of users. Differential privacy is a cryptographic technique that attempts to maximize the accuracy of statistical queries from a database while minimizing the chances of identifying its records. These results can be achieved by introducing a low amount of ""noise"" to the data, but it's important to note that this is an ongoing research area. Apple has announced plans to incorporate differential privacy into its products—and we wholeheartedly applaud its commitment to customers' privacy—but the usual Apple secrecy has left some security experts <a href=""https://blog.cryptographyengineering.com/2016/06/15/what-is-differential-privacy/"">scratching their heads</a>. We continue to recommend <a href=""http://martinfowler.com/bliki/Datensparsamkeit.html"">Datensparsamkeit</a> as an alternative approach: simply storing the minimum data you actually need will achieve better privacy results in most cases.</p>"
"2017-03",Micro frontends,Techniques,Assess,"<p>We've seen significant benefit from introducing <a href=""/radar/techniques/microservices"">microservice architectures</a>, which have allowed teams to scale delivery of independently deployed and maintained services. However, teams have often struggled to avoid the creation of front-end monoliths—large and sprawling browser applications that are as difficult to maintain and evolve as the monolithic server-side applications we've abandoned. We're seeing an approach emerge that our teams call <strong>micro frontends</strong>. In this approach, a web application is broken up by its pages and features, with each feature being owned end-to-end by a single team. Multiple techniques exist to bring the application features—some old and some new—together as a cohesive user experience, but the goal remains to allow each feature to be developed, tested and deployed independently from others. The <a href=""/radar/techniques/bff-backend-for-frontends"">BFF - backend for frontends</a> approach works well here, with each team developing a BFF to support its set of application features.</p>"
"2017-03",Platform engineering product teams,Techniques,Assess,"<p>The adoption of cloud and DevOps, while increasing the productivity of teams who can now move more quickly with reduced dependency on centralized operations teams and infrastructure, also has constrained teams who lack the skills to self-manage a full application and operations stack. Some organizations have tackled this challenge by creating <strong>platform engineering product teams</strong>. These teams operate an internal platform which enables delivery teams to self-service deploy and operate systems with reduced lead time and stack complexity. The emphasis here is on API-driven self-service and supporting tools, with delivery teams still responsible for supporting what they deploy onto the platform. Organizations that consider establishing such a platform team should be very cautious not to accidentally create a <a href=""/radar/techniques/separate-devops-team"">separate DevOps team</a>, nor should they simply relabel their <a href=""/radar/platforms/superficial-private-cloud"">existing hosting and operations structure</a> as a platform.</p>"
"2017-03",Social code analysis,Techniques,Assess,"<p><strong>Social code analysis</strong> enriches our understanding of the code quality by overlaying a developer's behavior with the structural analysis of the code. It uses data from version control systems, such as frequency and time of the change as well as the person making the change. You can choose to write your own scripts to analyze such data or use tools such as <a href=""http://www.empear.com/"">CodeScene</a>. CodeScene can help you gain a better understanding of your software systems by identifying hotspots and complex, hard-to-maintain subsystems, coupling between distributed subsystems through temporal coupling, as well as the view of Conway's law in your organization. We believe that with technology trends such as distributed systems, microservices and distributed teams the social dimension of our code is vital in our holistic understanding of our systems' health.</p>"
"2017-03",VR beyond gaming,Techniques,Assess,"<p>The idea of virtual reality has been around for more than 50 years, and with successive advancements in computing technology many ideas have been hyped and explored. We believe that we've reached a tipping point. Reasonably affordable consumer-oriented VR headsets were shipped to the market last year, and modern graphics cards provide sufficient power to create immersive experiences with them. The headsets are mainly targeted at video game enthusiasts, but we're convinced that they'll open the doors to many possibilities for <strong>VR beyond gaming</strong>. Teams without experience in building video games should not underestimate the effort and skill required to create good 3-D models and convincing textures.</p>"
"2017-03",A single CI instance for all teams,Techniques,Hold,"<p>We're compelled to caution, again, against creating <strong>a single CI instance for all teams</strong>. While it's a nice idea in theory to consolidate and centralize Continuous Integration (CI) infrastructure, in reality we do not see enough maturity in the tools and products in this space to achieve the desired outcome. Software delivery teams which must use the centralized CI offering regularly have long delays depending on a central team to perform minor configuration tasks, or to troubleshoot problems in the shared infrastructure and tooling. At this stage, we continue to recommend that organizations limit their centralized investment to establishing patterns, guidelines and support for delivery teams to operate their own CI infrastructure.</p>"
"2017-03",Anemic REST,Techniques,Hold,"<p>With the increasing popularity of the <a href=""/radar/techniques/bff-backend-for-frontends"">BFF - Backend for frontends</a> pattern and use of one-way data-binding frameworks like <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>, we've noticed a backlash against REST-style architectures. Critics accuse REST of causing chatty, inefficient interactions among systems and failing to adapt as client needs evolve. They offer frameworks such as <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> or <a href=""https://netflix.github.io/falcor/"">Falcor</a> as alternative data-fetch mechanisms that let the client specify the format of the data returned. But in our experience, it isn't REST that causes these problems. Rather, they stem from a failure to properly model the domain as a set of resources. Naively developing services that simply expose static, hierarchical data models via templated URLs result in an <strong>anemic REST</strong> implementation. In a richly modeled domain, REST should enable more than simple repetitive data fetching. In a fully evolved RESTful architecture, business events and abstract concepts are also modeled as resources, and the implementation should make effective use of hypertext, link relations and media types to maximize decoupling between services. This antipattern is closely related to the <a href=""http://www.martinfowler.com/bliki/AnemicDomainModel.html"">Anemic Domain Model</a> pattern and results in services that rank low in <a href=""http://martinfowler.com/articles/richardsonMaturityModel.html"">Richardson Maturity Model</a>. We have more advice for designing effective REST APIs in our <a href=""https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"">Insights article</a></p><p>.</p>"
"2017-03",Big Data envy,Techniques,Hold,"<p>We continue to see organizations chasing ""cool"" technologies, taking on unnecessary complexity and risk when a simpler choice would be better. One particular theme is using distributed, Big Data systems for relatively small data sets. This behavior prompts us to put <strong>Big Data envy</strong> on hold once more, with some additional data points from our recent experience. The <a href=""http://cassandra.apache.org/"">Apache Cassandra</a> database promises massive scalability on commodity hardware, but we have seen teams overwhelmed by its architectural and operational complexity. Unless you have data volumes that require a 100+ node cluster, we recommend against using Cassandra. The operational team you'll need to keep the thing running just isn't worth it. While creating this edition of the Radar, we discussed several new database technologies, many offering ""10x"" performance improvements over existing systems. We're always skeptical until new technology—especially something as critical as a database—has been properly proven. <a href=""/radar/tools/jepsen"">Jepsen</a> provides <a href=""http://jepsen.io/analyses.html"">analysis</a> of database performance under difficult conditions and has found <a href=""https://aphyr.com/posts/283-call-me-maybe-redis"">numerous</a> <a href=""https://aphyr.com/posts/284-call-me-maybe-mongodb"">bugs</a> in various NoSQL databases. We recommend maintaining a healthy dose of skepticism and keeping an eye on sites such as Jepsen when you evaluate database tech.</p>"
"2017-03",Ember.js,languages-and-frameworks,Adopt,"<p>If you are faced with building a single-page application (SPA) and trying to choose a framework to build with, <strong><a href=""http://emberjs.com/"">Ember.js</a></strong> has emerged as a leading choice. Our teams praise Ember for its highly productive developer experience, with far fewer surprises than other frameworks such as <a href=""/radar/languages-and-frameworks/angularjs"">AngularJS</a>. The Ember CLI build tooling is a haven in the storm of JavaScript build tools, and the Ember core team and community are highly active and responsive.</p>"
"2017-03",CI theatre,Techniques,Hold,"<p>We've long been advocates of <a href=""https://martinfowler.com/articles/continuousIntegration.html"">continuous integration</a> (CI), and we were <a href=""https://en.wikipedia.org/wiki/CruiseControl"">pioneers</a> in building CI server programs to automatically build projects on check-ins. Used well, these programs run as a daemon process on a <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#EveryoneCommitsToTheMainlineEveryDay"">shared project mainline that developers commit to daily</a>. The CI server <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#EveryCommitShouldBuildTheMainlineOnAnIntegrationMachine"">builds the project</a> and runs <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#MakeYourBuildSelf-testing"">comprehensive tests</a> to ensure the whole software system is integrated and is in an always-releasable state, thus satisfying the principles of <a href=""https://continuousdelivery.com/"">continuous delivery</a>. Sadly, many developers simply set up a CI server and falsely assume they are ""doing CI"" when in reality they miss out on all the benefits. Common failure modes include: running CI against a shared mainline but with infrequent commits, so integration isn't really continuous; running a build with poor test coverage; allowing the build to stay red for long periods; or running CI against feature branches which results in <a href=""http://paulhammant.com/2017/02/14/fake-news-via-continuous-isolation/"">continuous isolation</a>. The ensuing "" <strong>CI theatre</strong>"" might make people feel good, but would fail any credible <a href=""https://martinfowler.com/bliki/ContinuousIntegrationCertification.html"">CI certification test</a>.</p>"
"2017-03",Enterprise-wide integration test environments,Techniques,Hold,"<p>When the enterprise-wide quarterly or monthly releases were considered best practice, it was necessary to maintain a complete environment for performing testing cycles prior to deployment to production. These <strong>enterprise-wide integration test environments</strong> (often referred to as SIT or Staging) are a common bottleneck for continuous delivery today. The environments themselves are fragile and expensive to maintain, often with components that need manual configuration by a separate environment management team. Testing in the staging environment provides unreliable and slow feedback, and testing effort is duplicated with what can be performed on components in isolation. We recommend that organizations incrementally create an independent path to production for key components. Important techniques include <a href=""/radar/techniques/consumer-driven-contract-testing"">contract testing</a>, <a href=""/radar/techniques/decoupling-deployment-from-release"">decoupling deployment from release</a>, <a href=""/radar/techniques/focus-on-mean-time-to-recovery"">focus on mean time to recovery</a> and <a href=""/radar/techniques/qa-in-production"">testing in production</a>.</p>"
"2017-03",Spec-based codegen,Techniques,Hold,"<p>Back in the days when SOAP held sway in the enterprise software industry, the practice of generating client code from WSDL specs was an accepted—even encouraged—practice. Unfortunately, the resulting code was often complex, untestable, difficult to modify and frequently didn't work across implementation platforms. With the advent of REST, we found it better to evolve API clients that use the <a href=""https://martinfowler.com/bliki/TolerantReader.html"">tolerant reader pattern</a> for extracting and processing only the fields needed. Recently we have observed a disturbing return to old habits with developers generating code from API specifications written in <a href=""/radar/tools/swagger"">Swagger</a> or <a href=""/radar/tools/raml"">RAML</a>—a practice that we refer to as <strong>spec-based codegen</strong>. Although such tools are very useful for driving the design of APIs and for extracting documentation, we caution against the tempting shortcut of simply generating client code directly from these specifications. The chances are that such code will be difficult to test and maintain.</p>"
"2017-03",HSTS,Platforms,Adopt,"<p><a href=""https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"">HTTP Strict Transport Security</a> ( <strong>HSTS</strong> ) is a now widely supported policy that allows websites to protect themselves from downgrade attacks. A downgrade attack in the context of HTTPS is one that can cause users of your site to fall back to HTTP rather than HTTPS, allowing for further attacks such as man-in-the-middle attacks. With HSTS, the server sends a header that informs the browser that it should only use HTTPS to access the website. Browser support is now widespread enough that this easy-to-implement feature should be added to any site using HTTPS. Mozilla's <a href=""https://observatory.mozilla.org/"">Observatory</a> can help identify this and other useful headers and configuration options that improve security and privacy. When implementing HSTS, it is critical to verify that all resources load properly over HTTPS, because once HSTS is turned on, there is (almost) no turning back until the expiry time. The directive to include subdomains should be added but, again, a thorough verification that all subdomains support secure transport is required.</p>"
"2017-03",Linux Security Modules,Platforms,Adopt,"<p>The Principle of Least Privilege encourages us to restrict software components to access only the resources that they need. By default, however, a Linux process can do anything its running user can do—from binding to arbitrary ports to spawning new shells. The <strong><a href=""https://www.kernel.org/doc/Documentation/security/LSM.txt"">Linux Security Modules</a></strong> (LSM) framework, which allows for security extensions to be plugged into the kernel, has been used to implement MAC on Linux. SELinux and AppArmor are the predominant and best-known LSM-compatible implementations that ship with the kernel. We recommend that teams learn to use one of these security frameworks (which is why we placed it in the Adopt ring). They help teams assess questions about who has access to what resources on shared hosts, including contained services. This conservative approach to access management will help teams build security into their SDLC processes.</p>"
"2017-03",Apache Mesos,Platforms,Trial,"<p>We've continued to have positive experiences deploying the <strong><a href=""http://mesos.apache.org/"">Apache Mesos</a></strong> platform to manage cluster resources for highly distributed systems. Mesos abstracts out underlying computing resources such as CPU and storage, aiming to provide efficient utilization while maintaining isolation. Mesos includes <a href=""https://mesos.github.io/chronos/"">Chronos</a> for distributed and fault-tolerant execution of scheduled jobs, and <a href=""https://mesosphere.github.io/marathon/"">Marathon</a> for orchestrating long-running processes in containers.</p>"
"2017-03",Auth0,Platforms,Trial,"<p>We have a growing belief that for most scenarios it is rarely worth rolling your own authentication code. Outsourced identity management speeds up delivery, reduces mistakes and tends to enable a faster response to newly discovered vulnerabilities. <strong><a href=""https://auth0.com/"">Auth0</a></strong> has particularly impressed us in this field for its ease of integration, range of protocols and connectors supported, and rich management API.</p>"
"2017-03",AWS Device Farm,Platforms,Trial,"<p>The huge number of mobile devices makes it almost impossible for companies to test their mobile apps on all of them. Enter <strong><a href=""https://aws.amazon.com/device-farm/"">AWS Device Farm</a></strong>, an app-testing service that enables you to run and interact with your Android, iOS and web apps on a wide variety of physical devices that are hosted in the cloud simultaneously. Detailed logs, performance graphs and screenshots are generated during each run to provide general and device-specific feedback. The service offers a lot of flexibility by allowing the state and configuration of each device to be altered in order to reproduce very specific test scenarios. Our teams are using AWS Device Farm to run end-to-end tests on devices with the largest install base for their apps.</p>"
"2017-03",AWS Lambda,Platforms,Trial,"<p>Our teams continue to enjoy using <strong><a href=""https://aws.amazon.com/lambda/"">AWS Lambda</a></strong> and are beginning to use it to experiment with <a href=""/radar/techniques/serverless-architecture"">serverless architectures</a>, combining Lambda with the <a href=""/radar/platforms/amazon-api-gateway"">API Gateway</a>. We do recommend that Lambda functions contain only a moderate amount of code. Ensuring the quality of a solution based on a tangle of many large Lambda functions is difficult, and such a solution may not be cost-effective. For more complex needs, deployments based on containers or VMs are still preferable. In addition, we have run into significant problems using Java for Lambda functions, with erratic latencies up to several seconds as the Lambda container is started. Of course, you can sidestep this issue by using JavaScript or Python, and if Lambda functions do not contain a lot of code, the choice of programming language should not matter too much.</p>"
"2017-03",OpenTracing,Platforms,Trial,"<p>As monolithic applications are being replaced with more complex <a href=""/radar/techniques/microservices"">(micro)service</a> ecosystems, tracing requests across multiple services is becoming the norm. With majority contribution from LightStep and Uber <a href=""http://opentracing.io/""><strong>OpenTracing</strong></a> is rapidly becoming the de facto standard for distributed tracing. There is a growing number of <a href=""http://opentracing.io/documentation/pages/supported-tracers"">tracers</a> supporting OpenTracing standard, including <a href=""/radar/tools/zipkin"">Zipkin</a>, <a href=""/radar/languages-and-frameworks/instana"">Instana</a>, and <a href=""https://uber.github.io/jaeger/"">Jaeger</a>. OpenTracing currently provides vendor-neutral implementation in multiple languages including: Go, JavaScript, Java, Python, Objective-C, C#, C++, Ruby and PHP.</p>"
"2017-03",Unity beyond gaming,Platforms,Trial,"<p>After experiencing years of growth as a platform for game development, <strong><a href=""https://unity3d.com/"">Unity</a></strong> has recently become the platform of choice for VR and AR application development. Whether you're creating a fully immersive world for the Oculus or HTC Vive headsets, a holographic layer for your newly spatial enterprise application or an AR feature set for your mobile app, Unity likely provides what you need to both prototype it and get it ready for prime time. Many of us at ThoughtWorks believe that VR and AR represent the next significant shift in the computing platform, and for now, Unity is the single most important tool in the toolbox we use to develop for this change. We've used Unity to develop all our VR prototypes, as well as AR functionality for headsets and phone/tablet applications.</p>"
"2017-03",.NET Core,Platforms,Assess,"<p><strong><a href=""https://www.microsoft.com/net/core"">.NET Core</a></strong> is an open source modular product for creating applications that can be easily deployed in Windows, macOS and Linux. .NET Core makes it possible to build cross-platform web applications using <a href=""http://www.asp.net/core"">ASP.NET Core</a> with a set of tools, libraries and frameworks—another choice for microservices architecture. The community around .NET Core and other related projects has been growing. New tools have appeared and evolved quickly, such as <a href=""/radar/tools/visual-studio-code"">Visual Studio Code</a>. There are <a href=""/radar/platforms/docker"">Docker</a> <a href=""https://www.microsoft.com/net/core#docker"">images</a> based on both Linux and Windows (<a href=""/radar/platforms/microsoft-nano-server"">Nano Server</a>) with .NET Core that simplify applying a microservice architecture. CoreCLR and CoreFX appeared in the Radar in the past. However, a few months ago Microsoft <a href=""https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0"">announced</a> the release of .NET Core 1.0, the first stable version. We see good new opportunities, changes and a vibrant community as reasons to keep assessing this product.</p>"
"2017-03",Amazon API Gateway,Platforms,Assess,"<p><a href=""https://aws.amazon.com/api-gateway/""><strong>Amazon API Gateway</strong></a> enables developers to expose API services to Internet clients. It offers the usual API gateway features including traffic management, monitoring, authentication and authorization. Our teams have had positive experiences using this service to front <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> as part of <a href=""/radar/techniques/serverless-architecture"">serverless architectures</a>. On the other hand, we have had more challenges using it as a more general purpose gateway to front HTTP/HTTPS endpoints running on EC2—where we have been stymied by a lack of interoperability with VPCs and difficulty in establishing client cert authentication with the gateway. Due to this mixed experience, we would like to advise teams to trial using AWS API Gateway with Lambda but assess suitability when using it in a more general setting.</p>"
"2017-03",api.ai,Platforms,Assess,"<p>In parallel with the recent surge of chatbots and <a href=""/radar/platforms/voice-platforms"">voice platforms</a>, we've seen a proliferation of tools and platforms such as <strong><a href=""https://api.ai/"">api.ai</a></strong> that provide a service to extract intent from text and management of conversational flow that you can hook into. Recently acquired by Google, this ""natural-language-understanding as a service"" offering competes with other players in this space such as <a href=""/radar/platforms/wit-ai"">wit.ai</a> and Amazon's <a href=""https://aws.amazon.com/lex/"">Lex</a>.</p>"
"2017-03",Cassandra carefully,Platforms,Assess,"<p>Apache's <a href=""http://cassandra.apache.org/"">Cassandra</a> database is a powerful, scalable Big Data solution for storing and processing large amounts of data, often using hundreds of nodes split over multiple worldwide locations. It's a great tool and we like it, but too often we see teams run into trouble using it. We recommend using <strong>Cassandra carefully</strong>. Teams often misunderstand the use case for Cassandra, attempting to use it as a general-purpose data store when in fact it is optimized for fast reads on large data sets based on predefined keys or indexes. Its dependence on the storage schema can also make it difficult to evolve over time. Cassandra also has significant operational complexity and some rough edges, so unless you absolutely need the scaling it provides, a simpler solution is usually better. If you don't need Cassandra's specific use-case and scaling characteristics, you might just be choosing it out of <a href=""/radar/techniques/big-data-envy"">Big Data envy</a>. Careful use of Cassandra will include extensive automated testing, and we're happy to recommend <a href=""https://github.com/jsevellec/cassandra-unit"">CassandraUnit</a> as part of your testing strategy.</p>"
"2017-03",Cloud-based image comprehension,Platforms,Assess,"<p>Image comprehension used to be a dark art and required a team of onsite data scientists. In recent years, however, we've come closer to solving problems such as image and facial classification/categorization, facial comparisons, facial landmark identification, and facial recognition. <strong>Cloud-based image comprehension</strong> provides access to machine-learning capabilities through services such as <a href=""https://aws.amazon.com/rekognition/"">Amazon</a><a href=""https://aws.amazon.com/rekognition/"">Rekognition</a>, <a href=""https://www.microsoft.com/cognitive-services/en-us/computer-vision-api"">Microsoft Computer Vision API</a> and <a href=""https://cloud.google.com/vision/"">Google Cloud Vision API</a> which can supplement AR applications and anything involving photo tagging and classification.</p>"
"2017-03",DataStax Enterprise Graph,Platforms,Assess,"<p>We've had some early successes with <a href=""http://www.datastax.com/products/datastax-enterprise-graph""><strong>DataStax Enterprise Graph</strong></a> (DSE Graph) for handling large graph databases. Built on top of <a href=""/radar/platforms/cassandra-carefully"">Cassandra</a>, DSE Graph targets the type of large data sets where our longtime favorite <a href=""/radar/platforms/neo4j"">Neo4j</a> begins to show some limitations. This scale has its trade-offs; for example, you lose the ACID transactions and run-time schema-free nature of Neo4j, but access to the underlying Cassandra tables, the integration of Spark for analytical workloads, and the powerful <a href=""http://tinkerpop.apache.org/"">TinkerPop/Gremlin</a> query language make this an option worth considering.</p>"
"2017-03",Electron,Platforms,Assess,"<p><strong><a href=""http://electron.atom.io/"">Electron</a></strong> is a solid framework for building native desktop clients using web technologies such as HTML, CSS and JavaScript. Teams can leverage their web know-how to deliver polished cross-platform desktop clients without spending time learning another set of technologies.</p>"
"2017-03",Ethereum,Platforms,Assess,"<p>The hype seems to have peaked for blockchains and cryptocurrencies, as evidenced by the slowdown of previous firehose-scale announcements in this area, and we expect some of the more speculative efforts to die out over time. One of the blockchains, <a href=""https://www.ethereum.org/""><strong>Ethereum</strong></a>, while not universally popular among diehard blockchain aficionados, appears in increasing numbers in new initiatives. Ethereum is a public blockchain with a built-in programming language allowing developers to build ""smart contracts"", which are algorithmic movements of ether (the Ethereum cryptocurrency) in response to activity happening on the blockchain. R3CEV, the consortium building blockchain tech for banks, built its first proofs of concept on Ethereum. Ethereum has been used to build a distributed autonomous organization (DAO)—one of the first ""algorithmic corporations""—although a recent heist of <a href=""http://www.coindesk.com/dao-attacked-code-issue-leads-60-million-ether-theft/"">$150 million in the ether</a> demonstrates that the blockchains and cryptocurrencies are still the Wild West of the technology world.</p>"
"2017-03",Hyperledger,Platforms,Assess,"<p><strong>Hyperledger</strong> is a platform built around blockchain technologies. It consists of a blockchain implementation named Fabric and other associated tools. Disregarding the hype surrounding blockchain, our teams have found it easy to get started with these tools. The fact that it is an open source platform supported by the Linux Foundation also adds to our excitement about Hyperledger.</p>"
"2017-03",IndiaStack,Platforms,Assess,"<p><strong><a href=""http://www.indiastack.org"">IndiaStack</a></strong> is a set of Open APIs designed with the goal of transforming India from a data-poor to a data-rich country. The stack emphasizes layered innovation by specifying a minimal set of APIs and encourages the rest of the ecosystem to build custom applications on top of these APIs. <a href=""http://www.indiastack.org/Resource#Aadhaar"">Aadhaar</a> serves as one of the foundation layers, providing authentication services for more than a billion Indian citizens. In addition, there are services to provide paperless transactions through digital signatures (eSign), unified online payment (UPI) and an electronic consent layer (<a href=""https://uidai.gov.in/beta/authentication/aadhaar-financial-inclusion/aadhaar-e-kyc.html"">e-KYC</a>) to securely provide Aadhaar details to service providers. We believe in the Open API–driven initiative to bring digital innovation, and the design principles behind IndiaStack could be used as a change agent for other regions/countries.</p>"
"2017-03",Kafka Streams,Platforms,Assess,<p><strong>Kafka Streams</strong> is a lightweight library for building streaming applications. It's been designed with the goal of simplifying stream processing enough to make it easily accessible as a mainstream application programming model for asynchronous services. It can be a good alternative in scenarios where you want to apply a stream processing model to your problem without embracing the complexity of running a cluster (usually introduced by full-fledged stream processing frameworks).</p>
"2017-03",Keycloak,Platforms,Assess,"<p>In a <a href=""/radar/techniques/microservices"">microservices</a> or any other distributed architecture, one of the most common needs is to secure the services or APIs through authentication and authorization features. This is where <strong><a href=""http://www.keycloak.org/"">Keycloak</a></strong> comes in. Keycloak is an open source identity and access management solution that makes it easy to secure applications or microservices with little to no code. Out of the box, it supports single sign-on, social login, and standard protocols such as OpenID Connect, OAuth2 and SAML.</p>"
"2017-03",Mesosphere DCOS,Platforms,Assess,"<p><strong><a href=""https://mesosphere.com/product/"">Mesosphere DCOS</a></strong> is a platform built on top of <a href=""/radar/platforms/apache-mesos"">Mesos</a> that abstracts away your underlying infrastructure for containerized applications as well as for applications you don't want to run inside Docker. This may be overkill for more modest deployments, but we're beginning to see successes with both the commercial and <a href=""https://dcos.io/"">open source versions</a>. We particularly like that it facilitates portability between different cloud providers as well as dedicated hardware, and that for containerized workloads you're not tied into one container orchestration framework. Although upgrades can be a little more complex than we would like, the overall stack is stabilizing nicely.</p>"
"2017-03",Mosquitto,Platforms,Assess,"<p>In our experience—for Internet of Things (IoT) solutions where a lot of devices communicate with each other and/or a central data hub—the MQTT connectivity protocol has proven itself. We've also come to like the <strong><a href=""http://mosquitto.org/"">Mosquitto</a></strong> MQTT broker. It might not satisfy all demands, particularly with regard to scalability, but its compact nature and easy setup makes it ideal for development and testing purposes.</p>"
"2017-03",Nuance Mix,Platforms,Assess,"<p><strong><a href=""https://developer.nuance.com/public/index.php?task=mix"">Nuance Mix</a></strong> is a framework for natural language processing from the company that created the speech-to-text technology behind Dragon Speaking and the first roll-out of Siri. This framework supports the creation of grammars that allow for free-form user interaction via voice. The developer defines a domain-specific grammar that the framework can train itself to understand. The outcomes are responses to user input that identify the user's intents and interaction concepts. At first, it is limited to phrases close to the ones used to train it, but over time it can start to identify meaning from more divergent phrasing. Though it is still in beta, the accuracy from early exploration has been compelling, and the eventual product is one to watch for application forms that could benefit from hands-free user interaction—including mobile, IoT, AR, VR and interactive spaces.</p>"
"2017-03",OpenVR,Platforms,Assess,"<p><strong><a href=""https://github.com/ValveSoftware/openvr"">OpenVR</a></strong> is the underlying SDK in making many of the VR head-mounted displays (HMDs) work with Unity and will likely keep growing in importance. Much of the VR work at ThoughtWorks was built on top of OpenVR, because it will run on any HMD, unlike the other SDKs. Though it is not open source, it is free via the license. The Oculus SDK is more restrictive in its licensing and only works on Oculus devices. <a href=""http://www.osvr.org/"">OSVR</a>, while truly open source, doesn't seem to have as much adoption yet. If you're going to develop a VR application and target as many devices as possible—and not use Unity or Unreal to develop them—OpenVR is the most concrete and pragmatic solution right now.</p>"
"2017-03",PlatformIO,Platforms,Assess,"<p><strong><a href=""http://platformio.org/"">PlatformIO</a></strong> provides a rich ecosystem for IoT development by providing cross-platform builds, library management and good integration with existing IDEs. The intelligent code completion and Smart Code Linter with built-in terminal and serial port monitor greatly enhances the developer experience. It also organizes and maintains <a href=""http://platformio.org/lib"">thousands of libraries</a> and provides a clean dependency manager with semantic versioning to ease IoT development. We've started using PlatformIO in a few IoT projects and we really like it for its simplicity and wide support of <a href=""http://platformio.org/platforms"">platforms</a> and <a href=""http://platformio.org/boards"">boards</a>.</p>"
"2017-03",Tango,Platforms,Assess,"<p>Alongside virtual reality (VR), which has a relatively high bar to entry due to hardware requirements and the effort to create virtual worlds, alternate reality (AR) and mixed reality (MR) also entered into the mainstream last year. Pokémon Go provided evidence that regular smartphones are sufficient to create compelling AR/MR experiences. <strong><a href=""https://get.google.com/tango/"">Tango</a></strong> is a new hardware sensor technology for mobile phones that further enhances the possibilities for AR/MR on phones. It allows apps to acquire detailed 3-D measurements of the user's surroundings so that virtual objects can be placed and rendered more convincingly on the camera feed. The first phones with Tango technology are now available.</p>"
"2017-03",Voice platforms,Platforms,Assess,"<p><strong>Voice platforms</strong> such as <a href=""https://developer.amazon.com/alexa"">Amazon Alexa</a> and <a href=""https://developers.google.com/actions/"">Google Home</a> are riding high on the hype cycle; some even herald the ubiquity of the conversational voice interface. We're already integrating conversational UIs into products and seeing the impact of this new interaction in how we design interfaces. Alexa specifically was built from the ground up without a screen and treats the conversational UI as first-class. But it's still too early to believe the hype, and we expect more big players to get in the game.</p>"
"2017-03",WebVR,Platforms,Assess,"<p><strong><a href=""https://webvr.info/"">WebVR</a></strong> is an experimental JavaScript API that enables you to access VR devices through your browser. It has garnered support from the community and is available through nightly builds as well as in some release versions. If you are looking to build VR experiences in your browser, then this is a great place to start. This technology alongside complementary tools such <a href=""/radar/languages-and-frameworks/three-js"">Three.js</a>, <a href=""https://aframe.io/"">A-Frame</a>, <a href=""https://github.com/facebookincubator/react-vr"">ReactVR</a>, <a href=""https://github.com/argonjs/argon"">Argon.js</a> and <a href=""https://github.com/awe-media/awe.js"">Awe.js</a> brings AR experiences to the browser. The flurry of tools in this space, alongside Internet commission standards, could help promote stronger adoption of AR and VR.</p>"
"2017-03",wit.ai,Platforms,Assess,"<p>Hype surrounding machine intelligence has reached a crescendo, but as with Big Data, useful frameworks and tools are waiting to be discovered among all the hot air. One such tool is <a href=""https://wit.ai/""><strong>wit.ai</strong></a>, a SaaS platform that allows developers to create conversational interfaces using natural language processing (NLP). Wit works with either text or speech inputs, helps developers manage conversational intent and allows custom business logic to be implemented using JavaScript. The system is free for commercial and noncommercial use and encourages the creation of open applications. Be aware that you must agree to let Wit use your data in order to improve the service and for its own analysis, so read the <a href=""https://wit.ai/terms"">terms and conditions</a> carefully. Another contender in this space is the <a href=""https://dev.botframework.com/"">Microsoft Bot Framework</a>, but it's available only in limited preview form as of this writing. As with most things Microsoft, we expect the Bot Framework to evolve quickly, so it's worth keeping an eye on.</p>"
"2017-03",CMS as a platform,Platforms,Hold,"<p>We are seeing too many organizations run into trouble as they attempt to use their <strong>CMS as a platform</strong> for delivering large and complex digital applications. This is often driven by the vendor-fueled hope of bypassing unresponsive IT organizations and enabling the business to drag and drop changes directly to production. While we are very supportive of providing content producers with the right tools and workflows, for applications with complex business logic we tend to recommend treating your CMS as a component of your platform (often in a hybrid or headless mode) cooperating cleanly with other services, rather than attempting to implement all of your functionality in the CMS itself.</p>"
"2017-03",Overambitious API gateways,Platforms,Hold,"<p>One of our regular complaints is about business smarts implemented in middleware, resulting in transport software with ambitions to run critical application logic. Vendors in the highly competitive API gateway market continue to add features that differentiate their products. This results in <strong>overambitious API gateway</strong> products whose functionality—on top of what is essentially a reverse proxy—encourages designs that are difficult to test and deploy. API gateways can provide utility in dealing with some generic concerns—for example, authentication and rate-limiting—but any domain smarts such as data transformation or rule processing should live in applications or services where they can be controlled by product teams working closely with the domains they support.</p>"
"2017-03",Python 3,languages-and-frameworks,Adopt,"<p><strong>Python 3</strong> introduced many useful features that are not backward compatible with Python 2.x. It also removed numerous Python 2.x features that were maintained for backward compatibility, making Python 3 easier to learn and use and more consistent with the rest of the language. Our experience using Python 3 in domains such as machine learning and web application development shows that both the language and most of its <a href=""http://py3readiness.org/"">supporting libraries</a> have matured for adoption. We were able to fork and patch minor issues of existing libraries or avoided using incompatible Python 2.x libraries that had been abandoned. If you are developing in Python we strongly encourage you to use Python 3.</p>"
"2017-03",ReactiveX,languages-and-frameworks,Adopt,"<p>Distributed systems often utilize multithreading, event-based communication and nonblocking I/O to improve the overall system efficiency. These programming techniques impose challenges such as low-level threading, synchronization, thread safety, concurrent data structures, and non-blocking I/O. The open source <strong><a href=""http://reactivex.io/"">ReactiveX</a></strong> library beautifully abstracts away these concerns, provides the required application plumbing, and extends the <a href=""https://en.wikipedia.org/wiki/Observer_pattern"">observable pattern</a> on streams of asynchronous events. ReactiveX also has an active developer community and supports a growing list of languages, the most recent addition being <a href=""https://github.com/ReactiveX/RxSwift"">RxSwift</a>. It also implements binding to mobile and desktop platforms.</p>"
"2017-03",Redux,languages-and-frameworks,Adopt,"<p>With the increasing complexity of single-page JavaScript applications, we have seen a more pressing need to make client-side state management predictable. <a href=""http://redux.js.org/""><strong>Redux</strong></a>, with its <a href=""http://redux.js.org/docs/introduction/ThreePrinciples.html"">three principles</a> of restrictions for updating state, has proven to be invaluable in a number of projects we have implemented. <a href=""https://egghead.io/courses/getting-started-with-redux"">Getting Started with Redux</a> and <a href=""https://egghead.io/courses/building-react-applications-with-idiomatic-redux"">idiomatic Redux</a> tutorials are a good starting point for new and experienced users. Its minimal library design has spawned a rich set of tools, and we encourage you to check out the <a href=""https://github.com/markerikson/redux-ecosystem-links"">redux-ecosystem-links</a> project for examples, middleware and utility libraries. We also particularly like the testability story: Dispatching actions, state transitions and rendering can be unit-tested separately from one another and with minimal amounts of mocking.</p>"
"2017-03",Avro,languages-and-frameworks,Trial,"<p><strong><a href=""https://avro.apache.org/"">Avro</a></strong> is a framework for data serialization. By storing schema along with the message content, it encourages schema evolution. Producers can edit field names, add new fields or delete existing fields and Avro guarantees that the clients continue to consume the messages. Having a schema allows data to be written without overhead which results in compact data encoding and faster data processing. Although the exchange of structure-less messages between producer and consumer is flexible, we've seen teams facing issues with incompatible unprocessed messages in the queue during deployments. We've used Avro in a number of projects and would recommend using it over just sending unstructured messages.</p>"
"2017-03",Elixir,languages-and-frameworks,Trial,"<p>Interest in the <a href=""http://elixir-lang.org/""><strong>Elixir</strong></a> programming language continues to build. Increasingly, we see it used in serious projects and hear feedback from developers who find its Actor model to be robust and very fast. Elixir, which is built on top of the Erlang virtual machine, is showing promise for creating highly concurrent and fault-tolerant systems. Elixir has distinctive features such as the Pipe operator, which allows developers to build a pipeline of functions as you would in the UNIX command shell. The shared byte code allows Elixir to interoperate with Erlang and leverage existing libraries while supporting tools such as the Mix build tool, the IEx interactive shell and the <a href=""http://elixir-lang.org/docs/stable/ex_unit/ExUnit.html"">ExUnit</a> unit-testing framework.</p>"
"2017-03",Enzyme,languages-and-frameworks,Trial,"<p>We've been enjoying the rapid component-level UI testing that <a href=""http://airbnb.io/enzyme/""><strong>Enzyme</strong></a> provides for <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> applications. Unlike many other snapshot-based testing frameworks, Enzyme allows you to test without doing on-device rendering, which results in faster and more granular testing. This is a contributing factor in our ability to massively reduce the amount of functional testing we find we have to do in React applications.</p>"
"2017-03",Hangfire,languages-and-frameworks,Trial,"<p>One common problem in application development is how to schedule tasks that run outside the main process periodically or when certain conditions are met. The problem gets more complicated when unexpected events, such as application shutdowns, occur. The <strong><a href=""http://hangfire.io/"">Hangfire</a></strong> framework, as our teams discovered, can do this and much more in the .NET environment. Hangfire is both easy to use and flexible, and it embraces a functional style. Particularly interesting is its ability to save a task's state so it can resume when an application restarts after a crash or shutdown.</p>"
"2017-03",Nightwatch,languages-and-frameworks,Trial,"<p><a href=""http://nightwatchjs.org/""><strong>Nightwatch</strong></a> is a framework that allows automated acceptance tests for browser-based apps to be created in JavaScript and run in <a href=""/radar/platforms/node-js"">Node.js</a>. Nightwatch allows tests to be defined using a fluent API which can then be executed against a Selenium/WebDriver server. In the case of single page apps or other JavaScript-heavy pages, this allows the automated tests to be created and run within the same language and environment as the bulk of the code.</p>"
"2017-03",Phoenix,languages-and-frameworks,Trial,"<p>Some of our ThoughtWorks teams have had very positive experiences with <strong>Phoenix</strong> , a server-side web MVC framework written in <a href=""/radar/languages-and-frameworks/elixir"">Elixir</a>. In addition to being streamlined and easy to use, Phoenix takes advantage of Elixir to be extremely fast. For some developers, Phoenix evokes the joy they experienced when first discovering Ruby and Rails. Although the ecosystem of libraries for Phoenix is not as extensive as for some more mature frameworks, it should benefit from the continuing success and growth of support for Elixir.</p>"
"2017-03",Quick and Nimble,languages-and-frameworks,Trial,"<p>Most of our iOS teams are now using the <strong><a href=""https://github.com/Quick/Quick"">Quick</a> and <a href=""https://github.com/Quick/Nimble"">Nimble</a></strong> pairing for their unit tests. In the <a href=""http://rspec.info/"">RSpec</a> family of behavior-driven development (BDD) testing tools, it provides very readable tests (with describe blocks) across <a href=""/radar/languages-and-frameworks/swift"">Swift</a> and Objective-C and has good support for asynchronous testing.</p>"
"2017-03",Vue.js,languages-and-frameworks,Trial,"<p>In the ever-changing world of front-end JavaScript frameworks, one of the emerging favorites appears to be <strong><a href=""https://vuejs.org/"">Vue.js</a>.</strong> Vue.js is a lightweight alternative to <a href=""/radar/languages-and-frameworks/angularjs"">AngularJS</a>. It is designed to be a very flexible—and a less opinionated—library that offers a set of tools for building interactive web interfaces around concepts such as modularity, components and reactive data flow. It has a low learning curve, which makes it interesting for less experienced developers and beginners. Note, though, that Vue.js is not a full-blown framework; it is focused on the view layer only and therefore is easy to integrate with other libraries or existing projects.</p>"
"2017-03",Angular 2,languages-and-frameworks,Assess,"<p>In the previous Radar, we moved <a href=""/radar/languages-and-frameworks/angularjs"">AngularJS</a> into the Hold ring (where it remains in this edition). When it comes to <strong>Angular 2</strong> , we're seeing mixed messages. Over the past year some teams at ThoughtWorks have used Angular 2 successfully and consider it a solid choice. However, Angular 2 is a rewrite, not an evolution, of AngularJS, and switching from AngularJS to Angular 2 is not much different than switching from AngularJS to another framework. Given the, in our experience, superior contenders such as <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>, <a href=""/radar/languages-and-frameworks/ember-js"">Ember.js</a> and <a href=""/radar/languages-and-frameworks/vue-js"">Vue.js</a>, we're still hesitant to give Angular 2 a strong recommendation. We do want to highlight, though, that it is not a bad choice, especially if you bought into TypeScript.</p>"
"2017-03",Caffe,languages-and-frameworks,Assess,"<p><a href=""http://caffe.berkeleyvision.org/""><strong>Caffe</strong></a> is an open source library for deep learning created by the <a href=""http://bair.berkeley.edu/"">Berkeley Vision and Learning Center</a>. It mostly focusses on convolutional networks for computer vision applications. Caffe is a solid and popular choice for computer vision-related tasks and you can download many successful models made by Caffe users from the Caffe Model Zoo for out-of-the-box use. Like <a href=""/radar/languages-and-frameworks/keras"">Keras</a>, Caffe is a Python-based API. In Keras, however, models and components are objects created directly in Python code, whereas Caffe models are described by <a href=""https://developers.google.com/protocol-buffers/"">Protobuf</a> configuration files. Either approach has its pros and cons, and converting between the two is also possible.</p>"
"2017-03",DeepLearning.scala,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/ThoughtWorksInc/DeepLearning.scala"">DeepLearning.scala</a></strong> is an open source deep-learning toolkit in Scala created by our colleagues at ThoughtWorks. We're excited about this project because it uses differentiable functional programming to create and compose neural networks; a developer simply writes code in Scala with static typing. DeepLearning.scala currently supports basic types such as float, double, GPU-accelerated N-dimensional arrays as well as algebraic data types. We're looking forward to future releases of the toolkit which are said to support higher order functions and distributed training on <a href=""/radar/platforms/apache-spark"">Spark</a>.</p>"
"2017-03",ECMAScript 2017,languages-and-frameworks,Assess,"<p><strong>ECMAScript 2017</strong> —not to be confused with ES7 (a.k.a. ECMAScript 2016)—brings several noteworthy improvements to the language. Browsers are expected to implement this standard fully in the summer of 2017, but the <a href=""/radar/tools/babel"">Babel</a> JavaScript compiler already supports a number of the features today. If you make extensive use of JavaScript and your codebase is under active development, we recommend that you add Babel to your build pipeline and begin using the <a href=""https://www.npmjs.com/package/babel-preset-es2017"">supported features</a>.</p>"
"2017-03",Instana,languages-and-frameworks,Assess,"<p><strong><a href=""http://www.instana.com/"">Instana</a></strong> is yet another entrant into the crowded application performance management space. The fact that it's built from the ground up for cloud native architectures differentiates Instana from many of its competitors. Features include dynamic discovery, distributed tracing and service health plus the ability to ""time shift"" your view of your infrastructure to the moment an incident occurred. It remains to be seen whether this product can gain traction over the combination of open source projects—such as <a href=""/radar/tools/consul"">Consul</a>, <a href=""/radar/tools/prometheus"">Prometheus</a> and the implementations of <a href=""/radar/platforms/opentracing"">OpenTracing</a>—that do the same thing; however it's worth taking a look if you need an out-of-the-box solution.</p>"
"2017-03",JuMP,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/JuliaOpt/JuMP.jl"">JuMP</a></strong> is a domain-specific language for <a href=""https://en.wikipedia.org/wiki/Mathematical_optimization"">mathematical optimizations</a> in <a href=""http://julialang.org/"">Julia</a>. JuMP defines a common API called <a href=""https://github.com/JuliaOpt/MathProgBase.jl"">MathProgBase</a> and enables users to write solver-agnostic code in Julia. Currently supported solvers include <a href=""http://artelys.com/en/optimization-tools/knitro"">Artelys Knitro</a>, <a href=""https://projects.coin-or.org/Bonmin"">Bonmin</a>, <a href=""https://projects.coin-or.org/Cbc"">Cbc</a>, <a href=""https://projects.coin-or.org/Clp"">Clp</a>, <a href=""https://projects.coin-or.org/Couenne"">Couenne</a>, <a href=""http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/"">CPLEX</a>, <a href=""https://github.com/ifa-ethz/ecos"">ECOS</a>, <a href=""http://www.fico.com/en/products/fico-xpress-optimization-suite"">FICO Xpress</a>, <a href=""http://www.gnu.org/software/glpk/"">GLPK</a>, <a href=""http://www.gurobi.com"">Gurobi</a>, <a href=""https://projects.coin-or.org/Ipopt"">Ipopt</a>, <a href=""http://www.mosek.com/"">MOSEK</a>, <a href=""http://ab-initio.mit.edu/wiki/index.php/NLopt"">NLopt</a> and <a href=""https://github.com/cvxgrp/scs"">SCS</a>. One other benefit is the implementation of automatic differentiation technique in reverse mode to compute derivatives so users are not limited to the standard operators like sin, cos, log and sqrt but can also implement their own custom objective functions in Julia.</p>"
"2017-03",Keras,languages-and-frameworks,Assess,"<p><a href=""https://keras.io/""><strong>Keras</strong></a> is a high-level interface in Python for building neural networks. Created by a Google engineer, Keras is open source and runs on top of either <a href=""/radar/platforms/tensorflow"">TensorFlow</a> or <a href=""http://github.com/Theano/Theano"">Theano</a>. It provides an amazingly simple interface for creating powerful deep-learning algorithms to train on CPUs or GPUs. Keras is well designed with modularity, simplicity, and extensibility in mind. Unlike a library such as <a href=""/radar/languages-and-frameworks/caffe"">Caffe</a>, Keras supports more general network architectures such as recurrent nets, making it overall more useful for text analysis, NLP and general machine learning. If computer vision, or any other specialized branch of machine learning, is your primary concern, Caffe may be a more appropriate choice. However, if you're looking to learn a simple yet powerful framework, Keras should be your first choice.</p>"
"2017-03",Knet.jl,languages-and-frameworks,Assess,"<p><a href=""http://knet.rtfd.org""><strong>Knet.jl</strong></a> is the <a href=""http://www.ku.edu.tr/en"">Koç University</a> deep-learning framework implemented in <a href=""http://julia.rtfd.org"">Julia</a> by <a href=""http://www.denizyuret.com"">Deniz Yuret</a> and collaborators. Unlike gradient-generating compilers such as <a href=""https://github.com/Theano/Theano"">Theano</a> and <a href=""/radar/platforms/tensorflow"">TensorFlow</a> which force users into a restricted mini-language, Knet allows the definition and training of machine-learning models using the full power and expressiveness of Julia. Knet uses dynamic computational graphs generated at runtime for the automatic differentiation of almost any Julia code. We really like the support of GPU operations through the KnetArray type, and in case you don't have access to a GPU machine, the team behind Knet also maintains a <a href=""http://knet.readthedocs.io/en/latest/install.html#using-amazon-aws"">preconfigured Amazon Machine Image (AMI)</a> so you can evaluate it in the cloud.</p>"
"2017-03",Kotlin,languages-and-frameworks,Assess,"<p>The <strong><a href=""https://kotlinlang.org/"">Kotlin</a></strong> programming language is on many of our developers' bucket lists to assess this year, and some have already used it successfully in production. It is an open source JVM language from JetBrains. Our Swift mobile developers like it as it is syntactically closer to <a href=""/radar/languages-and-frameworks/swift"">Swift</a> and equally concise. Our Java developers have enjoyed its seamless interoperability with the Java language and tools and found it easier to learn than Scala. Kotlin supports functional programming concepts but with less features than Scala. Developers on our teams who like static typing with the compiler catching null pointer defects found themselves writing fewer boilerplate tests.</p>"
"2017-03",Physical Web,languages-and-frameworks,Assess,"<p>We have been intrigued by the <strong><a href=""https://google.github.io/physical-web/"">Physical Web</a></strong> standard created by Google. The idea of Physical Web is simple—beacons broadcast a URL—but the possibilities are broad. Basically, this is a way to annotate the physical world, tying objects and locations into the digital realm. The current transport mechanism is <a href=""https://github.com/google/eddystone/tree/master/eddystone-url"">Eddystone URLs</a> over Bluetooth LE, and sample clients are available. Although there are obvious security concerns with following randomly discovered links, we are most interested in use cases with customized clients where you can filter or proxy the URLs as required.</p>"
"2017-03",PostCSS,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/postcss/postcss"">PostCSS</a></strong> is a <a href=""/radar/platforms/node-js"">Node.js</a>-based JavaScript framework for operating on an abstract syntax tree-based representation of CSS documents with a rich ecosystem of plugins. Often incorrectly thought of as a preprocessor (such as SASS or Less), we find that the real power of PostCSS comes from the number of things that can be done with the rich set of plugins which includes linting (<a href=""https://github.com/stylelint/stylelint"">the stylelint plugin</a>), cross-compilation (<a href=""https://github.com/postcss/sugarss"">the sugarss plugin</a>), name-mangling to avoid selector collision (<a href=""https://github.com/css-modules/postcss-modules"">the modules plugin</a>), boilerplate CSS code generation (<a href=""https://github.com/postcss/autoprefixer"">the autoprefixer plugin</a>), <a href=""http://cssnano.co/"">minification</a> and many others. The different maturity levels of the plugins notwithstanding, PostCSS itself remains a simple and powerful framework for treating CSS like a full-fledged language for front-end development.</p>"
"2017-03",Spring Cloud,languages-and-frameworks,Assess,"<p>Teams building systems composed of microservices need to think about coordination techniques such as service discovery, load balancing, circuit breaking and health checking. Many of these techniques require teams to set up tooling, which is not always trivial. The <strong><a href=""http://projects.spring.io/spring-cloud/"">Spring Cloud</a></strong> project provides tools for developers so they can use these coordination techniques in the familiar Spring environment. These tools support <a href=""/radar/tools/consul"">Consul</a>, <a href=""https://zookeeper.apache.org/"">ZooKeeper</a> and the <a href=""/radar/platforms/netflix-oss-full-stack"">Netflix OSS full stack</a>, all tools that we like. Simply put, it makes it easy to do the right thing with these tool sets. Although our usual concerns with Spring still stand, namely that it hides too much of the complexity, you should consider Spring Cloud if you are in the ecosystem and need to solve these problems.</p>"
"2017-03",Three.js,languages-and-frameworks,Assess,"<p>Despite the fervor surrounding the spate of new headsets, we believe there are many VR and AR scenarios that make sense in the browser, particularly on mobile. Given this trend, we have seen an uptick in usage of <a href=""https://threejs.org/""><strong>Three.js</strong></a>, a powerful JavaScript visualization and 3D rendering framework. The growth in support for WebGL, which it is based on, has helped adoption, as has the vibrant community supporting this open source project.</p>"
"2017-03",WebRTC,languages-and-frameworks,Assess,"<p>Widespread adoption of AR/VR as a collaboration and communication medium requires a modern and readily available video streaming platform. <strong><a href=""https://webrtc.org/"">WebRTC</a></strong> is an emerging standard for real-time communication between browsers that enables video streaming within commonly available web technologies. The range of browsers that support this standard is increasing, but Microsoft and Apple have been slow to adopt WebRTC in their proprietary browsers. If momentum continues to build, WebRTC could form the future foundation for AR/VR collaboration on the web.</p>"
"2017-03",AngularJS,languages-and-frameworks,Hold,"<p><a href=""https://angularjs.org/""><strong>AngularJS</strong></a> helped revolutionize the world of single-page JavaScript applications, and we have delivered many projects successfully with it over the years. However, we are no longer recommending it (v1) for teams starting fresh projects. We prefer the ramp-up speed and more maintainable codebases we are seeing with <a href=""/radar/languages-and-frameworks/ember-js"">Ember</a> and <a href=""/radar/languages-and-frameworks/react-js"">React</a>, particularly in conjunction with <a href=""/radar/languages-and-frameworks/redux"">Redux</a>.</p>"
"2017-11",Lightweight Architecture Decision Records,Techniques,Adopt,"<p>Much documentation can be replaced with highly readable code and tests. In a world of <a href=""/radar/techniques/evolutionary-architecture"">evolutionary architecture</a>, however, it's important to record certain design decisions for the benefit of future team members as well as for external oversight. <strong>Lightweight Architecture Decision Records</strong> is a <a href=""http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"">technique</a> for capturing important architectural decisions along with their context and consequences. We recommend <a href=""http://github.com/npryce/adr-tools"">storing these details in source control</a>, instead of a wiki or website, as then they can provide a record that remains in sync with the code itself. For most projects, we see no reason why you wouldn't want to use this technique.</p>"
"2017-11",Applying product management to internal platforms,Techniques,Trial,"<p>We've seen a steep increase in interest in the topic of digital platforms over the past 12 months. Companies looking to roll out new digital solutions quickly and efficiently are building internal platforms, which offer teams self-service access to the business APIs, tools, knowledge and support necessary to build and operate their own solutions. We find that these platforms are most effective when they're given the same respect as an external product offering. <strong>Applying product management to internal platforms</strong> means establishing empathy with internal consumers (read: developers) and collaborating with them on the design. Platform product managers establish roadmaps and ensure the platform delivers value to the business and enhances the developer experience. Some owners even create a brand identity for the internal platform and use that to market the benefits to their colleagues. Platform product managers look after the quality of the platform, gather usage metrics, and continuously improve it over time. Treating the platform as a product helps to create a thriving ecosystem and avoids the pitfall of building yet another stagnant, underutilized service-oriented architecture.</p>"
"2017-11",Architectural fitness function,Techniques,Trial,"<p>Borrowed from evolutionary computing, a fitness function is used to summarize how close a given design solution is to achieving the set aims. When defining an evolutionary algorithm, the designer seeks a ‘better’ algorithm; the fitness function defines what ‘better’ means in this context. An <strong>architectural fitness function</strong> , as defined in <a href=""http://www.thoughtworks.com/books/building-evolutionary-architectures"">Building Evolutionary Architectures</a>, provides an objective integrity assessment of some architectural characteristics, which may encompass existing verification criteria, such as unit testing, metrics, monitors, and so on. We believe architects can communicate, validate and preserve architectural characteristics in an automated, continual manner, which is the key to building evolutionary architectures.</p>"
"2017-11",Autonomous bubble pattern,Techniques,Trial,"<p>Many organizations we work with are trying hard to use modern engineering approaches to build new capabilities and features, while also having to coexist with a long tail of legacy systems. An old strategy that, based on our experience, has turned out to be increasingly helpful in these scenarios is <a href=""http://dddcommunity.org/strategic-design/"">Eric Evans's</a> <strong>Autonomous bubble pattern</strong>. This approach involves creating a fresh context for new application development that is shielded from the entanglements of the legacy world. This is a step beyond just using an <a href=""http://wiki.c2.com/?AnticorruptionLayer"">anticorruption layer</a>. It gives the new bubble context full control over its backing data, which is then asynchronously kept up-to-date with the legacy systems. It requires some work to protect the boundaries of the bubble and keep both worlds consistent, but the resulting autonomy and reduction in development friction is a first bold step toward a modernized future architecture.</p>"
"2017-11",Chaos Engineering,Techniques,Trial,"<p>In previous editions of the Radar, we've talked about using <a href=""/radar/tools/chaos-monkey"">Chaos Monkey</a> from Netflix to test how a running system is able to cope with outages in production by randomly disabling instances and measuring the results. <strong>Chaos Engineering</strong> is the nascent term for the wider application of this technique. By running experiments on distributed systems in production, we're able to build confidence that those systems work as expected under turbulent conditions. A good place to start understanding this technique is the <a href=""http://principlesofchaos.org/"">Principles of Chaos Engineering</a> website.</p>"
"2017-11",Decoupling secret management from source code,Techniques,Trial,"<p>In previous Radars issues we mentioned tools such as <a href=""https://www.agwa.name/projects/git-crypt/"">git-crypt</a> and <a href=""/radar/tools/blackbox"">Blackbox</a> that allow us to keep secrets safe inside the source code. <strong>Decoupling secret management from source code</strong> is our way to remind technologists that there are other options for storing secrets. For example, <a href=""/radar/tools/hashicorp-vault"">HashiCorp vault</a>, CI servers and configuration management tools provide mechanisms for storing secrets that are not linked to the source code of an application. Both approaches are viable and we recommend you use at least one of them in your projects.</p>"
"2017-11",DesignOps,Techniques,Trial,"<p>Inspired by the DevOps movement, <a href=""http://airbnb.design/designops-airbnb/""><strong>DesignOps</strong></a> is a cultural shift and a set of practices that allows people across an organization to continuously redesign products without compromising quality, service coherency or team autonomy. DesignOps advocates for the creation and evolution of a design infrastructure that minimizes the effort necessary to create new UI concepts and variations, and to establish a rapid and reliable feedback loop with end users. With tools such as <a href=""http://github.com/storybooks/storybook"">Storybook</a> promoting close collaboration, the need for upfront analysis and specification handoffs is reduced to the absolute minimum. With DesignOps, design is shifting from being a specific practice to being a part of everyone's job.</p>"
"2017-11",Legacy in a box,Techniques,Trial,"<p>Working with legacy code, especially large monoliths, is one of the most unsatisfying, high-friction <a href=""https://thoughtworks.wistia.com/medias/ogq5b8d80y"">experiences for developers</a>. Although we caution against extending and actively maintaining legacy monoliths, they continue to be dependencies in our environments, and developers often underestimate the cost and time required to develop against these dependencies. To help reduce the friction, developers have used virtualized <a href=""/radar/techniques/machine-image-as-a-build-artifact"">machine images</a> or container images with <a href=""/radar/platforms/docker"">Docker</a> containers to create immutable images of legacy systems and their configurations. The intent is to contain the <strong>legacy in a box</strong> for developers to run locally and remove the need for rebuilding, reconfiguring or sharing environments. In an ideal scenario, teams that own legacy systems generate the corresponding boxed legacy images through their build pipelines, and developers can then run and orchestrate these images in their allocated sandbox more reliably. Although this approach has reduced the overall time spent by each developer, it has had limited success when the teams owning the downstream dependencies have been reluctant to create container images for others to use.</p>"
"2017-11",Flood IO,Platforms,Trial,"<p>Load testing became easier with the maturity of tools such as <a href=""/radar/tools/gatling"">Gatling</a> and <a href=""/radar/tools/locust"">Locust</a>. At the same time, elastic cloud infrastructures make it possible to simulate a large number of client instances. We're delighted to see Flood and other cloud platforms go further by leveraging these technologies. <a href=""http://flood.io/""><strong>Flood IO</strong></a> is an SaaS load-testing service that helps to distribute and execute testing scripts across hundreds of servers in the cloud. Our teams find it simple to migrate performance testing to Flood by reusing existing Gatling scripts.</p>"
"2017-11",Micro frontends,Techniques,Trial,"<p>We've seen significant benefits from introducing <a href=""/radar/techniques/microservices"">microservices</a> architectures, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create front-end monoliths — a single, large and sprawling browser application — on top of their back-end services. Our preferred (and proven) approach is to split the browser-based code into <strong>micro frontends</strong>. In this approach, the web application is broken down into its features, and each feature is owned, frontend to backend, by a different team. This ensures that every feature is developed, tested and deployed independently from other features. Multiple techniques exist to recombine the features — sometimes as pages, sometimes as components — into a cohesive user experience.</p>"
"2017-11",Pipelines for infrastructure as code,Techniques,Trial,"<p>The use of continuous delivery pipelines to orchestrate the release process for software has become a mainstream concept. However, automatically testing changes to infrastructure code isn’t as widely understood. Continuous integration (CI) and continuous delivery (CD) tools can be used to test server configuration (e.g., Chef cookbooks, Puppet modules, Ansible playbooks), server image building (e.g., Packer), environment provisioning (e.g., Terraform, CloudFormation) and integration of environments. The use of <strong>pipelines for infrastructure as code</strong> enables errors to be found before changes are applied to operational environments — including environments used for development and testing. They also offer a way to ensure that infrastructure tooling is run consistently, from CI/CD agents, as opposed to being run from individual workstations. Some challenges remain, however, such as the longer feedback loops associated with standing up containers and virtual machines. Still, we've found this to be a valuable technique.</p>"
"2017-11",Serverless architecture,Techniques,Trial,"<p>The use of <a href=""http://www.martinfowler.com/articles/serverless.html""><strong>serverless architecture</strong></a> has very quickly become an accepted approach for organizations deploying cloud applications, with a plethora of choices available for deployment. Even traditionally conservative organizations are making partial use of some serverless technologies. Most of the discussion goes to Functions as a Service (e.g., <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a>, <a href=""http://cloud.google.com/functions/"">Google Cloud Functions</a>, <a href=""http://azure.microsoft.com/en-us/services/functions/"">Azure Functions</a>) while the appropriate patterns for use are still emerging. Deploying serverless functions undeniably removes the nontrivial effort that traditionally goes into server and OS configuration and orchestration. Serverless functions, however, are not a fit for every requirement. At this stage, you must be prepared to fall back to deploying containers or even server instances for specific requirements. Meanwhile, the other components of a serverless architecture, such as Backend as a Service, have become almost a default choice.</p>"
"2017-11",TDD'ing containers,Techniques,Trial,"<p>Many development teams have adopted test-driven development practices for writing application code because of their benefits. Others have turned to containers to package and deploy their software, and it's accepted practice to use automated scripts to build the containers. What we’ve seen few teams do so far is combine the two trends and drive the writing of the container scripts using tests. With frameworks such as <a href=""http://serverspec.org/"">Serverspec</a> and <a href=""http://github.com/aelsabbahy/goss"">Goss</a>, you can express the intended functionality for either isolated or orchestrated containers, with short feedback loops. This means that it’s possible to use the same principles we’ve championed for code by <strong>TDD'ing containers</strong>. Our initial experience doing so has been very positive.</p>"
"2017-11",Algorithmic IT operations,Techniques,Assess,"<p>The amount of data collected by IT operations has been increasing for years. For example, the trend toward microservices means that more applications are generating their own operational data, and tools such as Splunk, <a href=""/radar/tools/prometheus"">Prometheus</a>, or the ELK stack make it easier to store and process data later on, to gain operational insights. When combined with increasingly democratized machine learning tools, it’s inevitable that operators will start to incorporate statistical models and trained classification algorithms into their toolsets. Although these algorithms have been available for years, and various attempts have been made to automate service management, we're only just starting to understand how machines and humans can collaborate to identify outages earlier or pinpoint the source of failures. Although there is a risk of overhyping <strong>Algorithmic IT operations</strong> , steady improvement in machine learning algorithms will inevitably change the role of humans in operating tomorrow's data centers.</p>"
"2017-11",Ethereum for decentralized applications,Techniques,Assess,"<p>Blockchains have been widely hyped as the panacea for all things fintech, from banking to digital currency to supply chain transparency. We’ve previously featured <a href=""/radar/platforms/ethereum"">Ethereum</a> because of its feature set, which includes smart contracts. Now, we're seeing more development using <strong>Ethereum for decentralized applications</strong> in <a href=""http://www.stateofthedapps.com/"">other areas</a>. Although this is still a very young technology, we're encouraged to see it being used to build decentralized applications beyond cryptocurrency and banking.</p>"
"2017-11",Event streaming as the source of truth,Techniques,Assess,"<p>As event streaming platforms, such as <a href=""/radar/tools/apache-kafka"">Apache Kafka</a>, rise in popularity, many consider them as an advanced form of message queuing, used solely to transmit events. Even when used in this way, event streaming has its benefits over traditional message queuing. However, we're more interested in how people use <strong>event streaming as the source of truth</strong> with platforms (Kafka in particular) as the primary store for data as immutable events. A service with an <a href=""http://martinfowler.com/eaaDev/EventSourcing.html"">Event Sourcing</a> design, for example, can use Kafka as its event store; those events are then available for other services to consume. This technique has the potential to reduce duplicating efforts between local persistence and integration.</p>"
"2017-11",Google Cloud Platform,Platforms,Trial,"<p>As <a href=""http://cloud.google.com/free/ce1/""><strong>Google Cloud Platform</strong></a> (GCP) has expanded in terms of available geographic regions and maturity of services, customers globally can now seriously consider it for their cloud strategy. In some areas, GCP has reached feature parity with its main competitor, Amazon Web Services, while in other areas it has differentiated itself — notably with accessible machine learning platforms, data engineering tools, and a workable Kubernetes as a service solution (<a href=""/radar/platforms/gke"">GKE</a>). In practice, our teams have nothing but praise for the developer experience working with the GCP tools and APIs.</p>"
"2017-11",Platform engineering product teams,Techniques,Assess,"<p>The adoption of cloud and DevOps, while increasing the productivity of teams who can now move more quickly with reduced dependency on centralized operations teams and infrastructure, also has constrained teams who lack the skills to self-manage a full application and operations stack. Some organizations have tackled this challenge by creating <strong>platform engineering product teams</strong>. These teams operate an internal platform which enables delivery teams to self-service deploy and operate systems with reduced lead time and stack complexity. The emphasis here is on API-driven self-service and supporting tools, with delivery teams still responsible for supporting what they deploy onto the platform. Organizations that consider establishing such a platform team should be very cautious not to accidentally create a <a href=""/radar/techniques/separate-devops-team"">separate DevOps team</a>, nor should they simply relabel their <a href=""/radar/platforms/superficial-private-cloud"">existing hosting and operations structure</a> as a platform.</p>"
"2017-11",Polycloud,Techniques,Assess,"<p>The major cloud providers (Amazon, Microsoft and Google) are locked in an aggressive race to maintain parity on core capabilities while their products are differentiated only marginally. This is causing a few organizations to adopt a <strong>Polycloud</strong> strategy — rather than going ‘all-in’ with one provider, they are passing different types of workloads to different providers in a best-of-breed approach. This may involve, for example, putting standard services on AWS, but using Google for machine learning, Azure for .NET applications that use SQLServer, or potentially using the Ethereum Consortium Blockchain solution. This is different than a cloud-agnostic strategy of aiming for portability across providers, which is costly and forces lowest-common-denominator thinking. Polycloud instead focuses on using the best that each cloud offers.</p>"
"2017-11",Service mesh,Techniques,Assess,"<p>As large organizations transition to more autonomous teams owning and operating their own microservices, how can they ensure the necessary consistency and compatibility between those services without relying on a centralized hosting infrastructure? To work together efficiently, even autonomous microservices need to align with some organizational standards. A <strong>service mesh</strong> offers consistent discovery, security, tracing, monitoring and failure handling without the need for a shared asset such as an API gateway or ESB. A typical implementation involves lightweight reverse-proxy processes deployed alongside each service process, perhaps in a separate container. These proxies communicate with service registries, identity providers, log aggregators, and so on. Service interoperability and observability are gained through a shared implementation of this proxy but not a shared runtime instance. We've advocated for a decentralized approach to microservice management for some time and are happy to see this consistent pattern emerge. Open source projects such as <a href=""http://linkerd.io/"">linkerd</a> and <a href=""http://istio.io/"">Istio</a> will continue to mature and make service meshes even easier to implement.</p>"
"2017-11",Sidecars for endpoint security,Techniques,Assess,"<p>Microservices architecture, with a large number of services exposing their assets and capabilities through APIs and an increased attack surface, demand a zero trust security architecture — ‘never trust, always verify’. However, enforcing security controls for communication between services is often neglected, due to increased service code complexity and lack of libraries and language support in a polyglot environment. To get around this complexity, some teams delegate security to an out-of-process sidecar — a process or a container that is deployed and scheduled with each service sharing the same execution context, host and identity. Sidecars implement security capabilities, such as transparent encryption of the communication and TLS (Transport Layer Security) termination, as well as authentication and authorization of the calling service or the end user. We recommend you look into using <a href=""http://istio.io/"">Istio</a>, <a href=""http://linkerd.io/"">linkerd</a> or <a href=""http://github.com/envoyproxy/envoy"">Envoy</a> before implementing your own <strong>sidecars for endpoint security</strong>.</p>"
"2017-11",The three Rs of security,Techniques,Assess,"<p>Traditional approaches to enterprise security often emphasize locking things down and slowing the pace of change. However, we know that the more time an attacker has to compromise a system, the greater the potential damage. <a href=""http://builttoadapt.io/the-three-r-s-of-enterprise-security-rotate-repave-and-repair-f64f6d6ba29d"">The three Rs of enterprise security</a> — rotate, repair and repave — take advantage of infrastructure automation and continuous delivery to eliminate opportunities for attack. Rotating credentials, applying patches as soon as they're available and rebuilding systems from a known, secure state — all within a matter of minutes or hours — makes it harder for attackers to succeed. <strong>The three Rs of security</strong> technique is made feasible with the advent of modern cloud-native architectures. When applications are deployed as containers, and built and tested via a completely automated pipeline, a security patch is just another small release that can be sent through the pipeline with one click. Of course, in keeping with best distributed systems practices, developers need to design their applications to be resilient to unexpected server outages. This is similar to the impact of implementing <a href=""/radar/tools/chaos-monkey"">Chaos Monkey</a> within your environment.</p>"
"2017-11",A single CI instance for all teams,Techniques,Hold,"<p>We're compelled to caution, again, against creating <strong>a single CI instance for all teams</strong>. While it's a nice idea in theory to consolidate and centralize Continuous Integration (CI) infrastructure, in reality we do not see enough maturity in the tools and products in this space to achieve the desired outcome. Software delivery teams which must use the centralized CI offering regularly have long delays depending on a central team to perform minor configuration tasks, or to troubleshoot problems in the shared infrastructure and tooling. At this stage, we continue to recommend that organizations limit their centralized investment to establishing patterns, guidelines and support for delivery teams to operate their own CI infrastructure.</p>"
"2017-11",Keycloak,Platforms,Trial,"<p>In a <a href=""/radar/techniques/microservices"">microservice</a>, or any other distributed architecture, one of the most common needs is to secure the services or APIs through authentication and authorization features. This is where <a href=""http://www.keycloak.org/""><strong>Keycloak</strong></a> comes in. Keycloak is an open source identity and access management solution that makes it easy to secure applications or microservices with little to no code. It supports single sign-on, social login and standard protocols such as <a href=""http://openid.net/connect/"">OpenID Connect</a>, <a href=""http://oauth.net/2/"">OAuth 2.0</a> and <a href=""http://en.wikipedia.org/wiki/Security_Assertion_Markup_Language"">SAML</a> out of the box. Our teams have been using this tool and plan to keep using it for the foreseeable future. But it requires a little work to set up. Because configuration happens both at initialization and at runtime through APIs, it's necessary to write scripts to ensure deployments are repeatable.</p>"
"2017-11",CI theatre,Techniques,Hold,"<p>We've long been advocates of <a href=""https://martinfowler.com/articles/continuousIntegration.html"">continuous integration</a> (CI), and we were <a href=""https://en.wikipedia.org/wiki/CruiseControl"">pioneers</a> in building CI server programs to automatically build projects on check-ins. Used well, these programs run as a daemon process on a <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#EveryoneCommitsToTheMainlineEveryDay"">shared project mainline that developers commit to daily</a>. The CI server <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#EveryCommitShouldBuildTheMainlineOnAnIntegrationMachine"">builds the project</a> and runs <a href=""http://www.martinfowler.com/articles/continuousIntegration.html#MakeYourBuildSelf-testing"">comprehensive tests</a> to ensure the whole software system is integrated and is in an always-releasable state, thus satisfying the principles of <a href=""https://continuousdelivery.com/"">continuous delivery</a>. Sadly, many developers simply set up a CI server and falsely assume they are ""doing CI"" when in reality they miss out on all the benefits. Common failure modes include: running CI against a shared mainline but with infrequent commits, so integration isn't really continuous; running a build with poor test coverage; allowing the build to stay red for long periods; or running CI against feature branches which results in <a href=""http://paulhammant.com/2017/02/14/fake-news-via-continuous-isolation/"">continuous isolation</a>. The ensuing "" <strong>CI theatre</strong>"" might make people feel good, but would fail any credible <a href=""https://martinfowler.com/bliki/ContinuousIntegrationCertification.html"">CI certification test</a>.</p>"
"2017-11",Enterprise-wide integration test environments,Techniques,Hold,"<p>When the enterprise-wide quarterly or monthly releases were considered best practice, it was necessary to maintain a complete environment for performing testing cycles prior to deployment to production. These <strong>enterprise-wide integration test environments</strong> (often referred to as SIT or Staging) are a common bottleneck for continuous delivery today. The environments themselves are fragile and expensive to maintain, often with components that need manual configuration by a separate environment management team. Testing in the staging environment provides unreliable and slow feedback, and testing effort is duplicated with what can be performed on components in isolation. We recommend that organizations incrementally create an independent path to production for key components. Important techniques include <a href=""/radar/techniques/consumer-driven-contract-testing"">contract testing</a>, <a href=""/radar/techniques/decoupling-deployment-from-release"">decoupling deployment from release</a>, <a href=""/radar/techniques/focus-on-mean-time-to-recovery"">focus on mean time to recovery</a> and <a href=""/radar/techniques/qa-in-production"">testing in production</a>.</p>"
"2017-11",Recreating ESB antipatterns with Kafka,Techniques,Hold,"<p>Kafka is becoming very popular as a messaging solution, and along with it, <a href=""/radar/platforms/kafka-streams"">Kafka Streams</a> is at the forefront of the wave of interest in streaming architectures. Unfortunately, as they start to embed Kafka at the heart of their data and application platforms, we're seeing some organizations <strong>recreating ESB antipatterns with Kafka</strong> by centralizing the Kafka ecosystem components — such as connectors and stream processors — instead of allowing these components to live with product or service teams. This reminds us of seriously problematic ESB antipatterns, where more and more logic, orchestration and transformation were thrust into a centrally managed ESB, creating a significant dependency on a centralized team. We're calling this out to dissuade further implementations of this flawed pattern.</p>"
"2017-11",Spec-based codegen,Techniques,Hold,"<p>Back in the days when SOAP held sway in the enterprise software industry, the practice of generating client code from WSDL specs was an accepted—even encouraged—practice. Unfortunately, the resulting code was often complex, untestable, difficult to modify and frequently didn't work across implementation platforms. With the advent of REST, we found it better to evolve API clients that use the <a href=""https://martinfowler.com/bliki/TolerantReader.html"">tolerant reader pattern</a> for extracting and processing only the fields needed. Recently we have observed a disturbing return to old habits with developers generating code from API specifications written in <a href=""/radar/tools/swagger"">Swagger</a> or <a href=""/radar/tools/raml"">RAML</a>—a practice that we refer to as <strong>spec-based codegen</strong>. Although such tools are very useful for driving the design of APIs and for extracting documentation, we caution against the tempting shortcut of simply generating client code directly from these specifications. The chances are that such code will be difficult to test and maintain.</p>"
"2017-11",Kubernetes,Platforms,Adopt,"<p>Since we last mentioned <strong>Kubernetes</strong> in the Radar, it has become the default solution for most of our clients when deploying containers into a cluster of machines. The alternatives didn’t capture as much mindshare, and in some cases our clients are even changing their ‘engine’ to Kubernetes. Kubernetes has become the container orchestration platform of choice for major public cloud platforms, including Microsoft's Azure Container Service and Google Cloud (see the <a href=""/radar/platforms/gke"">GKE</a> blip). And there are many useful products enriching the fast-growing Kubernetes ecosystem. Platforms that try to hide Kubernetes under an abstraction layer, however, have yet to prove themselves.</p>"
"2017-11",.NET Core,Platforms,Trial,"<p>We're seeing increased adoption of <a href=""http://www.microsoft.com/net/core""><strong>.NET Core</strong></a>, the open source cross-platform software framework. .NET Core enables the development and deployment of .NET applications on Windows, macOS and Linux. With the release of <a href=""http://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/"">.NET Standard 2.0</a> increasing the number of standard APIs across .NET platforms, the migration path to .NET Core has become clearer. Issues related to library support on .NET Core are becoming less problematic, and first-class <a href=""http://www.jetbrains.com/rider/"">cross-platform tooling</a> is now available, allowing for productive development on non-Windows platforms. Blessed Docker images are provided to make it easy to integrate .NET Core services into a containerized environment. Positive directions in the community and feedback from our projects indicate that .NET Core is ready for widespread use.</p>"
"2017-11",AWS Device Farm,Platforms,Trial,"<p>The huge number of mobile devices makes it almost impossible for companies to test their mobile apps on all of them. Enter <strong><a href=""https://aws.amazon.com/device-farm/"">AWS Device Farm</a></strong>, an app-testing service that enables you to run and interact with your Android, iOS and web apps on a wide variety of physical devices that are hosted in the cloud simultaneously. Detailed logs, performance graphs and screenshots are generated during each run to provide general and device-specific feedback. The service offers a lot of flexibility by allowing the state and configuration of each device to be altered in order to reproduce very specific test scenarios. Our teams are using AWS Device Farm to run end-to-end tests on devices with the largest install base for their apps.</p>"
"2017-11",OpenTracing,Platforms,Trial,"<p>As monolithic applications are being replaced with more complex <a href=""/radar/techniques/microservices"">(micro)service</a> ecosystems, tracing requests across multiple services is becoming the norm. With majority contribution from LightStep and Uber <a href=""http://opentracing.io/""><strong>OpenTracing</strong></a> is rapidly becoming the de facto standard for distributed tracing. There is a growing number of <a href=""http://opentracing.io/documentation/pages/supported-tracers"">tracers</a> supporting OpenTracing standard, including <a href=""/radar/tools/zipkin"">Zipkin</a>, <a href=""/radar/languages-and-frameworks/instana"">Instana</a>, and <a href=""https://uber.github.io/jaeger/"">Jaeger</a>. OpenTracing currently provides vendor-neutral implementation in multiple languages including: Go, JavaScript, Java, Python, Objective-C, C#, C++, Ruby and PHP.</p>"
"2017-11",Unity beyond gaming,Platforms,Trial,"<p>In previous Radars, we mentioned that <a href=""http://unity3d.com/"">Unity</a> has become the platform of choice for VR and AR application development because it provides the abstractions and tooling of a mature platform, while being more accessible than its main alternative, the Unreal Engine. With the recent introductions of ARKit for iOS and ARCore for Android, the two main mobile platforms now have powerful native SDKs for building augmented reality applications. Yet, we feel that many teams, especially those without deep experience in building games, will benefit from using an abstraction such as Unity, which is why we're calling out <strong>Unity beyond gaming</strong>. This allows developers unfamiliar with the technology to focus on one SDK. It also offers a solution for the huge number of devices, especially on the Android side, that are not supported by the native SDKs.</p>"
"2017-11",WeChat,Platforms,Trial,"<p><strong>WeChat</strong> , often seen as a WhatsApp equivalent, is becoming the de facto business platform in China. Many people may not know but WeChat is also one of the most popular online payment platforms. With the app's built-in CMS and membership management, small businesses are now conducting their commerce entirely on WeChat. Through the Service Account feature, large organizations can interface their internal system to their employees. Given that more than 70 percent of Chinese people are using WeChat, it's an important consideration for businesses that want to expand into the China market.</p>"
"2017-11",Azure Service Fabric,Platforms,Assess,"<p><strong>Azure Service Fabric</strong> is a distributed systems platform built for microservices and containers. It’s comparable to container orchestrators such as <a href=""/radar/platforms/kubernetes"">Kubernetes</a>, but also works with plain old services. It can be used in a bewildering array of ways, starting from simple services in your language of choice to Docker containers or services built using an SDK. Since its release a couple of years ago, it has steadily added more features, including Linux container support. Kubernetes has been the poster child of container orchestration tools, but Service Fabric is the default choice for .NET applications. We're using it in a few projects at ThoughtWorks and we like what we’ve seen so far.</p>"
"2017-11",Cloud Spanner,Platforms,Assess,"<p><a href=""http://cloud.google.com/spanner/""><strong>Cloud Spanner</strong></a> is a fully managed relational database service offering high availability and strong consistency without compromising latency. Google has been working on a globally distributed database called Spanner for quite some time. It has recently released the service to the outside world as Cloud Spanner. You can scale your database instance from one to thousands of nodes across the globe without worrying about data consistency. By levering <a href=""http://cloud.google.com/spanner/docs/true-time-external-consistency"">TrueTime</a>, a highly available and distributed clock, Cloud Spanner provides strong consistency for reads and snapshots. You can use standard SQL to read data from Cloud Spanner, but for write operations you have to use their RPC API. Although not all services would require a global-scale distributed database, the general availability of Cloud Spanner is a big shift in the way we think about databases. And its design is influencing open source products such as <a href=""http://github.com/cockroachdb/cockroach"">CockroachDB</a>.</p>"
"2017-11",Corda,Platforms,Assess,"<p>After thorough exploration, R3, an important player in the blockchain space, realized that blockchain doesn't fit their purpose well, so they created <strong><a href=""http://www.corda.net"">Corda</a></strong>. Corda is a distributed ledger technology (DLT) platform focused on the financial field. R3 have a very clear value proposition and know that their problem requires a pragmatic technology approach. This matches our own experience; current blockchain solutions may not be the reasonable choice for some business cases, due to mining costs and operational inefficiency. Although the development experience we have on Corda thus far has not been the smoothest, <a href=""http://docs.corda.net/releases/release-V1.0/api-index.html#internal-apis-and-stability-guarantees"">APIs are still unstable after v1.0 release</a>, we expect to see the DLT space mature further.</p>"
"2017-11",Cosmos DB,Platforms,Assess,"<p><a href=""http://docs.microsoft.com/en-us/azure/cosmos-db/introduction""><strong>Cosmos DB</strong></a> is Microsoft's globally distributed, multimodel database service, which became generally available earlier this year. While most modern NoSQL databases offer tunable consistency, Cosmos DB makes it a first-class citizen and offers five different consistency models. It's worth highlighting that it also supports multiple models — key value, document, column family and graph — all of which map to its internal data model, called atom-record-sequence (ARS). One interesting aspect of Cosmos DB is that it offers service level agreements (SLAs) on its latency, throughput, consistency and availability. With its wide range of applicability, it has set a high standard for other cloud vendors to match.</p>"
"2017-11",DialogFlow,Platforms,Assess,"<p>In parallel with the recent surge of chatbots and <a href=""/radar/platforms/voice-platforms"">voice platforms</a>, we've seen a proliferation of tools and platforms that provide a service to extract intent from text and management of conversational flows that you can hook into. <a href=""http://github.com/dialogflow""><strong>DialogFlow</strong></a> (formerly API.ai), which was acquired by Google, is one such ‘natural-language-understanding as a service’ offering that competes with <a href=""/radar/platforms/wit-ai"">wit.ai</a> and <a href=""http://aws.amazon.com/lex/"">Amazon Lex</a> among other players in this space.</p>"
"2017-11",Buildkite,Tools,Trial,"<p>Our teams very much like the hosted CI/CD tool <a href=""http://buildkite.com/""><strong>Buildkite</strong></a> for its simplicity and quick setup. With Buildkite, you provide your own machines to execute builds — on premise or in the cloud — and install a lightweight agent application to connect the build agent to the hosted service. In many cases, having this level of control over the configuration of your build agents is a plus when compared to using hosted agents.</p>"
"2017-11",GKE,Platforms,Assess,"<p>While the software development ecosystem is converging on <a href=""/radar/platforms/kubernetes"">Kubernetes</a> as the orchestration platform for containers, running Kubernetes clusters remains operationally complex. <strong>GKE</strong> (Google Kubernetes Engine) is a managed Kubernetes solution for deploying containerized applications that alleviates the operational overhead of running and maintaining Kubernetes clusters. Our teams have had a good experience using GKE, with the platform doing the heavy lifting of applying security patches, monitoring and auto-repairing the nodes, and managing multicluster and multiregion networking. In our experience, Google's API-first approach in exposing platform capabilities, as well as using industry standards such as OAuth for service authorization, improve the developer experience. It's important to consider that GKE is under rapid development which, despite the developers' best efforts to abstract consumers from underlying changes, has impacted us temporarily in the past. We're expecting continuous improvement around maturity of <a href=""/radar/tools/infrastructure-as-code"">Infrastructure as code</a> with <a href=""http://www.terraform.io/docs/providers/google/r/container_cluster.html"">Terraform on GKE</a> and similar tools.</p>"
"2017-11",Hyperledger,Platforms,Assess,"<p><strong>Hyperledger</strong> is a platform built around blockchain technologies. It consists of a blockchain implementation named Fabric and other associated tools. Disregarding the hype surrounding blockchain, our teams have found it easy to get started with these tools. The fact that it is an open source platform supported by the Linux Foundation also adds to our excitement about Hyperledger.</p>"
"2017-11",Kafka Streams,Platforms,Assess,"<p><strong>Kafka Streams</strong> is a lightweight library for building streaming applications. It's been designed with the goal of simplifying stream processing enough to make it easily accessible as a mainstream application programming model for asynchronous services. It can be a good alternative in scenarios where you want to apply a stream processing model to your problem, without embracing the complexity of running a cluster (usually introduced by full-fledged stream processing frameworks). New developments include ‘exactly once’ stream processing in a Kafka cluster. This was achieved by introducing idempotency in Kafka producers and allowing atomic writes across multiple partitions using the new Transactions API.</p>"
"2017-11",Language Server Protocol,Platforms,Assess,"<p>Much of the power of sophisticated IDEs comes from their ability to parse a program into an abstract syntax tree (AST) and then use that AST for program analysis and manipulation. This supports features such as autocomplete, finding callers and refactoring. Language servers pull this capability into a process that allows any text editor to access an API to work with the AST. Microsoft has led the creation of the <a href=""http://github.com/Microsoft/language-server-protocol""><strong>Language Server Protocol</strong></a> (LSP), harvested from their OmniSharp and TypeScript Server projects.<a href=""http://langserver.org#implementations-client"">Any editor</a> that uses this protocol can work with any language that has an <a href=""http://langserver.org#implementations-server"">LSP-compliant server</a>. This means we can keep using our favorite editors without forgoing the rich text editing modes of many languages — much to the delight of our Emacs addicts.</p>"
"2017-11",LoRaWAN,Platforms,Assess,"<p><strong>LoRaWAN</strong> is a low-power wide-area network, designed for low-power consumption and communication over long distances using low bitrates. It provides for communication between devices and gateways, which can then forward the data to, for example, applications or servers. A typical usage is for a distributed set of sensors, or for Internet of Things (IoT) devices, for which long battery life and long-range communication is a must. LoRaWAN addresses two of the key problems with attempting to use normal Wi-Fi for such applications: range and power consumption. There are several implementations, a notable one being <a href=""http://www.thethingsnetwork.org/"">The Things Network</a>, a free, open source implementation.</p>"
"2017-11",MapD,Platforms,Assess,"<p><a href=""http://www.mapd.com/""><strong>MapD</strong></a> is an in-memory columnar analytic database with SQL support that's built to run on GPU. We debated whether the database workload is actually I/O or computationally bound but there are instances where the parallelism of the GPU, combined with the large bandwidth of VRAM, can be quite useful. MapD transparently manages the most frequently used data in VRAM (such as columns involved in group-by, filters, calculations and join conditions) and stores the rest of the data in the main memory. With this memory management setup, MapD achieves significant query performance without the need of indexes. Although there are other GPU database vendors, MapD is leading this segment with the recent open source release of its core database and through the <a href=""http://gpuopenanalytics.com"">GPU Open Analytics Initiative</a>. If your analytical workload is computationally heavy, can exploit GPU parallelism and can fit in the main memory, we recommend assessing MapD.</p>"
"2017-11",Mosquitto,Platforms,Assess,"<p>In our experience—for Internet of Things (IoT) solutions where a lot of devices communicate with each other and/or a central data hub—the MQTT connectivity protocol has proven itself. We've also come to like the <strong><a href=""http://mosquitto.org/"">Mosquitto</a></strong> MQTT broker. It might not satisfy all demands, particularly with regard to scalability, but its compact nature and easy setup makes it ideal for development and testing purposes.</p>"
"2017-11",Netlify,Platforms,Assess,"<p>We like simple tools that solve one problem really well, and <a href=""http://www.netlify.com/""><strong>Netlify</strong></a> fits this description nicely. You can create static website content, check it into GitHub and then quickly and easily get your site live and available. There is a CLI available to control the process; content delivery networks (CDNs) are supported; it can work alongside tools such as <a href=""http://gruntjs.com/"">Grunt</a>; and, most importantly, Netlify supports HTTPS.</p>"
"2017-11",PlatformIO,Platforms,Assess,"<p><strong><a href=""http://platformio.org/"">PlatformIO</a></strong> provides a rich ecosystem for IoT development by providing cross-platform builds, library management and good integration with existing IDEs. The intelligent code completion and Smart Code Linter with built-in terminal and serial port monitor greatly enhances the developer experience. It also organizes and maintains <a href=""http://platformio.org/lib"">thousands of libraries</a> and provides a clean dependency manager with semantic versioning to ease IoT development. We've started using PlatformIO in a few IoT projects and we really like it for its simplicity and wide support of <a href=""http://platformio.org/platforms"">platforms</a> and <a href=""http://platformio.org/boards"">boards</a>.</p>"
"2017-11",TensorFlow Serving,Platforms,Assess,"<p>Machine-learning models are starting to creep into everyday business applications. When enough training data is available, these algorithms can address problems that might have previously required complex statistical models or heuristics. As we move from experimental use to production, we need a reliable way to host and deploy the models that can be accessed remotely and scale with the number of consumers. <a href=""http://www.tensorflow.org/serving/""><strong>TensorFlow Serving</strong></a> addresses part of that problem by exposing a remote gRPC interface to an exported model; this allows a trained model to be deployed in a variety of ways. TensorFlow Serving also accepts a stream of models to incorporate continuous training updates, and its authors maintain a Dockerfile to ease the deployment process. Presumably, the choice of gRPC is to be consistent with the TensorFlow execution model; however, we’re generally wary of protocols that require code generation and native bindings.</p>"
"2017-11",Voice platforms,Platforms,Assess,"<p><strong>Voice platforms</strong> such as <a href=""https://developer.amazon.com/alexa"">Amazon Alexa</a> and <a href=""https://developers.google.com/actions/"">Google Home</a> are riding high on the hype cycle; some even herald the ubiquity of the conversational voice interface. We're already integrating conversational UIs into products and seeing the impact of this new interaction in how we design interfaces. Alexa specifically was built from the ground up without a screen and treats the conversational UI as first-class. But it's still too early to believe the hype, and we expect more big players to get in the game.</p>"
"2017-11",Windows Containers,Platforms,Assess,"<p>Microsoft is catching up in the container space with <a href=""http://docs.microsoft.com/en-us/virtualization/windowscontainers/about/""><strong>Windows Containers</strong></a>. At the time of writing, Microsoft provides two Windows OS images as Docker containers, <a href=""http://hub.docker.com/r/microsoft/windowsservercore/"">Windows Server 2016 Server Core</a> and <a href=""http://hub.docker.com/r/microsoft/nanoserver/"">Windows Server 2016 Nano Server</a>. Although there is room for improvement for Windows Containers, for instance, decreasing the large image sizes, and enriching ecosystem support and documentation, our teams have started using them in scenarios where other containers have been working successfully, such as <a href=""/radar/techniques/docker-for-builds"">build agents</a>.</p>"
"2017-11",Overambitious API gateways,Platforms,Hold,"<p>We remain concerned about business logic and process orchestration implemented in middleware, especially where it requires expert skills and tooling while creating single points of scaling and control. Vendors in the highly competitive API gateway market are continuing this trend by adding features through which they attempt to differentiate their products. This results in <strong>overambitious API gateway</strong> products whose functionality — on top of what is essentially a reverse proxy — encourages designs that continue to be difficult to test and deploy. API gateways do provide utility in dealing with some specific concerns — such as authentication and rate limiting — but any domain smarts should live in applications or services.</p>"
"2017-11",Python 3,languages-and-frameworks,Adopt,"<p><strong>Python 3</strong> introduced many useful features that are not backward compatible with Python 2.x. It also removed numerous Python 2.x features that were maintained for backward compatibility, making Python 3 easier to learn and use and more consistent with the rest of the language. Our experience using Python 3 in domains such as machine learning and web application development shows that both the language and most of its <a href=""http://py3readiness.org/"">supporting libraries</a> have matured for adoption. We were able to fork and patch minor issues of existing libraries or avoided using incompatible Python 2.x libraries that had been abandoned. If you are developing in Python we strongly encourage you to use Python 3.</p>"
"2017-11",Angular,languages-and-frameworks,Trial,"<p>In previous Radar editions, we've been hesitant to give <strong>Angular</strong> a strong recommendation because it was essentially a new, and on the whole unexciting, framework, sharing only its name with AngularJS, an older framework we loved in days past. In the meantime, Angular, now in version 5, has improved steadily while providing backward compatibility along the way. Several of our teams have Angular applications in production and reportedly, they like what they see. For this reason, we're moving Angular into the Trial ring in this Radar, to signify that some of our teams now consider it a solid choice. Most of our teams, however, still prefer <a href=""/radar/languages-and-frameworks/react-js"">React</a>, <a href=""/radar/languages-and-frameworks/vue-js"">Vue</a> or <a href=""/radar/languages-and-frameworks/ember-js"">Ember</a> over Angular.</p>"
"2017-11",AssertJ,languages-and-frameworks,Trial,"<p><a href=""http://joel-costigliola.github.io/assertj/index.html""><strong>AssertJ</strong></a> is a Java library that provides a <a href=""http://martinfowler.com/bliki/FluentInterface.html"">fluent interface</a> for assertions, which makes it easy to convey intent within test code. AssertJ gives readable error messages, soft assertions, and improved collections and exception support. We're seeing some teams default to its use instead of JUnit combined with Hamcrest.</p>"
"2017-11",Avro,languages-and-frameworks,Trial,"<p><strong><a href=""https://avro.apache.org/"">Avro</a></strong> is a framework for data serialization. By storing schema along with the message content, it encourages schema evolution. Producers can edit field names, add new fields or delete existing fields and Avro guarantees that the clients continue to consume the messages. Having a schema allows data to be written without overhead which results in compact data encoding and faster data processing. Although the exchange of structure-less messages between producer and consumer is flexible, we've seen teams facing issues with incompatible unprocessed messages in the queue during deployments. We've used Avro in a number of projects and would recommend using it over just sending unstructured messages.</p>"
"2017-11",CSS Grid Layout,languages-and-frameworks,Trial,"<p>CSS is the preferred choice for laying out web pages, even when it did not provide much explicit support for creating layouts. Flexbox helped with simpler, one-dimensional layouts, but developers usually reached for libraries and toolkits for more complex layouts. <a href=""http://www.w3.org/TR/css-grid-1""><strong>CSS Grid Layout</strong></a> is a two-dimensional grid-based layout system that provides a mechanism to divide available space for layout into columns and rows using a set of predictable sizing behaviors. Grid does not require any libraries and plays well with Flexbox and other CSS display elements. However, since IE11 is only <a href=""http://caniuse.com/#search=css%20grid%20layout"">partially supported</a>, it ignores users who still depend on a Microsoft browser on Windows 7.</p>"
"2017-11",CSS Modules,languages-and-frameworks,Trial,"<p>Most large CSS codebases require complex naming schemes to help avoid naming conflicts in the global namespace. <a href=""http://github.com/css-modules/css-modules""><strong>CSS Modules</strong></a> address these problems by creating a local scope for all class names in a single CSS file. This file is imported to a JavaScript module, where CSS classes are referenced as strings. Then, in the build pipeline (Webpack, Browserify, etc.), the class names are replaced with generated unique strings. This is a significant change in responsibilities. Previously, a human had to manage the global namespace, to avoid class naming conflicts; now that responsibility rests with the build tooling. A small downside we've encountered with CSS Modules: functional tests are usually out of the local scope and can therefore not reference classes by the name defined in the CSS file. We recommend using IDs or data attributes instead.</p>"
"2017-11",Jest,languages-and-frameworks,Trial,"<p>Our teams are delighted with the results of using <a href=""http://facebook.github.io/jest/""><strong>Jest</strong></a> for front-end testing. It provides a ‘zero-configuration’ experience and has out-of-the-box features such as mocking and code coverage. You can apply this testing framework not only to <a href=""/radar/languages-and-frameworks/react-js"">React</a> applications, but also to other JavaScript frameworks. One of Jest's often hyped features is UI snapshot testing. Snapshot testing would be a good addition to the upper layer of the <a href=""http://martinfowler.com/bliki/TestPyramid.html"">test pyramid</a>, but remember, unit testing is still the solid foundation.</p>"
"2017-11",Kotlin,languages-and-frameworks,Trial,"<p>The announcement of first-class Android support has given an extra boost to the rapidly progressing <strong>Kotlin</strong> language, and we're closely following the progress of <a href=""http://blog.jetbrains.com/kotlin/2017/04/kotlinnative-tech-preview-kotlin-without-a-vm/"">Kotlin/Native</a> — the LLVM-backed ability to compile to native executables. Null safety, data classes and the ease of creating DSLs are some of the benefits we've enjoyed, along with the <a href=""http://github.com/Kotlin/anko"">Anko</a> library for Android development. Despite the downsides of slow initial compilation and reliance on IntelliJ for first-class IDE support, we recommend giving this fresh and concise modern language a try.</p>"
"2017-11",Spring Cloud,languages-and-frameworks,Trial,"<p><a href=""http://projects.spring.io/spring-cloud/""><strong>Spring Cloud</strong></a> continues to evolve and add interesting new features. Support for binding to <a href=""/radar/platforms/kafka-streams"">Kafka Streams</a>, for example, in the spring-cloud-streams project makes it relatively easy to build message driven applications with connectors for Kafka and RabbitMQ. The teams we have using it appreciate the simplicity it brings to using sometimes complex infrastructure, such as <a href=""http://zookeeper.apache.org/"">ZooKeeper</a>, and support for common problems that we need to address when building distributed systems, tracing with the <a href=""http://cloud.spring.io/spring-cloud-sleuth/"">spring-cloud-sleuth</a> for example. The usual caveats apply but we're successfully using it on multiple projects.</p>"
"2017-11",Android Architecture Components,languages-and-frameworks,Assess,"<p>Historically, Google's Android documentation examples lacked architecture and structure. This changes with the release of <strong>Android Architecture Components</strong> , a set of opinionated libraries that help developers create Android applications with better architecture. They address longstanding pain points of Android development: handling lifecycles; pagination; SQLite databases; and data persistence over configuration changes. The libraries don't need to be used together — you can pick the ones you need most and integrate them into your existing project.</p>"
"2017-11",ARKit/ARCore,languages-and-frameworks,Assess,"<p>We've seen a flurry of activity in mobile augmented reality much of it fueled by <strong>ARKit and ARCore</strong> , the native AR libraries used by <a href=""http://developer.apple.com/arkit/"">Apple</a> and <a href=""http://developers.google.com/ar/"">Google</a>, respectively. These libraries are bringing mobile AR technologies to the mainstream. However, the challenge will be for companies to find use cases that go beyond gimmicky and provide genuine solutions that actually enhance the user experience.</p>"
"2017-11",Atlas and BeeHive,languages-and-frameworks,Assess,"<p>A multi-app strategy is really controversial, particularly at a time when fewer and fewer users are downloading new apps. Instead of introducing a new app and struggling with the download numbers, multiteams have to deliver functionality via a single app that is already widely installed, which creates an architectural challenge. <strong><a href=""http://github.com/alibaba/atlas"">Atlas</a> and <a href=""http://github.com/alibaba/BeeHive"">BeeHive</a></strong> are modularization solutions for Android and iOS apps, respectively. Atlas and BeeHive enable multiteams working on physically isolated modules to reassemble or dynamically load these modules from a facade app. Both are Alibaba open source projects, since Alibaba encountered the same problem of dwindling downloads and single-app architectural challenges.</p>"
"2017-11",Caffe,languages-and-frameworks,Assess,"<p><a href=""http://caffe.berkeleyvision.org/""><strong>Caffe</strong></a> is an open source library for deep learning created by the <a href=""http://bair.berkeley.edu/"">Berkeley Vision and Learning Center</a>. It mostly focusses on convolutional networks for computer vision applications. Caffe is a solid and popular choice for computer vision-related tasks and you can download many successful models made by Caffe users from the Caffe Model Zoo for out-of-the-box use. Like <a href=""/radar/languages-and-frameworks/keras"">Keras</a>, Caffe is a Python-based API. In Keras, however, models and components are objects created directly in Python code, whereas Caffe models are described by <a href=""https://developers.google.com/protocol-buffers/"">Protobuf</a> configuration files. Either approach has its pros and cons, and converting between the two is also possible.</p>"
"2017-11",Clara rules,languages-and-frameworks,Assess,"<p>Our first rule of thumb in selecting a rules engine is normally: you don't need a rules engine. We've seen too many people tying themselves to a hard-to-test black-box rules engine for spurious reasons, when custom code would have been a better solution. That said, we've had success using <a href=""http://www.clara-rules.org/""><strong>Clara rules</strong></a> for scenarios where a rules engine does make sense. We like that it uses simple Clojure code to express and evaluate the rules, which means they are amenable to refactoring, testing and source control. Rather than chasing the illusion that business people should directly manipulate the rules, it drives collaboration between the business experts and developers.</p>"
"2017-11",CSS-in-JS,languages-and-frameworks,Assess,"<p><strong>CSS in JS</strong> is a technique of writing CSS styling in the JavaScript programming language. This encourages a common pattern of writing the styling with the JavaScript component it applies to, co-locating presentational and logical concerns. The new players — including <a href=""http://github.com/cssinjs/jss"">JSS</a>, <a href=""http://github.com/emotion-js/emotion"">emotion</a> and <a href=""http://github.com/styled-components/styled-components"">styled-components</a> — rely on the tooling to translate the CSS-in-JS code to separate CSS stylesheets, to make them suitable for browser consumption. This is the second-generation approach to writing CSS in JavaScript and unlike the previous approaches doesn’t rely on in-line styles. That means it provides the benefit of supporting all CSS features, sharing of CSS using the <a href=""/radar/techniques/npm-for-all-the-things"">npm</a> ecosystem and utilization of components across multiple platforms. Our teams have found <a href=""http://github.com/styled-components/styled-components"">styled-components</a> working well with component-based frameworks, such as <a href=""/radar/languages-and-frameworks/react-js"">React</a>, and unit testing of CSS with <a href=""http://github.com/styled-components/jest-styled-components"">jest-styled-components</a>. This space is new and rapidly changing; the approach requires some effort for manual debugging of the generated class names in the browser, and it may not apply to some projects where the front-end architecture does not support reusing components and requires global styling.</p>"
"2017-11",Digdag,languages-and-frameworks,Assess,"<p><a href=""http://www.digdag.io/""><strong>Digdag</strong></a> is a tool for building, running, scheduling and monitoring complex data pipelines in the cloud. You can define these pipelines in YAML, using either the rich set of out-of-the-box operators or building your own through the API. Digdag has most of the common features in a data pipeline solution such as dependency management, modular workflow to promote reuse, secured secret management and multilingual support. The feature we're most excited about is polycloud support, which lets you move and join data across AWS RedShift, S3, and Google <a href=""/radar/platforms/bigquery"">BigQuery</a>. As more and more cloud providers offer competing data-processing solutions, we think Digdag (and similar tools) will be useful in leveraging the best option for the task.</p>"
"2017-11",Druid,languages-and-frameworks,Assess,"<p><a href=""http://github.com/jilen/druid""><strong>Druid</strong></a> is a JDBC connection pool with rich monitoring features. It has a built-in SQL parser, which provides semantic monitoring of the SQL statements executing in the database. Injections or suspicious SQL statements will be blocked and logged directly from the JDBC layer. What’s more, queries can be merged based on their semantics. This is an Alibaba open source project, and reflects the lessons Alibaba learnt from operating their own database systems.</p>"
"2017-11",ECharts,languages-and-frameworks,Assess,"<p><a href=""http://github.com/ecomfe/echarts""><strong>ECharts</strong></a> is a lightweight charting library with rich support for different types of charts and interactions. Since ECharts is entirely based on the <a href=""http://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"">Canvas API</a>, it has incredible performance even when dealing with over 100k data points, and it's also been optimized for mobile usage. Together with its sibling project, <a href=""http://echarts.baidu.com/echarts2/x/doc/index.html"">ECharts-X</a>, it can support 3D plotting. ECharts is a Baidu open source project.</p>"
"2017-11",Gobot,languages-and-frameworks,Assess,"<p>The ability to compile the <a href=""/radar/languages-and-frameworks/go-language"">Go programming language</a> to bare metal targets has raised interest among developers in using the language for embedded systems. <a href=""http://gobot.io/""><strong>Gobot</strong></a> is a framework for robotics, physical computing, and the Internet of Things, written in the Go programming language and supporting a variety of platforms. We've used the framework for experimental robotic projects where real-time response hasn't been a requirement, and we’ve created open source <a href=""http://github.com/HendrikLouw/robocar"">software drivers</a> with Gobot. Gobot HTTP APIs enable simple hardware integration with mobile devices to create richer applications.</p>"
"2017-11",Instana,languages-and-frameworks,Assess,"<p><strong><a href=""http://www.instana.com/"">Instana</a></strong> is yet another entrant into the crowded application performance management space. The fact that it's built from the ground up for cloud native architectures differentiates Instana from many of its competitors. Features include dynamic discovery, distributed tracing and service health plus the ability to ""time shift"" your view of your infrastructure to the moment an incident occurred. It remains to be seen whether this product can gain traction over the combination of open source projects—such as <a href=""/radar/tools/consul"">Consul</a>, <a href=""/radar/tools/prometheus"">Prometheus</a> and the implementations of <a href=""/radar/platforms/opentracing"">OpenTracing</a>—that do the same thing; however it's worth taking a look if you need an out-of-the-box solution.</p>"
"2017-11",Keras,languages-and-frameworks,Assess,"<p><a href=""https://keras.io/""><strong>Keras</strong></a> is a high-level interface in Python for building neural networks. Created by a Google engineer, Keras is open source and runs on top of either <a href=""/radar/platforms/tensorflow"">TensorFlow</a> or <a href=""http://github.com/Theano/Theano"">Theano</a>. It provides an amazingly simple interface for creating powerful deep-learning algorithms to train on CPUs or GPUs. Keras is well designed with modularity, simplicity, and extensibility in mind. Unlike a library such as <a href=""/radar/languages-and-frameworks/caffe"">Caffe</a>, Keras supports more general network architectures such as recurrent nets, making it overall more useful for text analysis, NLP and general machine learning. If computer vision, or any other specialized branch of machine learning, is your primary concern, Caffe may be a more appropriate choice. However, if you’re looking to learn a simple yet powerful framework, Keras should be your first choice.</p>"
"2017-11",LeakCanary,languages-and-frameworks,Assess,"<p>Our mobile teams have been excited about <a href=""http://github.com/square/leakcanary""><strong>LeakCanary</strong></a>, a tool for detecting annoying memory leaks in Android and Java. It's simple to hook up and provides notifications with a clear trace-back to the cause of the leak. Adding this to your toolkit can save tedious hours troubleshooting out-of-memory errors on multiple devices.</p>"
"2017-11",CircleCI,Tools,Trial,"<p><a href=""http://circleci.com/""><strong>CircleCI</strong></a> is a continuous integration engine offered as SaaS and on premise. CircleCI has been the go-to SaaS CI tool for many of our development teams, who needed a low-friction and easy-to-setup build and deployment pipeline. CircleCI version 2.0 supports workflows of build jobs, with fan-in and fan-out flows and manual gates, as well as mobile development. It allows developers to run the pipelines locally and easily integrates with Slack and other notification and alerting systems. We recommend you take a closer look at the <a href=""http://circleci.com/security/"">security practices of CircleCI</a>, just as you would with any other SaaS product that hosts your company’s assets.</p>"
"2017-11",PostCSS,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/postcss/postcss"">PostCSS</a></strong> is a <a href=""/radar/platforms/node-js"">Node.js</a>-based JavaScript framework for operating on an abstract syntax tree-based representation of CSS documents with a rich ecosystem of plugins. Often incorrectly thought of as a preprocessor (such as SASS or Less), we find that the real power of PostCSS comes from the number of things that can be done with the rich set of plugins which includes linting (<a href=""https://github.com/stylelint/stylelint"">the stylelint plugin</a>), cross-compilation (<a href=""https://github.com/postcss/sugarss"">the sugarss plugin</a>), name-mangling to avoid selector collision (<a href=""https://github.com/css-modules/postcss-modules"">the modules plugin</a>), boilerplate CSS code generation (<a href=""https://github.com/postcss/autoprefixer"">the autoprefixer plugin</a>), <a href=""http://cssnano.co/"">minification</a> and many others. The different maturity levels of the plugins notwithstanding, PostCSS itself remains a simple and powerful framework for treating CSS like a full-fledged language for front-end development.</p>"
"2017-11",PyTorch,languages-and-frameworks,Assess,"<p><a href=""http://pytorch.org/""><strong>PyTorch</strong></a> is a complete rewrite of the <a href=""http://torch.ch/"">Torch</a> machine learning framework from Lua to Python. Although quite new and immature compared to <a href=""/radar/platforms/tensorflow"">Tensorflow</a>, programmers find PyTorch much easier to work with. Because of its object-orientation and native Python implementation, models can be expressed more clearly and succinctly and debugged during execution. Although many of these frameworks have emerged recently, PyTorch has the backing of Facebook and broad range of partner organisations, including NVIDIA, which should ensure continuing support for CUDA architectures. ThoughtWorks teams find PyTorch useful for experimenting and developing models but still rely on TensorFlow’s performance for production-scale training and classification.</p>"
"2017-11",single-spa,languages-and-frameworks,Assess,"<p><a href=""http://github.com/CanopyTax/single-spa""><strong>single-spa</strong></a> is a JavaScript metaframework that allows us to build <a href=""/radar/techniques/micro-frontends"">micro frontends</a> using different frameworks that can coexist in a single application. In general, we don't recommend using more than one framework for an application, but there are times when we can't avoid doing so. For instance, single-spa can be quite useful when you're working with a legacy application and you want to experiment by developing a new feature, with either a new version of the existing framework or a completely different one. Given the short life span of many JavaScript frameworks, we see a need for a solution that would allow for future framework changes and localized experimentation, without affecting the entire application. single-spa seems to be a good start in that direction.</p>"
"2017-11",Solidity,languages-and-frameworks,Assess,"<p>Programming for smart contracts requires a more expressive language than a <a href=""http://en.bitcoin.it/wiki/Script"">scripting system for transactions</a>. <a href=""http://github.com/ethereum/solidity""><strong>Solidity</strong></a> is the most popular among the new programming languages designed for smart contracts. Solidity is a contract-oriented, statically typed language whose syntax is similar to JavaScript. It provides abstractions for writing self-enforcing business logic in smart contracts. The toolchain around Solidity is growing fast. Nowadays, Solidity is the primary choice on the <a href=""/radar/platforms/ethereum"">Ethereum</a> platform. Given the immutable nature of deployed smart contracts, it should go without saying that rigorous testing and audit of dependencies is vital.</p>"
"2017-11",TensorFlow Mobile,languages-and-frameworks,Assess,"<p><strong>TensorFlow Mobile</strong> makes it possible for developers to incorporate a wide range of comprehension and classification techniques into their iOS or Android applications. This is particularly useful given the range of sensor data available on mobile phones. Pretrained TensorFlow models can be loaded into a mobile application and applied to inputs such as live video frames, text or speech. Mobile phones present a surprisingly opportune platform for implementing these computational models. TensorFlow models are exported and loaded as protobuf files, which can present some problems for implementers. Protobuf's binary format can make it hard to examine models and requires that you link the correct protobuf library version to your mobile app. But local model execution offers an attractive alternative to <a href=""/radar/platforms/tensorflow-serving"">TensorFlow Serving</a> without the communication overhead of remote execution.</p>"
"2017-11",Truffle,languages-and-frameworks,Assess,"<p><a href=""http://truffleframework.com/""><strong>Truffle</strong></a> is a development framework that brings a modern web development experience to the <a href=""/radar/platforms/ethereum"">Ethereum</a> platform. It takes over the job of smart contract compiling, library linking and deployment, as well as dealing with artifacts in different blockchain networks. One of the reasons we love Truffle is that it encourages people to write tests for their smart contracts. You need to take tests really seriously as smart contract programming is often related to money. With its built-in testing framework and integration with <a href=""http://github.com/ethereumjs/testrpc"">TestRPC</a>, Truffle makes it possible to write the contract in a TDD way. We expect to see more technologies similar to Truffle to promote continuous integration in the blockchain area.</p>"
"2017-11",Weex,languages-and-frameworks,Assess,"<p><a href=""http://github.com/alibaba/weex""><strong>Weex</strong></a> is a framework for building cross-platform mobile apps by using the <a href=""/radar/languages-and-frameworks/vue-js"">Vue.js</a> component syntax. For those who prefer the simplicity of Vue.js, Weex is a viable option for native mobile apps, but it also works very well for more complicated apps. We see many successes for fairly complicated mobile apps built on this framework, including <a href=""http://www.tmall.com/"">TMall</a> and <a href=""http://world.taobao.com/"">Taobao</a>, two of the most popular mobile apps in China. Weex was developed by Alibaba, and is now an <a href=""http://github.com/apache/incubator-weex"">Apache incubator project</a>.</p>"
"2017-11",fastlane,Tools,Adopt,"<p>Web application developers have it easy when it comes to simplifying and automating diverse application workflows; they can choose from a variety of solutions to help automate release processes. When developing for mobile, however, we're dealing with two operating systems with two different ways of building, testing, distribution, generating screenshots, signing and distributing applications. To help ease the pain, our teams have adopted <strong><a href=""https://fastlane.tools/"">fastlane</a></strong> as the go-to tool to automate the release process for iOS and Android applications. Using simple configurations and multiple pipelines, they can achieve <a href=""/radar/techniques/continuous-delivery-cd"">continuous delivery</a> for mobile development.</p>"
"2017-11",gopass,Tools,Trial,"<p><a href=""http://www.justwatch.com/gopass/""><strong>gopass</strong></a> is a password management solution for teams, built on GPG and <a href=""/radar/tools/git"">Git</a>. It's a descendant of <a href=""http://www.passwordstore.org"">pass</a> and adds features such as: support for recipient management and multiple password stores in a single tree; an interactive search functionality; time-based one-time password (TOTP) support; and storage of binary data. Migration of your pass store is fairly straightforward, because gopass is largely compatible with the format pass uses. This also means integration into provisioning workflows can be achieved with a single call to a stored secret.</p>"
"2017-11",Headless Chrome for front-end test,Tools,Trial,"<p>Since mid-2017, Chrome users have had the option of running the browser in headless mode. This feature is ideally suited to running front-end browser tests without the overhead of displaying actions on a screen. Previously, this was largely the province of PhantomJS but <a href=""http://developers.google.com/web/updates/2017/06/headless-karma-mocha-chai"">Headless Chrome</a> is rapidly replacing the JavaScript-driven WebKit approach. Tests in Headless Chrome should run much faster, and behave more like a real browser, but our teams have found that it does use more memory than PhantomJS. With all these advantages, <strong>Headless Chrome for front-end test</strong> is likely to become the de facto standard.</p>"
"2017-11",jsoniter,Tools,Trial,"<p>If you're looking for a JSON encoder/decoder with high performance in Go and Java, check out the open source <a href=""http://jsoniter.com/""><strong>jsoniter</strong></a> library. The library is compatible with the <a href=""http://golang.org/pkg/encoding/json/"">standard JSON encoding package in Go</a>.</p>"
"2017-11",Prometheus,Tools,Trial,"<p>We've seen both continuing improvements in and an uptick in adoption of <a href=""http://prometheus.io/""><strong>Prometheus</strong></a>, the monitoring and time series database tool originally developed by Soundcloud. Prometheus primarily supports a pull-based HTTP model but it also supports alerts, making it an active part of your operational toolset. As of this writing, Prometheus 2.0 is in prerelease, and continues to evolve. Prometheus developers have focused their efforts on core time series databases and the variety of metrics available. <a href=""/radar/tools/grafana"">Grafana</a> has become the dashboard visualization tool of choice for Prometheus users and support for Grafana ships with the tool. Our teams also find that Prometheus monitoring nicely complements the indexing and search capabilities of an Elastic Stack.</p>"
"2017-11",Scikit-learn,Tools,Trial,"<p><strong><a href=""http://scikit-learn.org/stable/"">Scikit-learn</a></strong> is not a new tool (it is approaching its tenth birthday); what is new is the rate of adoption of machine-learning tools and techniques outside of academia and major tech companies. Providing a robust set of models and a rich set of functionality, Scikit-learn plays an important role in making machine-learning concepts and capabilities more accessible to a broader (and often non-expert) audience.</p>"
"2017-11",Serverless Framework,Tools,Trial,"<p>The popular <strong><a href=""https://serverless.com/"">Serverless Framework</a></strong> provides tooling for scaffolding and deployment of serverless applications, primarily using <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> and other AWS offerings. Serverless Framework provides template support for JavaScript, Python, Java and C#, and has an active community that contributes plugins that extend the framework. The framework also supports the Apache incubator project OpenWhisk as an alternative to AWS Lambda.</p>"
"2017-11",Apex,Tools,Assess,"<p><a href=""http://github.com/apex/apex""><strong>Apex</strong></a> is a tool to build, deploy and manage AWS Lambda functions with ease. With Apex, you can write functions in languages that are not yet natively supported in AWS, including Golang, Rust and others. This is made possible by a Node.js shim, which creates a child process and processes events through stdin and stdout. Apex has a lot of nice <a href=""http://github.com/apex/apex#features"">features</a> that improve the developer experience, and we particularly like the ability to test functions locally and perform a dry run of the changes before they're applied to AWS resources.</p>"
"2017-11",assertj-swagger,Tools,Assess,"<p>An <a href=""/radar/languages-and-frameworks/assertj"">AssertJ</a> library, <a href=""http://github.com/RobWin/assertj-swagger""><strong>assertj-swagger</strong></a> enables you to validate an API implementation's compliance with its contract specification. Our teams use assertj-swagger to catch problems when the API endpoint implementation changes without updating its <a href=""/radar/tools/swagger"">Swagger</a> specification, or fails to publish the updated documentation.</p>"
"2017-11",Cypress,Tools,Assess,"<p>Fixing end-to-end test failures in CI can be a painful experience, especially in headless mode. <a href=""http://www.cypress.io/""><strong>Cypress</strong></a> is a useful tool that helps developers build end-to-end tests easily and records all test steps as a video in an MP4 file. Instead of reproducing the issue in headless mode, developers can watch the testing video in order to fix it. Cypress is a powerful platform, not only a testing framework. Currently, we've integrated its CLI with headless CI in our projects.</p>"
"2017-11",Flow,Tools,Assess,"<p><a href=""http://flow.org/""><strong>Flow</strong></a> is a static type checker for JavaScript that allows you to add type checking across the codebase incrementally. Unlike Typescript, which is a different language, Flow can be added incrementally to an existing JavaScript codebase supporting the 5th, 6th and 7th editions of ECMAScript. We suggest adding Flow to your continuous integration pipeline, starting with the code that concerns you most. Flow adds to the clarity of the code, increases the reliability of refactoring and catches type-related bugs early during the build.</p>"
"2017-11",InSpec,Tools,Assess,"<p>How does a business hand autonomy to delivery teams while still making sure their deployed solutions are safe and compliant? How do you ensure that servers, once deployed, remain secure and compliant over their operational lifetime? These are the problems that <strong>InSpec</strong> tries to address. InSpec is an infrastructure testing tool inspired by <a href=""/radar/tools/serverspec"">Serverspec</a>, but with modifications that make the tool more useful for security professionals who need to ensure compliance across thousands of servers. Individual tests can be combined into complete security profiles and run remotely from a command line. InSpec is useful for developers but extends to testing deployed production infrastructure continuously, moving toward <a href=""/radar/techniques/qa-in-production"">QA in production</a>.</p>"
"2019-11",Flutter,languages-and-frameworks,Trial,"<p>Several of our teams use <strong><a href=""http://flutter.io/"">Flutter</a></strong> and really like it. It's a cross-platform framework that enables you to write native mobile apps in <a href=""/radar/languages-and-frameworks/google-dart"">Dart</a>. It benefits from Dart and can be compiled into native code and communicates with the target platform without bridge and context switching. Flutter's hot-reload feature is still impressive and provides superfast visual feedback when editing code. We're confident in recommending that you try Flutter on one of your projects.</p>"
"2017-11",Jupyter,Tools,Assess,"<p>Over the last couple of years, we've noticed a steady rise in the popularity of analytics notebooks. These are Mathematica-inspired applications that combine text, visualization and code in a living, computational document. In a previous edition, we mentioned <a href=""/radar/tools/gorilla-repl"">GorillaREPL</a>, a Clojure variant of these. But increased interest in machine learning — along with the emergence of Python as the programming language of choice for practitioners in this field — has focused particular attention on Python notebooks, of which <a href=""http://jupyter.org/""><strong>Jupyter</strong></a> seems to be gaining the most traction among ThoughtWorks teams.</p>"
"2017-11",Kong API Gateway,Tools,Assess,"<p><a href=""http://getkong.org/"">Kong</a> is an <a href=""http://github.com/Kong/kong"">open source API gateway</a> built and sponsored by Mashape, who also provide an enterprise offering integrating Kong with their proprietary API analytics and developer portal tools. They can be deployed in a variety of configurations, as an edge API gateway or an internal API proxy. <a href=""http://openresty.org/en/"">OpenResty</a>, through its Nginx modules, provides a strong and performant foundation, with Lua plugins for extensions. Kong can either use PostgreSQL for single region deployments or Cassandra for multiregion configurations. Our developers have enjoyed Kong's high performance, its API-first approach (which enables automation of its configuration) and its ease of deployment as a container. <strong>Kong API Gateway</strong> , unlike <a href=""/radar/platforms/overambitious-api-gateways"">overambitious API gateways</a>, has a smaller set of features but it implements the essential set of API gateway capabilities such as traffic control, security, logging, monitoring and authentication. We're excited to assess Kong in a sidecar configuration in the near future.</p>"
"2017-11",kops,Tools,Assess,"<p><a href=""http://github.com/kubernetes/kops""><strong>kops</strong></a> is a command line tool for creating and managing high-availability production <a href=""/radar/platforms/kubernetes"">Kubernetes</a> clusters. Initially targeting AWS, it now has experimental support for other providers. It can get you up and running fast, and even though a few features (such as rolling upgrades) have yet to be fully developed, we've been impressed by the community.</p>"
"2017-11",Lighthouse,Tools,Assess,"<p><strong>Lighthouse</strong> is a tool written by Google to assess web applications for adherence to <a href=""/radar/techniques/progressive-web-applications"">Progressive Web App</a> standards. This year's Lighthouse 2.0 release adds performance metrics and accessibility checks to the basic toolset. This added functionality has now been incorporated into the standard Chrome developer tools under the audit tab. Lighthouse 2.0 is yet another beneficiary of Chrome's headless mode. This provides an alternative to <a href=""/radar/tools/pa11y"">Pa11y</a> and similar tools for running accessibility checks in a continuous integration pipeline, since the tool can be run from the command line or standalone as a Node.js application.</p>"
"2017-11",Rendertron,Tools,Assess,"<p>A perennial problem for JavaScript-heavy web applications is how to make the dynamic portion of those pages available to search engines. Historically, developers have resorted to a variety of tricks, including server-side rendering with <a href=""/radar/languages-and-frameworks/react-js"">React</a>, external services or prerendering content. Now Google Chrome's new headless mode adds a new ‘trick’ to the toolbox — <a href=""http://github.com/GoogleChrome/rendertron""><strong>Rendertron</strong></a>, a headless Chrome rendering solution. Rendertron wraps an instance of headless Chrome in a Docker container, ready to deploy as a standalone HTTP server. Bots that don't render JavaScript can be routed to this server to do the rendering for them. Although developers can always deploy their own headless Chrome proxy and associated routing machinery, Rendertron simplifies the configuration and deployment process, and provides example middleware code for detecting and routing bots.</p>"
"2017-11",Sonobuoy,Tools,Assess,"<p><a href=""http://heptio.com/opensource/#heptio-sonobuoy""><strong>Sonobuoy</strong></a> is a diagnostic tool for running end-to-end conformance tests on any <a href=""/radar/platforms/kubernetes"">Kubernetes</a> cluster in a nondestructive way. The team at <a href=""http://heptio.com/"">Heptio</a>, which was founded by two creators of the Kubernetes projects, built this tool to ensure that the wide array of Kubernetes distributions and configurations conform to the best practices, while following the open source standardization for interoperability of clusters. We're experimenting with Sonobuoy to run as part of our <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a> build pipeline, as well as continuous monitoring of our Kubernetes installations, to validate the behavior and health of the whole cluster.</p>"
"2017-11",spaCy,Tools,Assess,"<p><a href=""https://spacy.io/""><strong>spaCy</strong></a> is a Natural Language Processing (NLP) library written in Python. It is a high-performance library, intended for use by developers in production, and applies NLP models suited for processing text that often mixes in emoticons and inconsistent punctuation marks. Unlike other NLP frameworks, spaCy is a pluggable library and not a platform; it is aimed at production applications rather than model training for research. It plays well with <a href=""/radar/platforms/tensorflow"">TensorFlow</a> and the rest of the Python AI ecosystem. We've used spaCy in the enterprise context to build a search engine that takes human language queries and helps users make business decisions.</p>"
"2017-11",Spinnaker,Tools,Assess,"<p><a href=""http://techblog.netflix.com/2015/11/global-continuous-delivery-with.html"">Netflix</a> has open sourced <a href=""http://www.spinnaker.io/""><strong>Spinnaker</strong></a>, its microservices continuous delivery (CD) platform. Compared to other CI/CD platforms, Spinnaker implements cluster management and deployment of baked images to the cloud as first-class features. It supports out-of-the-box deployment and cluster management for multiple cloud providers such as Google Cloud Platform, AWS and <a href=""/radar/platforms/pivotal-cloud-foundry"">Pivotal Cloud Foundry</a>. You can integrate Spinnaker with Jenkins to run a Jenkins job build. We like Spinnaker's opinionated approach for deploying microservices to the cloud—with the exception that Spinnaker's pipelines are created via a user interface (UI) and cannot be configured as code.</p>"
"2017-11",Spring Cloud Contract,Tools,Assess,"<p>If you're implementing Java services using the <a href=""http://spring.io/"">Spring</a> framework, you may want to consider <a href=""http://cloud.spring.io/spring-cloud-contract/""><strong>Spring Cloud Contract</strong></a> for <a href=""/radar/techniques/consumer-driven-contract-testing"">consumer-driven contract testing</a>. The current ecosystem of this tool supports verification of the client calls and the server implementation against the contract. In comparison to <a href=""/radar/tools/pact-pacto"">Pact</a>, an open source consumer-driven contract testing tool set, it lacks the brokering of the contracts and the support for other programming languages. However, it integrates well with the Spring ecosystem, for instance message routing with <a href=""http://projects.spring.io/spring-integration/"">Spring Integration</a>.</p>"
"2017-11",Yarn,Tools,Assess,"<p><strong><a href=""https://yarnpkg.com/en/"">Yarn</a></strong> is a new package manager that replaces the existing workflow for the npm client while remaining compatible with the npm registry. With the npm client, we may end up with a different tree structure under node_modules based on the order that dependencies are installed. This nondeterministic nature can cause ""works on my machine"" problems. By breaking the installation steps into resolution, fetching and linking, Yarn avoids these issues using deterministic algorithms and lockfiles and thus guarantees repeatable installations. We've also seen significantly faster builds in our continuous integration (CI) environment because of Yarn caching all the packages it downloads.</p>"
"2018-05",Lightweight Architecture Decision Records,Techniques,Adopt,"<p>Much documentation can be replaced with highly readable code and tests. In a world of <a href=""/radar/techniques/evolutionary-architecture"">evolutionary architecture</a>, however, it's important to record certain design decisions for the benefit of future team members as well as for external oversight. <strong>Lightweight Architecture Decision Records</strong> is a <a href=""http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"">technique</a> for capturing important architectural decisions along with their context and consequences. We recommend <a href=""http://github.com/npryce/adr-tools"">storing these details in source control</a>, instead of a wiki or website, as then they can provide a record that remains in sync with the code itself. For most projects, we see no reason why you wouldn't want to use this technique.</p>"
"2018-05",Applying product management to internal platforms,Techniques,Trial,"<p>We've seen a steep increase in interest in the topic of digital platforms over the past 12 months. Companies looking to roll out new digital solutions quickly and efficiently are building internal platforms, which offer teams self-service access to the business APIs, tools, knowledge and support necessary to build and operate their own solutions. We find that these platforms are most effective when they're given the same respect as an external product offering. <strong>Applying product management to internal platforms</strong> means establishing empathy with internal consumers (read: developers) and collaborating with them on the design. Platform product managers establish roadmaps and ensure the platform delivers value to the business and enhances the developer experience. Some owners even create a brand identity for the internal platform and use that to market the benefits to their colleagues. Platform product managers look after the quality of the platform, gather usage metrics, and continuously improve it over time. Treating the platform as a product helps to create a thriving ecosystem and avoids the pitfall of building yet another stagnant, underutilized service-oriented architecture.</p>"
"2018-05",Architectural fitness function,Techniques,Trial,"<p>Borrowed from evolutionary computing, a fitness function is used to summarize how close a given design solution is to achieving the set aims. When defining an evolutionary algorithm, the designer seeks a ‘better’ algorithm; the fitness function defines what ‘better’ means in this context. An <strong>architectural fitness function</strong> , as defined in <a href=""http://www.thoughtworks.com/books/building-evolutionary-architectures"">Building Evolutionary Architectures</a>, provides an objective integrity assessment of some architectural characteristics, which may encompass existing verification criteria, such as unit testing, metrics, monitors, and so on. We believe architects can communicate, validate and preserve architectural characteristics in an automated, continual manner, which is the key to building evolutionary architectures.</p>"
"2018-05",Autonomous bubble pattern,Techniques,Trial,"<p>Many organizations we work with are trying hard to use modern engineering approaches to build new capabilities and features, while also having to coexist with a long tail of legacy systems. An old strategy that, based on our experience, has turned out to be increasingly helpful in these scenarios is <a href=""http://dddcommunity.org/strategic-design/"">Eric Evans's</a> <strong>Autonomous bubble pattern</strong>. This approach involves creating a fresh context for new application development that is shielded from the entanglements of the legacy world. This is a step beyond just using an <a href=""http://wiki.c2.com/?AnticorruptionLayer"">anticorruption layer</a>. It gives the new bubble context full control over its backing data, which is then asynchronously kept up-to-date with the legacy systems. It requires some work to protect the boundaries of the bubble and keep both worlds consistent, but the resulting autonomy and reduction in development friction is a first bold step toward a modernized future architecture.</p>"
"2018-05",Chaos Engineering,Techniques,Trial,"<p>In previous editions of the Radar, we've talked about using <a href=""/radar/tools/chaos-monkey"">Chaos Monkey</a> from Netflix to test how a running system is able to cope with outages in production by randomly disabling instances and measuring the results. <strong>Chaos Engineering</strong> is the nascent term for the wider application of this technique. By running experiments on distributed systems in production, we're able to build confidence that those systems work as expected under turbulent conditions. A good place to start understanding this technique is the <a href=""http://principlesofchaos.org/"">Principles of Chaos Engineering</a> website.</p>"
"2018-05",Domain-scoped events,Techniques,Trial,"<p>It’s important to remember that encapsulation applies to events and event-driven architectures just as it applies to other areas of software. In particular, think about the scope of an event and whether we expect it to be consumed within the same application, the same domain or across an entire organization. A <strong>domain-scoped event</strong> will be consumed within the same domain as it’s published, as such we expect the consumer to have access to a certain context, resources or references in order to act on the event. If the consumption is happening more widely within an organization, the contents of the event might well need to be different, and we need to take care not to ""leak"" implementation details that other domains then come to depend upon.</p>"
"2018-05",Hosted identity management as a service,Techniques,Trial,"<p>Identity management is a critical platform component. External users on mobile apps need to be authenticated, developers need to be given access to delivery infrastructure components, and microservices may need to identify themselves to other microservices. You should ask yourself whether identity management should be “self-hosted”. In our experience, a <strong>hosted identity management as a service</strong> (SaaS) solution is preferable. We believe that top-tier hosted providers such as <a href=""/radar/platforms/auth0"">Auth0</a> and <a href=""http://www.okta.com/"">Okta</a> can provide better uptime and security SLAs. That said, sometimes self-hosting the solution is a realistic decision, especially for enterprises that have the operational discipline and resources to do so safely. Large enterprise identity solutions typically offer a much more expansive range of capabilities such as centralized entitlements, governance reporting and separation of duties management among others. However, these concerns are typically more relevant for employee identities, especially in regulated enterprises with legacy systems.</p>"
"2018-05",Micro frontends,Techniques,Trial,"<p>We've seen significant benefits from introducing <a href=""/radar/techniques/microservices"">microservices</a> architectures, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create front-end monoliths — a single, large and sprawling browser application — on top of their back-end services. Our preferred (and proven) approach is to split the browser-based code into <strong>micro frontends</strong>. In this approach, the web application is broken down into its features, and each feature is owned, frontend to backend, by a different team. This ensures that every feature is developed, tested and deployed independently from other features. Multiple techniques exist to recombine the features — sometimes as pages, sometimes as components — into a cohesive user experience.</p>"
"2018-05",Pipelines for infrastructure as code,Techniques,Trial,"<p>The use of continuous delivery pipelines to orchestrate the release process for software has become a mainstream concept. However, automatically testing changes to infrastructure code isn’t as widely understood. Continuous integration (CI) and continuous delivery (CD) tools can be used to test server configuration (e.g., Chef cookbooks, Puppet modules, Ansible playbooks), server image building (e.g., Packer), environment provisioning (e.g., Terraform, CloudFormation) and integration of environments. The use of <strong>pipelines for infrastructure as code</strong> enables errors to be found before changes are applied to operational environments — including environments used for development and testing. They also offer a way to ensure that infrastructure tooling is run consistently, from CI/CD agents, as opposed to being run from individual workstations. Some challenges remain, however, such as the longer feedback loops associated with standing up containers and virtual machines. Still, we've found this to be a valuable technique.</p>"
"2018-05",Polycloud,Techniques,Trial,"<p>Organizations are becoming more comfortable with the <strong>Polycloud</strong> strategy — rather than going ""all-in"" with one provider, they are passing different types of workloads to different providers based on their own strategy. Some of them apply the best-of-breed approach, for example: putting standard services on AWS, but using Google for machine learning and data-oriented applications and Azure for Microsoft Windows applications. For some organizations this is a cultural and business decision. Retail businesses, for example, often refuse to store their data on Amazon and they distribute load to different providers based on their data. This is different to a cloud-agnostic strategy of aiming for portability across providers, which is costly and forces lowest-common-denominator thinking. Polycloud instead focuses on using the best match that each cloud provider offers.</p>"
"2018-05",BeyondCorp,Techniques,Assess,"<p>Previously in the Radar, we’ve discussed the rise of the <a href=""/radar/techniques/perimeterless-enterprise"">perimeterless enterprise</a>. Now, some organizations are doing away with implicitly trusted intranets altogether and treating all communication as if it was being transmitted through the public internet. A set of practices, collectively labeled <a href=""http://cloud.google.com/beyondcorp/""><strong>BeyondCorp</strong></a>, have been described by Google engineers in a set of publications. Collectively, these practices — including managed devices, 802.1x networking and standard access proxies protecting individual services — make this a viable approach to network security in large enterprises.</p>"
"2018-05",Embedded mobile mocks,Techniques,Assess,"<p>When developing mobile applications, our teams often find themselves without an external server for testing apps. Setting up an over-the-wire mock may be a good fit for this particular problem. Developing the HTTP mocks and compiling them into the mobile binary for testing — <strong>embedded mobile mocks</strong> — enables teams to test their mobile apps when disconnected and with no external dependencies. This technique may require creating an opinionated library based on both the networking library used by the mobile app and your usage of the underlying library.</p>"
"2018-05",Ethereum for decentralized applications,Techniques,Assess,"<p>Blockchains have been widely hyped as the panacea for all things fintech, from banking to digital currency to supply chain transparency. We’ve previously featured <a href=""/radar/platforms/ethereum"">Ethereum</a> because of its feature set, which includes smart contracts. Now, we're seeing more development using <strong>Ethereum for decentralized applications</strong> in <a href=""http://www.stateofthedapps.com/"">other areas</a>. Although this is still a very young technology, we're encouraged to see it being used to build decentralized applications beyond cryptocurrency and banking.</p>"
"2018-05",Event streaming as the source of truth,Techniques,Assess,"<p>As event streaming platforms, such as <a href=""/radar/tools/apache-kafka"">Apache Kafka</a>, rise in popularity, many consider them as an advanced form of message queuing, used solely to transmit events. Even when used in this way, event streaming has its benefits over traditional message queuing. However, we're more interested in how people use <strong>event streaming as the source of truth</strong> with platforms (Kafka in particular) as the primary store for data as immutable events. A service with an <a href=""http://martinfowler.com/eaaDev/EventSourcing.html"">Event Sourcing</a> design, for example, can use Kafka as its event store; those events are then available for other services to consume. This technique has the potential to reduce duplicating efforts between local persistence and integration.</p>"
"2018-05",GraphQL for server side resource aggregation,Techniques,Assess,"<p>One pattern that comes up again and again when building microservice-style architectures is how to handle the aggregation of many resources server-side. In recent years, we've seen the emergence of a number of patterns such as <a href=""/radar/techniques/bff-backend-for-frontends"">Backend for Frontend (BFF)</a> and tools such as <a href=""http://netflix.github.io/falcor/"">Falcor</a> to address this. Our teams have started using <strong>GraphQL for server-side resource aggregation</strong> instead. This differs from the usual mode of using <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> where clients directly query a GraphQL server. When using this technique, the services continue to expose RESTful APIs but under-the-hood aggregate services use GraphQL resolvers as the implementation for stitching resources from other services. This technique simplifies the internal implementation of aggregate services or BFFs by using GraphQL.</p>"
"2018-05",Enzyme,languages-and-frameworks,Adopt,"<p><a href=""http://airbnb.io/enzyme/""><strong>Enzyme</strong></a> has become the defacto standard for unit testing <a href=""/radar/languages-and-frameworks/react-js"">React</a> UI components. Unlike many other snapshot-based testing utilities, Enzyme enables you to test without doing on-device rendering, which results in faster and more granular testing. This is a contributing factor in our ability to massively reduce the amount of functional testing we find we have to do in React applications. In many of our projects it’s used within a unit testing framework such as <a href=""/radar/languages-and-frameworks/jest"">Jest</a>.</p>"
"2018-05",Infrastructure configuration scanner,Techniques,Assess,"<p>For some time now we've recommended increased delivery team ownership of their entire stack, including infrastructure. This means increased responsibility in the delivery team itself for configuring infrastructure in a safe, secure, and compliant way. When adopting cloud strategies, most organizations default to a tightly locked-down and centrally managed configuration to reduce risk, but this also creates substantial productivity bottlenecks. An alternative approach is to allow teams to manage their own configuration, and use an <strong>Infrastructure configuration scanner</strong> to ensure the configuration is set in a safe and secure way. <a href=""http://github.com/iagcl/watchmen"">Watchmen</a> is an interesting tool, built to provide rule-driven assurance of AWS account configurations that are owned and operated independently by delivery teams. <a href=""/radar/tools/scout2"">Scout2</a> is another example of configuration scanning to support secure compliance.</p>"
"2018-05",Jupyter for automated testing,Techniques,Assess,"<p>We're seeing some interesting reports of using <strong>Jupyter for automated testing</strong>. The ability to mix code, comments and output in the same document reminds us of FIT, <a href=""http://fitnesse.org/"">FitNesse</a> and <a href=""http://concordion.org/"">Concordion</a>. This flexible approach is particularly useful if your tests are data heavy or rely on some statistical analysis such as performance testing. Python provides all the power you need, but as tests grow in complexity, a way to manage suites of notebooks would be helpful.</p>"
"2018-05",Log level per request,Techniques,Assess,"<p>One problem with observability in a highly distributed microservices architecture is the choice between logging everything — and taking up huge amounts of storage space — or randomly sampling logs and potentially missing important events. Recently, we’ve noticed a technique that offers a compromise between these two solutions. Set the <strong>log level per request</strong> via a parameter passed in through the tracing header. Using a tracing framework, possibly based on the <a href=""/radar/platforms/opentracing"">OpenTracing</a> standard, you can pass a correlation id from service to service in a single transaction. You can even inject other data, such as the desired log level, at the initiating transaction and pass it along with the tracing information. This ensures that the additional data collected corresponds to a single user transaction as it flows through the system. This is also a useful technique for debugging, since services might be paused or otherwise modified on a transaction-by-transaction basis.</p>"
"2018-05",Security Chaos Engineering,Techniques,Assess,"<p>We’ve previously talked about the technique of <a href=""/radar/techniques/chaos-engineering"">Chaos Engineering</a> in the Radar and the Simian Army suite of tools from Netflix that we’ve used to run experiments to test the resilience of production infrastructure. <strong>Security Chaos Engineering</strong> broadens the scope of this technique to the realm of security. We deliberately introduce false positives into production networks and other infrastructure — build-time dependencies, for example — to check whether procedures in place are capable of identifying security failures under controlled conditions. Although useful, this technique should be used with care to avoid desensitizing teams to security problems.</p>"
"2018-05",Service mesh,Techniques,Assess,"<p>As large organizations transition to more autonomous teams owning and operating their own microservices, how can they ensure the necessary consistency and compatibility between those services without relying on a centralized hosting infrastructure? To work together efficiently, even autonomous microservices need to align with some organizational standards. A <strong>service mesh</strong> offers consistent discovery, security, tracing, monitoring and failure handling without the need for a shared asset such as an API gateway or ESB. A typical implementation involves lightweight reverse-proxy processes deployed alongside each service process, perhaps in a separate container. These proxies communicate with service registries, identity providers, log aggregators, and so on. Service interoperability and observability are gained through a shared implementation of this proxy but not a shared runtime instance. We've advocated for a decentralized approach to microservice management for some time and are happy to see this consistent pattern emerge. Open source projects such as <a href=""http://linkerd.io/"">linkerd</a> and <a href=""http://istio.io/"">Istio</a> will continue to mature and make service meshes even easier to implement.</p>"
"2018-05",Sidecars for endpoint security,Techniques,Assess,"<p>Microservices architecture, with a large number of services exposing their assets and capabilities through APIs and an increased attack surface, demand a zero trust security architecture — ‘never trust, always verify’. However, enforcing security controls for communication between services is often neglected, due to increased service code complexity and lack of libraries and language support in a polyglot environment. To get around this complexity, some teams delegate security to an out-of-process sidecar — a process or a container that is deployed and scheduled with each service sharing the same execution context, host and identity. Sidecars implement security capabilities, such as transparent encryption of the communication and TLS (Transport Layer Security) termination, as well as authentication and authorization of the calling service or the end user. We recommend you look into using <a href=""http://istio.io/"">Istio</a>, <a href=""http://linkerd.io/"">linkerd</a> or <a href=""http://github.com/envoyproxy/envoy"">Envoy</a> before implementing your own <strong>sidecars for endpoint security</strong>.</p>"
"2018-05",The three Rs of security,Techniques,Assess,"<p>Traditional approaches to enterprise security often emphasize locking things down and slowing the pace of change. However, we know that the more time an attacker has to compromise a system, the greater the potential damage. <a href=""http://builttoadapt.io/the-three-r-s-of-enterprise-security-rotate-repave-and-repair-f64f6d6ba29d"">The three Rs of enterprise security</a> — rotate, repair and repave — take advantage of infrastructure automation and continuous delivery to eliminate opportunities for attack. Rotating credentials, applying patches as soon as they're available and rebuilding systems from a known, secure state — all within a matter of minutes or hours — makes it harder for attackers to succeed. <strong>The three Rs of security</strong> technique is made feasible with the advent of modern cloud-native architectures. When applications are deployed as containers, and built and tested via a completely automated pipeline, a security patch is just another small release that can be sent through the pipeline with one click. Of course, in keeping with best distributed systems practices, developers need to design their applications to be resilient to unexpected server outages. This is similar to the impact of implementing <a href=""/radar/tools/chaos-monkey"">Chaos Monkey</a> within your environment.</p>"
"2018-05",Generic cloud usage,Techniques,Hold,"<p>The major cloud providers continue to add new features to their clouds at a rapid pace, and under the banner of <a href=""/radar/techniques/polycloud"">Polycloud</a> we've suggested using multiple clouds in parallel, to mix and match services based on the strengths of each provider’s offerings. Increasingly, we're seeing organizations prepare to use multiple clouds — not to benefit from individual provider’s strengths, though, but to avoid vendor ""lock-in"" at all costs. This, of course, leads to <strong>generic cloud usage</strong> , only using features that are present across all providers, which reminds us of the lowest common denominator scenario we saw 10 years ago when companies avoided many advanced features in relational databases in an effort to remain vendor neutral. The problem of lock-in is real. However, instead of treating it with a sledgehammer approach, we recommend looking at this problem from the perspective of exit costs and relate those to the benefits of using cloud-specific features.</p>"
"2018-05",Recreating ESB antipatterns with Kafka,Techniques,Hold,"<p>Kafka is becoming very popular as a messaging solution, and along with it, <a href=""/radar/platforms/kafka-streams"">Kafka Streams</a> is at the forefront of the wave of interest in streaming architectures. Unfortunately, as they start to embed Kafka at the heart of their data and application platforms, we're seeing some organizations <strong>recreating ESB antipatterns with Kafka</strong> by centralizing the Kafka ecosystem components — such as connectors and stream processors — instead of allowing these components to live with product or service teams. This reminds us of seriously problematic ESB antipatterns, where more and more logic, orchestration and transformation were thrust into a centrally managed ESB, creating a significant dependency on a centralized team. We're calling this out to dissuade further implementations of this flawed pattern.</p>"
"2018-05",.NET Core,Platforms,Adopt,"<p>Our teams have confirmed that <a href=""http://www.microsoft.com/net/core""><strong>.NET Core</strong></a> has reached a level of maturity that makes it the default for .NET server applications. The open source .NET Core framework enables the development and deployment of .NET applications on Windows, macOS and Linux with first-class cross-platform tooling. Microsoft provides blessed Docker images which make it easy to deploy .NET Core applications in a containerized environment. Positive directions in the community and feedback from our projects indicate that .NET Core is the future for .NET development.</p>"
"2018-05",Kubernetes,Platforms,Adopt,"<p>Since we last mentioned <strong>Kubernetes</strong> in the Radar, it has become the default solution for most of our clients when deploying containers into a cluster of machines. The alternatives didn’t capture as much mindshare, and in some cases our clients are even changing their ‘engine’ to Kubernetes. Kubernetes has become the container orchestration platform of choice for major public cloud platforms, including Microsoft's Azure Container Service and Google Cloud (see the <a href=""/radar/platforms/gke"">GKE</a> blip). And there are many useful products enriching the fast-growing Kubernetes ecosystem. Platforms that try to hide Kubernetes under an abstraction layer, however, have yet to prove themselves.</p>"
"2018-05",Azure,Platforms,Trial,"<p>Microsoft has steadily improved <a href=""http://azure.microsoft.com""><strong>Azure</strong></a> and today not much separates the core cloud experience provided by the major cloud providers – Amazon, Google and Microsoft. The cloud providers seem to agree and seek to differentiate themselves in other areas such as features, services and cost structure. Microsoft is the provider who shows real interest in the legal requirements of European companies. They’ve a nuanced and plausible strategy, including unique offerings such as <a href=""http://azure.microsoft.com/en-us/global-infrastructure/germany/"">Azure Germany</a> and <a href=""/radar/platforms/azure-stack"">Azure Stack</a>, which gives some certainty to European companies in anticipation of the <a href=""http://www.thoughtworks.com/insights/blog/gdpr-it-s-time-rethink-your-approach-privacy"">GDPR</a> and possible legislative changes in the United States.</p>"
"2018-05",Contentful,Platforms,Trial,"<p>Headless Content Management Systems (CMSes) are becoming a common component of digital platforms. <a href=""http://www.contentful.com/""><strong>Contentful</strong></a> is a modern headless CMS that our teams have successfully integrated into their development workflows. We particularly like its API-first approach and implementing <a href=""http://www.contentful.com/r/knowledgebase/cms-as-code/"">CMS as Code</a>. It supports powerful content modelling primitives as code and content model evolution scripts, which allow treating it as other data store schemas and applying <a href=""http://martinfowler.com/articles/evodb.html"">evolutionary database design</a> practices to CMS development. Other notable features that we’ve liked include inclusion of two CDNs by default to deliver media assets and JSON documents, good support for localization, and the ability — albeit with some effort — to integrate with <a href=""/radar/platforms/auth0"">Auth0</a>.</p>"
"2018-05",EMQ,Platforms,Trial,"<p><a href=""http://emqtt.io""><strong>EMQ</strong></a> is a scalable open source multiplatform MQTT broker. It’s written in <a href=""http://github.com/erlang/otp"">Erlang/OTP</a> for higher performance, handling millions of concurrent connections. It supports multiple protocols including <a href=""http://mqtt.org/"">MQTT</a>, <a href=""http://mqtt.org/2013/12/mqtt-for-sensor-networks-mqtt-sn"">MQTT Sensor Networks</a>, <a href=""http://coap.technology/"">CoAP</a> as well as <a href=""http://tools.ietf.org/html/rfc6455"">WebSockets</a>, making it suitable for both IoT and mobile devices. We’ve started using EMQ in our projects and have enjoyed its ease of installation and use, its ability to route messages to different destinations including <a href=""/radar/tools/apache-kafka"">Kafka</a> and PostgreSQL, as well as its API-driven approach for its monitoring and configuration.</p>"
"2018-05",Flood IO,Platforms,Trial,"<p>Load testing became easier with the maturity of tools such as <a href=""/radar/tools/gatling"">Gatling</a> and <a href=""/radar/tools/locust"">Locust</a>. At the same time, elastic cloud infrastructures make it possible to simulate a large number of client instances. We're delighted to see Flood and other cloud platforms go further by leveraging these technologies. <a href=""http://flood.io/""><strong>Flood IO</strong></a> is an SaaS load-testing service that helps to distribute and execute testing scripts across hundreds of servers in the cloud. Our teams find it simple to migrate performance testing to Flood by reusing existing Gatling scripts.</p>"
"2018-05",Flutter,languages-and-frameworks,Assess,"<p><a href=""http://flutter.io/""><strong>Flutter</strong></a> is a cross-platform framework that enables you to write native mobile apps in <a href=""/radar/languages-and-frameworks/google-dart"">Dart</a>. It benefits from Dart and can be compiled into native code and communicates with the target platform without bridge and context switching — something that can cause performance bottlenecks in frameworks such as <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> or <a href=""/radar/languages-and-frameworks/weex"">Weex</a>. Flutter’s hot-reload feature is impressive and provides superfast visual feedback when editing code. Currently Flutter is still in beta, but we’ll continue keeping an eye on it to see how its ecosystem matures.</p>"
"2018-05",GKE,Platforms,Trial,"<p>While the software development ecosystem is converging on <a href=""/radar/platforms/kubernetes"">Kubernetes</a> as the orchestration platform for containers, running Kubernetes clusters remains operationally complex. Google Kubernetes Engine ( <strong>GKE</strong> ) is a managed Kubernetes solution for deploying containerized applications that alleviates the operational overhead of running and maintaining Kubernetes clusters. Our teams have had a good experience using GKE, with the platform doing the heavy lifting of applying security patches, monitoring and auto-repairing the nodes, and managing multicluster and multiregion networking. In our experience, Google's API-first approach in exposing platform capabilities, as well as using industry standards such as <a href=""/radar/platforms/oauth"">OAuth</a> for service authorisation, improve the developer experience. It's important to consider that GKE is under rapid development with many of its APIs in beta release which, despite the developers' best efforts to abstract consumers from underlying changes, can impact you. We're expecting continuous improvement around maturity of <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a> with <a href=""http://www.terraform.io/docs/providers/google/r/container_cluster.html"">Terraform on GKE</a> and similar tools.</p>"
"2018-05",Google Cloud Platform,Platforms,Trial,"<p>As <a href=""http://cloud.google.com/free/ce1/""><strong>Google Cloud Platform</strong></a> (GCP) has expanded in terms of available geographic regions and maturity of services, customers globally can now seriously consider it for their cloud strategy. In some areas, GCP has reached feature parity with its main competitor, Amazon Web Services, while in other areas it has differentiated itself — notably with accessible machine learning platforms, data engineering tools, and a workable Kubernetes as a service solution (<a href=""/radar/platforms/gke"">GKE</a>). In practice, our teams have nothing but praise for the developer experience working with the GCP tools and APIs.</p>"
"2018-05",Keycloak,Platforms,Trial,"<p>In a <a href=""/radar/techniques/microservices"">microservice</a>, or any other distributed architecture, one of the most common needs is to secure the services or APIs through authentication and authorization features. This is where <a href=""http://www.keycloak.org/""><strong>Keycloak</strong></a> comes in. Keycloak is an open source identity and access management solution that makes it easy to secure applications or microservices with little to no code. It supports single sign-on, social login and standard protocols such as <a href=""http://openid.net/connect/"">OpenID Connect</a>, <a href=""http://oauth.net/2/"">OAuth 2.0</a> and <a href=""http://en.wikipedia.org/wiki/Security_Assertion_Markup_Language"">SAML</a> out of the box. Our teams have been using this tool and plan to keep using it for the foreseeable future. But it requires a little work to set up. Because configuration happens both at initialization and at runtime through APIs, it's necessary to write scripts to ensure deployments are repeatable.</p>"
"2018-05",WeChat,Platforms,Trial,"<p><strong>WeChat</strong> , often seen as a WhatsApp equivalent, is becoming the de facto business platform in China. Many people may not know but WeChat is also one of the most popular online payment platforms. With the app's built-in CMS and membership management, small businesses are now conducting their commerce entirely on WeChat. Through the Service Account feature, large organizations can interface their internal system to their employees. Given that more than 70 percent of Chinese people are using WeChat, it's an important consideration for businesses that want to expand into the China market.</p>"
"2018-05",AWS Fargate,Platforms,Assess,"<p><a href=""http://aws.amazon.com/fargate/""><strong>AWS Fargate</strong></a> is a recent entry into the docker-as-a-service space, currently limited to the US-East-1 region. For teams using <a href=""/radar/platforms/aws-ecs"">AWS Elastic Container Service</a> (ECS), AWS Fargate is a good alternative without having to manage, provision and configure any underlying EC2 instances or clusters. Fargate allows defining (ECS or <a href=""http://aws.amazon.com/eks/"">EKS – ECS for Kubernetes</a>) tasks as a Fargate type, and they will run on the AWS Fargate infrastructure. If you like the focus on business functionality that <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> gives you, Fargate is the closest you can get when applications can't be deployed as single functions.</p>"
"2018-05",Azure Service Fabric,Platforms,Assess,"<p><strong>Azure Service Fabric</strong> is a distributed systems platform built for microservices and containers. It can act as a PaaS with its reliable services, or like a container orchestrator with its ability to manage containers. What distinguishes Service Fabric though are programming models such as <a href=""https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-actors-introduction"">Reliable Actors</a> built on top of reliable services. When it comes to IoT use cases, for example, Reliable Actors offers some compelling advantages — in addition to the reliability and platform benefits of being on Service Fabric, you also get its state management and replication capabilities. In keeping with continued focus on open source software (OSS), Microsoft will be transitioning Service Fabric to an <a href=""https://blogs.msdn.microsoft.com/azureservicefabric/2018/03/14/service-fabric-is-going-open-source/"">open development process on Github</a>. All this makes Azure Service Fabric worth trialling — particularly for organizations who are invested in the .NET framework.</p>"
"2018-05",Azure Stack,Platforms,Assess,"<p>Cloud computing brings significant benefits over self-hosted virtualized solutions but sometimes data simply cannot leave an organization’s premises, usually for latency or regulatory reasons. For European companies, the current political climate also raises more concerns about placing data in the hands of US-based entities. With <a href=""http://azure.microsoft.com/en-us/overview/azure-stack/""><strong>Azure Stack</strong></a>, Microsoft adds an interesting offering as a middle ground between full-featured public clouds and simple on-premises virtualization: a slimmed-down version of the software that runs Microsoft’s Azure Global cloud is combined with a rack of preconfigured commodity hardware from the usual suspects like HP and Lenovo, providing an organization with the core Azure experience on premises. By default, support is split between Microsoft and the hardware vendors (and they promise to cooperate), but system integrators can offer complete Azure Stack solutions, too.</p>"
"2018-05",Atlas and BeeHive,languages-and-frameworks,Assess,"<p>A multi-app strategy is really controversial, particularly at a time when fewer and fewer users are downloading new apps. Instead of introducing a new app and struggling with the download numbers, multiteams have to deliver functionality via a single app that is already widely installed, which creates an architectural challenge. <strong><a href=""http://github.com/alibaba/atlas"">Atlas</a> and <a href=""http://github.com/alibaba/BeeHive"">BeeHive</a></strong> are modularization solutions for Android and iOS apps, respectively. Atlas and BeeHive enable multiteams working on physically isolated modules to reassemble or dynamically load these modules from a facade app. Both are Alibaba open source projects, since Alibaba encountered the same problem of dwindling downloads and single-app architectural challenges.</p>"
"2018-05",Cloud Spanner,Platforms,Assess,"<p><a href=""http://cloud.google.com/spanner/""><strong>Cloud Spanner</strong></a> is a fully managed relational database service offering high availability and strong consistency without compromising latency. Google has been working on a globally distributed database called Spanner for quite some time. It has recently released the service to the outside world as Cloud Spanner. You can scale your database instance from one to thousands of nodes across the globe without worrying about data consistency. By levering <a href=""http://cloud.google.com/spanner/docs/true-time-external-consistency"">TrueTime</a>, a highly available and distributed clock, Cloud Spanner provides strong consistency for reads and snapshots. You can use standard SQL to read data from Cloud Spanner, but for write operations you have to use their RPC API. Although not all services would require a global-scale distributed database, the general availability of Cloud Spanner is a big shift in the way we think about databases. And its design is influencing open source products such as <a href=""http://github.com/cockroachdb/cockroach"">CockroachDB</a>.</p>"
"2018-05",Corda,Platforms,Assess,"<p>After thorough exploration, R3, an important player in the blockchain space, realized that blockchain doesn't fit their purpose well, so they created <strong><a href=""http://www.corda.net"">Corda</a></strong>. Corda is a distributed ledger technology (DLT) platform focused on the financial field. R3 have a very clear value proposition and know that their problem requires a pragmatic technology approach. This matches our own experience; current blockchain solutions may not be the reasonable choice for some business cases, due to mining costs and operational inefficiency. Although the development experience we have on Corda thus far has not been the smoothest, <a href=""http://docs.corda.net/releases/release-V1.0/api-index.html#internal-apis-and-stability-guarantees"">APIs are still unstable after v1.0 release</a>, we expect to see the DLT space mature further.</p>"
"2018-05",Cosmos DB,Platforms,Assess,"<p><a href=""http://docs.microsoft.com/en-us/azure/cosmos-db/introduction""><strong>Cosmos DB</strong></a> is Microsoft's globally distributed, multimodel database service, which became generally available earlier this year. While most modern NoSQL databases offer tunable consistency, Cosmos DB makes it a first-class citizen and offers five different consistency models. It's worth highlighting that it also supports multiple models — key value, document, column family and graph — all of which map to its internal data model, called atom-record-sequence (ARS). One interesting aspect of Cosmos DB is that it offers service level agreements (SLAs) on its latency, throughput, consistency and availability. With its wide range of applicability, it has set a high standard for other cloud vendors to match.</p>"
"2018-05",Godot,Platforms,Assess,"<p>As AR and VR continue to gain traction, we continue to explore tools with which we can create immersive virtual worlds. Our positive experience with <a href=""/radar/platforms/unity-beyond-gaming"">Unity</a>, one of the two major gaming engines, led us to feature it in previous Radars. We still like Unity but are also excited about <a href=""http://godotengine.org/""><strong>Godot</strong></a>, a relatively new entrant to the field. Godot is open source software and although not as fully featured as the big commercial engines, it comes with a more modern software design and less clutter. Offering C# and Python further lowers the barrier to entry for developers outside the gaming industry. Godot version 3, released earlier this year, <a href=""http://godotengine.org/article/update-on-recent-vr-developments"">adds support for VR</a> and support for AR is on the horizon.</p>"
"2018-05",Interledger,Platforms,Assess,"<p>Most people may know the ""Internet of money"" through <a href=""http://bitcoin.org/en/"">Bitcoin</a>. In fact, this idea can be traced to the early stages of the Web. HTTP even reserved a <a href=""http://httpstatusdogs.com/402-payment-required"">status code</a> for digital payment. The challenging part of this idea is to transfer value between different ledgers in different entities. <a href=""http://en.wikipedia.org/wiki/Blockchain"">Blockchain</a> technology promotes this idea through building a distributed shared ledger. The current challenge is how to achieve interoperability between different blockchain ledgers and interoperability with traditional centralized ledgers. <a href=""http://interledger.org/""><strong>Interledger</strong></a> is a protocol to connect different ledgers. This protocol uses connectors and a cryptographic mechanism such as <a href=""http://en.bitcoin.it/wiki/Hashed_Timelock_Contracts"">HTLC</a> to route secure payments across ledgers. It’s not hard to join the payment network through its suites. Interledger was first initiated by Ripple and is now steadily developed by a W3C community group.</p>"
"2018-05",Language Server Protocol,Platforms,Assess,"<p>Much of the power of sophisticated IDEs comes from their ability to parse a program into an abstract syntax tree (AST) and then use that AST for program analysis and manipulation. This supports features such as autocomplete, finding callers and refactoring. Language servers pull this capability into a process that allows any text editor to access an API to work with the AST. Microsoft has led the creation of the <a href=""http://github.com/Microsoft/language-server-protocol""><strong>Language Server Protocol</strong></a> (LSP), harvested from their OmniSharp and TypeScript Server projects.<a href=""http://langserver.org#implementations-client"">Any editor</a> that uses this protocol can work with any language that has an <a href=""http://langserver.org#implementations-server"">LSP-compliant server</a>. This means we can keep using our favorite editors without forgoing the rich text editing modes of many languages — much to the delight of our Emacs addicts.</p>"
"2018-05",LoRaWAN,Platforms,Assess,"<p><strong>LoRaWAN</strong> is a low-power wide-area network, designed for low-power consumption and communication over long distances using low bitrates. It provides for communication between devices and gateways, which can then forward the data to, for example, applications or servers. A typical usage is for a distributed set of sensors, or for Internet of Things (IoT) devices, for which long battery life and long-range communication is a must. LoRaWAN addresses two of the key problems with attempting to use normal Wi-Fi for such applications: range and power consumption. There are several implementations, a notable one being <a href=""http://www.thethingsnetwork.org/"">The Things Network</a>, a free, open source implementation.</p>"
"2018-05",Clara rules,languages-and-frameworks,Assess,"<p>Our first rule of thumb in selecting a rules engine is normally: you don't need a rules engine. We've seen too many people tying themselves to a hard-to-test black-box rules engine for spurious reasons, when custom code would have been a better solution. That said, we've had success using <a href=""http://www.clara-rules.org/""><strong>Clara rules</strong></a> for scenarios where a rules engine does make sense. We like that it uses simple Clojure code to express and evaluate the rules, which means they are amenable to refactoring, testing and source control. Rather than chasing the illusion that business people should directly manipulate the rules, it drives collaboration between the business experts and developers.</p>"
"2018-05",Mongoose OS,Platforms,Assess,"<p>With an accelerated growth of connected embedded devices and wider accessibility of hardware, <a href=""http://mongoose-os.com/""><strong>Mongoose OS</strong></a> fills a noticeable gap for embedded software developers: the gap between Arduino firmware suitable for prototyping and bare-metal microcontrollers' native SDKs. Mongoose OS is a microcontroller operating system that comes with a set of libraries and a development framework to support typical Internet of Things (IoT) applications with connectivity to generic <a href=""http://mqtt.org/"">MQTT</a> servers and popular IoT cloud platforms such as <a href=""http://cloud.google.com/iot-core"">Google Cloud IoT Core</a> and <a href=""http://aws.amazon.com/iot/"">AWS IoT</a> by default. In fact, Google recommends a <a href=""http://cloud.google.com/solutions/iot/kit/"">Mongoose starter kit</a> for its Cloud IoT Core. We’ve had a seamless experience using Mongoose OS in our embedded projects building connected workspaces. We especially liked its built-in security at the individual device level and OTA firmware updates, among other <a href=""http://mongoose-os.com/features.html"">features</a>. At the time of writing, only a limited number of microcontrollers and boards are supported with more popular ARM-based microcontrollers still under development.</p>"
"2018-05",Netlify,Platforms,Assess,"<p>We like simple tools that solve one problem really well, and <a href=""http://www.netlify.com/""><strong>Netlify</strong></a> fits this description nicely. You can create static website content, check it into GitHub and then quickly and easily get your site live and available. There is a CLI available to control the process; content delivery networks (CDNs) are supported; it can work alongside tools such as <a href=""http://gruntjs.com/"">Grunt</a>; and, most importantly, Netlify supports HTTPS.</p>"
"2018-05",TensorFlow Serving,Platforms,Assess,"<p>Machine-learning models are starting to creep into everyday business applications. When enough training data is available, these algorithms can address problems that might have previously required complex statistical models or heuristics. As we move from experimental use to production, we need a reliable way to host and deploy the models that can be accessed remotely and scale with the number of consumers. <a href=""http://www.tensorflow.org/serving/""><strong>TensorFlow Serving</strong></a> addresses part of that problem by exposing a remote gRPC interface to an exported model; this allows a trained model to be deployed in a variety of ways. TensorFlow Serving also accepts a stream of models to incorporate continuous training updates, and its authors maintain a Dockerfile to ease the deployment process. Presumably, the choice of gRPC is to be consistent with the TensorFlow execution model; however, we’re generally wary of protocols that require code generation and native bindings.</p>"
"2018-05",TICK Stack,Platforms,Assess,"<p><a href=""http://www.influxdata.com/time-series-platform/""><strong>TICK Stack</strong></a> is a platform composed of open source components which makes collection, storage, graphing and alerting on-time series data such as metrics and events easy. The components of the TICK Stack are: Telegraf, a server agent for collecting and reporting metrics; InfluxDB, a high-performance time series database; Chronograf, a user interface for the platform; and Kapacitor, a data-processing engine that can process, stream and batch data from InfluxDB. Unlike <a href=""/radar/tools/prometheus"">Prometheus</a>, which is based on the Pull model, the TICK Stack is based on the Push model of collecting data. The heart of the system is the InfluxDB component which is one of the best time series databases. This stack is backed by InfluxData and needs the enterprise version for features such as DB clustering, but it’s still a fairly good choice for monitoring. We’re using it in a few places in production and have had good experiences with it.</p>"
"2018-05",Web Bluetooth,Platforms,Assess,"<p><a href=""http://github.com/WebBluetoothCG/web-bluetooth""><strong>Web Bluetooth</strong></a> allows us to control any Bluetooth Low Energy device directly from the browser. This allows us to target scenarios that previously could only be solved with a native app. The specification is published by the Web Bluetooth Community Group and describes an API to discover and communicate with devices over the Bluetooth 4 wireless standard. Right now, Chrome is the only major browser which currently supports this specification. With <a href=""http://google.github.io/physical-web/"">Physical Web</a> and Web Bluetooth, we now have other avenues for getting users to interact with devices without them having to install yet another app on their phone. This is an exciting space which is worth keeping an eye on.</p>"
"2018-05",Windows Containers,Platforms,Assess,"<p>Microsoft is catching up in the container space with <a href=""http://docs.microsoft.com/en-us/virtualization/windowscontainers/about/""><strong>Windows Containers</strong></a> enabling running Windows applications as containers on Windows-based environments. At the time of writing, Microsoft provides two Windows OS images as Docker containers — <a href=""http://hub.docker.com/r/microsoft/windowsservercore/"">Windows Server 2016 Server Core</a> and <a href=""http://hub.docker.com/r/microsoft/nanoserver/"">Windows Server 2016 Nano Server</a> — that can run as a <a href=""http://docs.microsoft.com/en-us/virtualization/windowscontainers/about/#windows-container-types"">Windows Server Container</a> with Docker. Our teams have started using Windows containers in scenarios where <a href=""/radar/techniques/docker-for-builds"">build agents</a> and similar containers have been working successfully. Microsoft is aware that there’s room for improvements such as decreasing the large image sizes and enriching ecosystem support and documentation.</p>"
"2018-05",Overambitious API gateways,Platforms,Hold,"<p>We remain concerned about business logic and process orchestration implemented in middleware, especially where it requires expert skills and tooling while creating single points of scaling and control. Vendors in the highly competitive API gateway market are continuing this trend by adding features through which they attempt to differentiate their products. This results in <strong>overambitious API gateway</strong> products whose functionality — on top of what is essentially a reverse proxy — encourages designs that continue to be difficult to test and deploy. API gateways do provide utility in dealing with some specific concerns — such as authentication and rate limiting — but any domain smarts should live in applications or services.</p>"
"2018-05",AssertJ,languages-and-frameworks,Adopt,"<p><a href=""http://joel-costigliola.github.io/assertj/index.html""><strong>AssertJ</strong></a> is a Java library that provides a <a href=""http://martinfowler.com/bliki/FluentInterface.html"">fluent interface</a> for assertions, which makes it easy to convey intent within test code. AssertJ gives readable error messages, soft assertions and improved collections and exception support. Many of our teams choose AssertJ as their default assertion library instead of JUnit combined with <a href=""http://hamcrest.org/JavaHamcrest/"">Java Hamcrest</a>.</p>"
"2018-05",Kotlin,languages-and-frameworks,Adopt,"<p><strong>Kotlin</strong> has experienced an <a href=""http://sogrady-media.redmonk.com/sogrady/files/2018/03/lang.rank_.118.png"">accelerated rate of adoption</a> and rapid growth of tooling support. Some of the reasons behind its popularity are its concise syntax, null safety, ease of transition from Java and interoperability with other JVM-based languages in general, and that it doubles as a great introductory language to functional programming. With JetBrains adding the ability to compile Kotlin to <a href=""http://kotlinlang.org/docs/reference/native-overview.html"">native binaries</a> on multiple platforms, as well as <a href=""http://kotlinlang.org/docs/reference/js-overview.html"">transpile to JavaScript</a>, we believe it has the potential of much wider use by the larger community of mobile and native application developers. Although at the time of writing, some of the tooling such as static and coverage code analysis have yet to mature, given our experience of using Kotlin in many production applications, we believe Kotlin is ready for general adoption.</p>"
"2018-05",Apollo,languages-and-frameworks,Trial,"<p>Since it was first introduced in the Radar, we’ve seen a steady adoption of <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a>, particularly as a remote interface for a <a href=""/radar/techniques/bff-backend-for-frontends"">Backend for Frontend (BFF)</a>. As they gain more experience, our teams have reached consensus on Apollo, a GraphQL client, as the preferred way to access GraphQL data from a <a href=""/radar/languages-and-frameworks/react-js"">React</a> application. Although the <a href=""http://www.apollographql.com/client""><strong>Apollo</strong></a> project also provides a server framework and a GraphQL gateway, the Apollo client simplifies the problem of binding UI components to data served by any GraphQL backend. Notably, Apollo is used by Amazon AWS in their recent launch of the new <a href=""http://aws.amazon.com/appsync/"">AWS AppSync service</a>.</p>"
"2018-05",CSS Grid Layout,languages-and-frameworks,Trial,"<p>CSS is the preferred choice for laying out web pages, even when it did not provide much explicit support for creating layouts. Flexbox helped with simpler, one-dimensional layouts, but developers usually reached for libraries and toolkits for more complex layouts. <a href=""http://www.w3.org/TR/css-grid-1""><strong>CSS Grid Layout</strong></a> is a two-dimensional grid-based layout system that provides a mechanism to divide available space for layout into columns and rows using a set of predictable sizing behaviors. Grid does not require any libraries and plays well with Flexbox and other CSS display elements. However, since IE11 is only <a href=""http://caniuse.com/#search=css%20grid%20layout"">partially supported</a>, it ignores users who still depend on a Microsoft browser on Windows 7.</p>"
"2018-05",CSS Modules,languages-and-frameworks,Trial,"<p>Most large CSS codebases require complex naming schemes to help avoid naming conflicts in the global namespace. <a href=""http://github.com/css-modules/css-modules""><strong>CSS Modules</strong></a> address these problems by creating a local scope for all class names in a single CSS file. This file is imported to a JavaScript module, where CSS classes are referenced as strings. Then, in the build pipeline (Webpack, Browserify, etc.), the class names are replaced with generated unique strings. This is a significant change in responsibilities. Previously, a human had to manage the global namespace, to avoid class naming conflicts; now that responsibility rests with the build tooling. A small downside we've encountered with CSS Modules: functional tests are usually out of the local scope and can therefore not reference classes by the name defined in the CSS file. We recommend using IDs or data attributes instead.</p>"
"2018-05",Hyperledger Composer,languages-and-frameworks,Trial,"<p>The <a href=""/radar/platforms/hyperledger"">Hyperledger</a> project has grown into a broader collaboration and now contains a series of subprojects. It supports Blockchain implementations for different purposes; for example, <a href=""http://github.com/hyperledger/burrow"">Burrow</a> is dedicated to build a permissioned <a href=""/radar/platforms/ethereum"">Ethereum</a> and <a href=""http://github.com/hyperledger/indy-node"">Indy</a> is more focused on digital identity. Among these platforms, <a href=""http://github.com/hyperledger/fabric"">Fabric</a> is the most mature one. Most of time when people talk about adopting Hyperledger they are actually thinking about Hyperledger Fabric. However, the programming abstraction of <a href=""http://hyperledger-fabric.readthedocs.io/en/latest/chaincode.html"">chaincode</a> is relatively low level given it manipulates the state of the ledger directly. Moreover, it always takes a lot of time to set up infrastructure before writing the first line of blockchain code. <a href=""http://hyperledger.github.io/composer/latest/""><strong>Hyperledger Composer</strong></a>, which builds on top of Fabric, accelerates the process of turning ideas into software. Composer provides DSLs to model business assets, define access control and build a business network. By using Composer you could quickly validate your idea through a browser without setting up any infrastructure. Just remember that the Composer itself isn't Blockchain — you still need to deploy it on Fabric.</p>"
"2018-05",OpenZeppelin,languages-and-frameworks,Trial,"<p>Security is the cornerstone of the blockchain economy. In the last issue of the Radar, we highlighted the importance of testing and auditing smart contracts dependencies. <a href=""https://openzeppelin.org/""><strong>OpenZeppelin</strong></a> is a framework to help build secure smart contracts in <a href=""/radar/languages-and-frameworks/solidity"">Solidity</a>. The team behind OpenZeppelin summed up a series of <a href=""https://blog.zeppelin.solutions/onward-with-ethereum-smart-contract-security-97a827e47702"">pitfalls and best practices</a> around smart contracts' security and embedded these experiences into the source code. The framework is well reviewed and validated by the open source community. We recommend the use of OpenZeppelin instead of writing your own implementation of the <a href=""https://github.com/ethereum/EIPs/issues/20"">ERC20</a>/<a href=""https://github.com/ethereum/EIPs/issues/721"">ERC721</a> token. OpenZeppelin is also integrated with <a href=""/radar/languages-and-frameworks/truffle"">Truffle</a>.</p>"
"2018-05",Android Architecture Components,languages-and-frameworks,Assess,"<p>Historically, Google's Android documentation examples lacked architecture and structure. This changes with the release of <strong>Android Architecture Components</strong> , a set of opinionated libraries that help developers create Android applications with better architecture. They address longstanding pain points of Android development: handling lifecycles; pagination; SQLite databases; and data persistence over configuration changes. The libraries don't need to be used together — you can pick the ones you need most and integrate them into your existing project.</p>"
"2018-05",TensorFlow Lite,languages-and-frameworks,Assess,"<p><a href=""http://www.tensorflow.org/mobile/tflite/""><strong>TensorFlow Lite</strong></a> is the designated successor of <a href=""/radar/languages-and-frameworks/tensorflow-mobile"">TensorFlow Mobile</a>, which we mentioned in our previous Radar. Like Mobile it is a lightweight solution tuned and optimized for mobile devices (Android and iOS). We expect the standard use case to be the deployment of pretrained models into mobile apps but TensorFlow Lite also supports on-device learning which opens further areas of application.</p>"
"2018-05",Gobot,languages-and-frameworks,Assess,"<p>The ability to compile the <a href=""/radar/languages-and-frameworks/go-language"">Go programming language</a> to bare metal targets has raised interest among developers in using the language for embedded systems. <a href=""http://gobot.io/""><strong>Gobot</strong></a> is a framework for robotics, physical computing, and the Internet of Things, written in the Go programming language and supporting a variety of platforms. We've used the framework for experimental robotic projects where real-time response hasn't been a requirement, and we’ve created open source <a href=""http://github.com/HendrikLouw/robocar"">software drivers</a> with Gobot. Gobot HTTP APIs enable simple hardware integration with mobile devices to create richer applications.</p>"
"2018-05",Hyperapp,languages-and-frameworks,Assess,"<p>Given the number of JavaScript application frameworks we’ve featured in the Radar over the years we asked ourselves, do we really need to call out another one? We decided that <a href=""http://hyperapp.js.org/""><strong>Hyperapp</strong></a> is worth a look because of its minimalist approach. It has a very small footprint, less than 1KB, and yet covers all the essential functionality for writing a web application. This is only possible with an elegant design that reduces everything to the absolute minimum, which in turn makes it easier to understand and use the framework. Despite being relatively new, it has attracted a good-size community and we recommend to at least consider it when picking a framework for a new application.</p>"
"2018-05",PyTorch,languages-and-frameworks,Assess,"<p><a href=""http://pytorch.org/""><strong>PyTorch</strong></a> is a complete rewrite of the <a href=""http://torch.ch/"">Torch</a> machine learning framework from Lua to Python. Although quite new and immature compared to <a href=""/radar/platforms/tensorflow"">Tensorflow</a>, programmers find PyTorch much easier to work with. Because of its object-orientation and native Python implementation, models can be expressed more clearly and succinctly and debugged during execution. Although many of these frameworks have emerged recently, PyTorch has the backing of Facebook and broad range of partner organisations, including NVIDIA, which should ensure continuing support for CUDA architectures. ThoughtWorks teams find PyTorch useful for experimenting and developing models but still rely on TensorFlow’s performance for production-scale training and classification.</p>"
"2018-05",Rasa,languages-and-frameworks,Assess,"<p><strong><a href=""http://rasa.com/"">Rasa</a></strong> is a new entrant in the area of chatbots. Instead of using a simple decision tree it uses neural networks to map intent and internal state to a response. Rasa integrates with natural language processing solutions such as <a href=""/radar/tools/spacy"">spaCy</a>; and, unlike other solutions we've featured in the Radar, Rasa is <a href=""http://github.com/RasaHQ"">open source software</a> and can be self-hosted, which makes it a viable solution when ownership of data is of concern. Our experiences with using Rasa Stack for an internal application have been positive.</p>"
"2018-05",Reactor,languages-and-frameworks,Assess,"<p><a href=""http://projectreactor.io""><strong>Reactor</strong></a> is a library for building non-blocking applications on the JVM — version 8 and above — based on the <a href=""http://www.reactive-streams.org/"">Reactive Streams</a> specification. Reactive programming emphasizes moving from imperative logic to asynchronous, non-blocking and functional style code, especially when dealing with external resources. Reactor implements the reactive stream specification and provides two publisher APIs — Flux (0 to N elements) and Mono (0 or 1 element) — to effectively model push-based stream processing. Reactor project is well suited for microservices architecture and offers back pressure–ready network engines for HTTP, WebSockets, TCP and UDP traffic.</p>"
"2018-05",RIBs,languages-and-frameworks,Assess,"<p><a href=""http://github.com/uber/RIBs""><strong>RIBs</strong></a> — which is short for router, interactor and builder — is a cross-platform architecture mobile framework from Uber. The key idea of RIBs is to decouple business logic from the view tree, and thus ensure the app is driven by business logic. This is actually an application of <a href=""http://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html"">Clean Architecture</a> in mobile application development. By applying consistent architecture patterns across native Android and iOS, RIBs provides clear statement management and good testability. We advise putting business logic in the back-end service rather than leak it into the view, so if you do have a complicated mobile application, RIBs can help manage this complexity.</p>"
"2018-05",Solidity,languages-and-frameworks,Assess,"<p>Programming for smart contracts requires a more expressive language than a <a href=""http://en.bitcoin.it/wiki/Script"">scripting system for transactions</a>. <a href=""http://github.com/ethereum/solidity""><strong>Solidity</strong></a> is the most popular among the new programming languages designed for smart contracts. Solidity is a contract-oriented, statically typed language whose syntax is similar to JavaScript. It provides abstractions for writing self-enforcing business logic in smart contracts. The toolchain around Solidity is growing fast. Nowadays, Solidity is the primary choice on the <a href=""/radar/platforms/ethereum"">Ethereum</a> platform. Given the immutable nature of deployed smart contracts, it should go without saying that rigorous testing and audit of dependencies is vital.</p>"
"2018-05",SwiftNIO,languages-and-frameworks,Assess,"<p>We’re in favor of asynchronous and <a href=""/radar/languages-and-frameworks/reactivex"">reactive styles of programming</a> especially for network I/O-bound distributed systems. Reactive libraries often sit on top of a lower level nonblocking communication framework such as <a href=""http://netty.io/"">Netty</a>. Recently <a href=""http://github.com/apple/swift-nio""><strong>SwiftNIO</strong></a>, an open source nonblocking networking framework from Apple, has grabbed our attention. SwiftNIO is similar to Netty but written in Swift. It’s currently supported on MacOS and Ubuntu and implements HTTP as a higher-level protocol. We’re excited to see the usage of this framework and integration of it into higher-level application frameworks and other protocols.</p>"
"2018-05",Tensorflow Eager Execution,languages-and-frameworks,Assess,"<p>In the last issue we featured <a href=""/radar/languages-and-frameworks/pytorch"">PyTorch</a>, a deep-learning modeling framework that allows an imperative programming style. Now <strong><a href=""http://www.tensorflow.org/programmers_guide/eager"">TensorFlow Eager Execution</a></strong> provides this imperative style in <a href=""/radar/platforms/tensorflow"">TensorFlow</a> by enabling execution of modeling statements outside of the context of a session. This improvement could provide the ease of debugging and finer-grained model control of PyTorch with the widespread popularity and performance of TensorFlow models. The feature is still quite new so we’re anxious to see how it performs and how it’ll be received by the TensorFlow community.</p>"
"2018-05",troposphere,languages-and-frameworks,Assess,"<p>We’re trying out <a href=""http://github.com/cloudtools/troposphere""><strong>troposphere</strong></a> as a way of defining the <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a> on AWS for our projects where <a href=""http://aws.amazon.com/cloudformation/"">AWS</a> <a href=""http://aws.amazon.com/cloudformation/"">CloudFormation</a> is used instead of <a href=""/radar/tools/terraform"">Terraform</a>. troposphere is a Python library that allows us to write Python code to generate CloudFormation JSON descriptions. What we like about troposphere is that it facilitates catching JSON errors early, applying type checking, and unit testing and DRY composition of AWS resources.</p>"
"2018-05",Truffle,languages-and-frameworks,Assess,"<p><a href=""http://truffleframework.com/""><strong>Truffle</strong></a> is a development framework that brings a modern web development experience to the <a href=""/radar/platforms/ethereum"">Ethereum</a> platform. It takes over the job of smart contract compiling, library linking and deployment, as well as dealing with artifacts in different blockchain networks. One of the reasons we love Truffle is that it encourages people to write tests for their smart contracts. You need to take tests really seriously as smart contract programming is often related to money. With its built-in testing framework and integration with <a href=""http://github.com/ethereumjs/testrpc"">TestRPC</a>, Truffle makes it possible to write the contract in a TDD way. We expect to see more technologies similar to Truffle to promote continuous integration in the blockchain area.</p>"
"2018-05",WebAssembly,languages-and-frameworks,Assess,"<p><a href=""http://webassembly.org/""><strong>WebAssembly</strong></a> is a big step forward in the capabilities of the browser as a code execution environment. Supported by all major browsers and backward compatible, it's a binary compilation format designed to run in the browser at near native speeds. It opens up the range of languages you can use to write front-end functionality, with early focus on C, C++ and Rust, and it's also an LLVM compilation target. When run in the sandbox, it can interact with JavaScript and shares the same permissions and security model. When used with <a href=""http://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/"">Firefox’s new streaming compiler</a>, it also results in faster page initialization. Although it's still early days, this W3C standard is definitely one to start exploring.</p>"
"2018-05",Appium Test Distribution,Tools,Trial,"<p>We've featured <a href=""/radar/tools/appium"">Appium</a> in the Radar in the past. It's one of the most popular mobile test automation frameworks. As we scale our test suite, being able to run our tests in parallel against an array of devices is key in having short feedback loops. <a href=""http://github.com/saikrishna321/AppiumTestDistribution""><strong>Appium Test Distribution</strong></a> solves this problem very effectively with its ability to run tests in parallel as well as run the same tests on multiple devices. Among other things, it distinguishes itself by its ability to add and remove devices in which tests run without any manual setup required and with its ability to run tests on remote devices. We've used it in a few projects at ThoughtWorks over the last couple of years and it worked very well for us.</p>"
"2018-05",BackstopJS,Tools,Trial,"<p>We've been enjoying <strong><a href=""http://github.com/garris/BackstopJS"">BackstopJS</a></strong> for visual regression testing of web applications. The configurable viewports and ability to adjust tolerances are particularly useful, as is the visual comparison tool, which makes it easier to spot minor variations. It has good scriptability and the option to run in <a href=""/radar/tools/headless-chrome-for-front-end-test"">Headless Chrome</a>, PhantomJS and SlimerJS. We find it particularly helpful when running it against <a href=""/radar/techniques/living-css-style-guides"">living component style guides</a>.</p>"
"2018-05",Buildkite,Tools,Trial,"<p>Our teams very much like the hosted CI/CD tool <a href=""http://buildkite.com/""><strong>Buildkite</strong></a> for its simplicity and quick setup. With Buildkite, you provide your own machines to execute builds — on premise or in the cloud — and install a lightweight agent application to connect the build agent to the hosted service. In many cases, having this level of control over the configuration of your build agents is a plus when compared to using hosted agents.</p>"
"2018-05",CircleCI,Tools,Trial,"<p><a href=""http://circleci.com/""><strong>CircleCI</strong></a> is a continuous integration engine offered as SaaS and on premise. CircleCI has been the go-to SaaS CI tool for many of our development teams, who needed a low-friction and easy-to-setup build and deployment pipeline. CircleCI version 2.0 supports workflows of build jobs, with fan-in and fan-out flows and manual gates, as well as mobile development. It allows developers to run the pipelines locally and easily integrates with Slack and other notification and alerting systems. We recommend you take a closer look at the <a href=""http://circleci.com/security/"">security practices of CircleCI</a>, just as you would with any other SaaS product that hosts your company’s assets.</p>"
"2018-05",CVXPY,Tools,Trial,"<p>It’s surprising how many problems can be expressed as <a href=""http://en.wikipedia.org/wiki/Mathematical_optimization"">mathematical optimization problems</a> and often <a href=""http://en.wikipedia.org/wiki/Convex_optimization"">convex problems</a> that can be efficiently solved. <a href=""http://www.cvxpy.org""><strong>CVXPY</strong></a> is an open source Python-embedded modeling language for convex optimization problems. It’s maintained by academics at Stanford University and offers a batteries-included install for several open source and commercial solvers. The documentation includes many examples which should inspire developers to use it. It’s particularly useful for prototyping solutions even though commercially licensed solvers, such <a href=""http://www.gurobi.com/"">Gurobi</a> or <a href=""http://www.ibm.com/analytics/data-science/prescriptive-analytics/cplex-optimizer"">IBM CPLEX</a>, may be required. In most cases though, it suffices by itself. However, the same group has written many extension packages such as <a href=""http://stanford.edu/%7Eboyd/papers/dccp.html"">DCCP</a> and related software such as <a href=""http://cvxopt.org/"">CVXOPT</a> based on recent advances in optimization.</p>"
"2018-05",gopass,Tools,Trial,"<p><a href=""http://www.justwatch.com/gopass/""><strong>gopass</strong></a> is a password management solution for teams, built on GPG and <a href=""/radar/tools/git"">Git</a>. It's a descendant of <a href=""http://www.passwordstore.org"">pass</a> and adds features such as: support for recipient management and multiple password stores in a single tree; an interactive search functionality; time-based one-time password (TOTP) support; and storage of binary data. Migration of your pass store is fairly straightforward, because gopass is largely compatible with the format pass uses. This also means integration into provisioning workflows can be achieved with a single call to a stored secret.</p>"
"2018-05",Headless Chrome for front-end test,Tools,Trial,"<p>Since mid-2017, Chrome users have had the option of running the browser in headless mode. This feature is ideally suited to running front-end browser tests without the overhead of displaying actions on a screen. Previously, this was largely the province of PhantomJS but <a href=""http://developers.google.com/web/updates/2017/06/headless-karma-mocha-chai"">Headless Chrome</a> is rapidly replacing the JavaScript-driven WebKit approach. Tests in Headless Chrome should run much faster, and behave more like a real browser, but our teams have found that it does use more memory than PhantomJS. With all these advantages, <strong>Headless Chrome for front-end test</strong> is likely to become the de facto standard.</p>"
"2018-05",Helm,Tools,Trial,"<p><a href=""http://helm.sh""><strong>Helm</strong></a> is a package manager for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. The set of Kubernetes resources that together define an application is packaged as charts. These charts can describe a single resource, such as a Redis pod, or a full stack of a web application: HTTP servers, databases and caches. Helm, by default, comes with a repository of curated Kubernetes applications that are maintained in the official <a href=""http://github.com/kubernetes/charts"">charts repository</a>. It’s also easy to set up a private chart repository for internal usage. Helm has two components: a command line utility called Helm and a cluster component called Tiller. Securing a Kubernetes cluster is a wide and nuanced topic, but we highly recommend setting up Tiller in a role-based access control (RBAC) environment. We’ve used Helm in a number of client projects and it’s dependency management, templating and hook mechanism has greatly simplified the application lifecycle management in Kubernetes.</p>"
"2018-05",Jupyter,Tools,Trial,"<p>Over the last couple of years, we've noticed a steady rise in the popularity of analytics notebooks. These are Mathematica-inspired applications that combine text, visualization and code in a living, computational document. Increased interest in machine learning — along with the emergence of Python as the programming language of choice for practitioners in this field — has focused particular attention on Python notebooks, of which <a href=""http://jupyter.org/""><strong>Jupyter</strong></a> seems to be gaining the most traction among ThoughtWorks teams. People seem to keep finding creative uses for Jupyter beyond a simple analytics tool. For example, see <a href=""/radar/techniques/jupyter-for-automated-testing"">Jupyter for automated testing</a>.</p>"
"2018-05",Kong API Gateway,Tools,Trial,"<p><a href=""http://getkong.org/"">Kong</a> is an <a href=""http://github.com/Kong/kong"">open source API gateway</a> which also comes as an <a href=""http://konghq.com/kong-enterprise-edition/"">enterprise product</a> integrating with proprietary API analytics and a developer portal. Kong can be deployed, in a variety of configurations, as an edge API gateway, as an internal API proxy, or even as a sidecar in a <a href=""/radar/techniques/service-mesh"">service mesh</a> configuration. <a href=""http://openresty.org/en/"">OpenResty</a>, through its Nginx modules, provides a strong and performant foundation, with Lua plugins for extensions. Kong can either use PostgreSQL for single-region deployments or Cassandra for multiregion configurations. Our developers have enjoyed Kong's high performance, its API-first approach (which enables automation of its configuration) and its ease of deployment as a container. <strong>Kong API Gateway</strong> , unlike <a href=""/radar/platforms/overambitious-api-gateways"">overambitious API gateways</a>, has a smaller set of features but it implements the essential set of API gateway capabilities such as traffic control, security, logging, monitoring and authentication.</p>"
"2018-05",kops,Tools,Trial,"<p><a href=""http://github.com/kubernetes/kops""><strong>kops</strong></a> is a command line tool for creating and managing high-availability production <a href=""/radar/platforms/kubernetes"">Kubernetes</a> clusters. kops has become our go-to tool to self-manage Kubernetes clusters on <a href=""/radar/platforms/aws"">AWS</a>, not the least because of its rapidly growing open source community. It also supports installing, upgrading and managing Kubernetes clusters on <a href=""/radar/platforms/google-cloud-platform"">Google Cloud</a>. Our experience with kops on Google, however, is very limited because of our preference for <a href=""/radar/platforms/gke"">GKE</a>, the managed Kubernetes offering. We recommend using kops in reusable scripts to create <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a>. We're interested to see how kops continues to evolve to support managed Kubernetes clusters such as <a href=""http://aws.amazon.com/eks/"">EKS</a>, Amazon's own managed Kubernetes service.</p>"
"2018-05",Patroni,Tools,Trial,"<p><a href=""http://github.com/zalando/patroni""><strong>Patroni</strong></a> is a template for <a href=""http://www.postgresql.org/docs/9.5/static/high-availability.html"">PostgreSQL high availability</a>. Born out of the need to provide automatic failure for PostgreSQL, Patroni is a Python-based PostgreSQL controller that leverages a distributed configuration store (such as <a href=""http://coreos.com/etcd/"">etcd</a>, <a href=""http://zookeeper.apache.org/"">ZooKeeper</a>, or <a href=""/radar/tools/consul"">Consul</a>) to manage the state of the PostgreSQL cluster. Patroni supports both streaming and synchronous replication models and provides a rich set of REST APIs for dynamic configuration of the PostgreSQL cluster. If you want to achieve high availability in a distributed PostgreSQL setup, you have to consider many edge cases, and we like the fact that Patroni provides a template to achieve most of the common use cases.</p>"
"2018-05",WireMock,Tools,Trial,"<p>A key driver for architectures based on <a href=""http://martinfowler.com/microservices/"">microservices</a> is independent evolvability of services. For example, when two services depend on each other, the testing process for one usually involves stubs and mocks for the other one. These can be written by hand, but as with mocking in unit tests, a framework helps developers focus on the actual test scenario. We have known of <a href=""http://wiremock.org/""><strong>WireMock</strong></a> for a while but we’ve preferred running tests with <a href=""/radar/tools/mountebank"">mountebank</a>. Over the past year, though, WireMock has really caught up and we now recommend it as a good alternative.</p>"
"2018-05",Yarn,Tools,Trial,"<p><a href=""http://yarnpkg.com/en/""><strong>Yarn</strong></a> is a fast, reliable and secured package manager for JavaScript. Using a lock file and a deterministic algorithm, Yarn is able to guarantee that an installation that worked on one system will work exactly the same way on any other system. By efficiently queuing up requests, Yarn maximizes network utilization and as a result we’ve seen faster package downloads. Yarn continues to be our tool of choice for JavaScript package management in spite of the latest improvements in npm (version 5).</p>"
"2019-11",jest-when,languages-and-frameworks,Trial,"<p><strong><a href=""https://www.npmjs.com/package/jest-when"">jest-when</a></strong> is a lightweight JavaScript library that complements <a href=""/radar/languages-and-frameworks/jest"">Jest</a> by matching mock function call arguments. Jest is a great tool for testing the stack; jest-when allows you to expect specific arguments for mock functions and thus lets you write more robust unit tests of modules with many dependencies.</p>"
"2018-05",Apex,Tools,Assess,"<p><a href=""http://github.com/apex/apex""><strong>Apex</strong></a> is a tool to build, deploy and manage AWS Lambda functions with ease. With Apex, you can write functions in languages that are not yet natively supported in AWS, including Golang, Rust and others. This is made possible by a Node.js shim, which creates a child process and processes events through stdin and stdout. Apex has a lot of nice <a href=""http://github.com/apex/apex#features"">features</a> that improve the developer experience, and we particularly like the ability to test functions locally and perform a dry run of the changes before they're applied to AWS resources.</p>"
"2018-05",ArchUnit,Tools,Assess,"<p><a href=""http://www.archunit.org/""><strong>ArchUnit</strong></a> is a Java testing library for checking architecture characteristics such as package and class dependencies, annotation verification and even layer consistency. The fact that it runs as unit tests, within your existing test setup, pleases us, even though it's available for Java architectures only. The ArchUnit test suite can be incorporated into a CI environment or a deployment pipeline, making it easier to implement <a href=""/radar/techniques/architectural-fitness-function"">fitness functions</a> in an <a href=""http://evolutionaryarchitecture.com/"">evolutionary architecture</a> way.</p>"
"2018-05",cfn_nag,Tools,Assess,"<p>The cloud and continuous delivery had a dramatic effect on infrastructure security. When following <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a>, the entire infrastructure — which includes networks, firewalls and accounts — is defined in scripts and configuration files, and with <a href=""/radar/tools/immutable-servers"">Phoenix Servers</a> and <a href=""/radar/techniques/phoenix-environments"">Environments</a>, the infrastructure is recreated in each deployment, often many times a day. In such a scenario, testing the infrastructure after it's created is neither sufficient nor feasible. A tool that helps address this problem is <strong><a href=""http://github.com/stelligent/cfn_nag"">cfn_nag</a></strong>. It scans the <a href=""http://aws.amazon.com/cloudformation/"">CloudFormation</a> templates used with <a href=""/radar/platforms/aws"">AWS</a> for patterns that may indicate insecure infrastructure, and it does so before the infrastructure is created. Running a tool such as cfn_nag in a build pipeline is fast and it can detect a number of problems before they even reach a cloud environment.</p>"
"2018-05",Conduit,Tools,Assess,"<p><a href=""http://github.com/runconduit/conduit""><strong>Conduit</strong></a> is a lightweight <a href=""/radar/techniques/service-mesh"">service mesh</a> for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. Conduit embraces the out-of-process architecture with data plane proxy written in Rust and a control plane in <a href=""/radar/languages-and-frameworks/go-language"">Go</a>. The data plane proxy runs as a sidecar for all TCP traffic in the Kubernetes cluster and the control plane runs in a separate namespace in Kubernetes exposing REST APIs to control the behavior of the data plane proxy. By proxying all requests, Conduit provides a wealth of metrics for monitoring and observability of interactions in the service mesh for HTTP, HTTP/2 and gRPC traffic. Even though Conduit is relatively new to this space, we recommend it because it’s simple to install and operate.</p>"
"2018-05",Cypress,Tools,Assess,"<p>Fixing end-to-end test failures in CI can be a painful experience, especially in headless mode. <a href=""http://www.cypress.io/""><strong>Cypress</strong></a> is a useful tool that helps developers build end-to-end tests easily and records all test steps as a video in an MP4 file. Instead of reproducing the issue in headless mode, developers can watch the testing video in order to fix it. Cypress is a powerful platform, not only a testing framework. Currently, we've integrated its CLI with headless CI in our projects.</p>"
"2018-05",Dependabot,Tools,Assess,"<p>Keeping dependencies up to date is a chore, but it's important to manage upgrades frequently and incrementally. We want the process to be as painless and automated as possible. Our teams have often hand-rolled scripts to automate parts of the process; now, however, we integrate commercial offerings to do that work. <a href=""http://dependabot.com/""><strong>Dependabot</strong></a> is a service that integrates with your GitHub repositories and automatically checks your project dependencies for new versions. When required, Dependabot will open a pull request with upgraded dependencies. Using features of your CI server, you can automatically test upgrades for compatibility and automatically merge compatible upgrades to master. There are alternatives to Dependabot, including <a href=""http://renovateapp.com"">Renovate</a> for JavaScript projects and <a href=""http://depfu.com/"">Depfu</a> for JavaScript and Ruby projects. Our teams, however, recommend Dependabot because of its multilanguage support and ease of use.</p>"
"2018-05",Flow,Tools,Assess,"<p><a href=""http://flow.org/""><strong>Flow</strong></a> is a static type checker for JavaScript that allows you to add type checking across the codebase incrementally. Unlike Typescript, which is a different language, Flow can be added incrementally to an existing JavaScript codebase supporting the 5th, 6th and 7th editions of ECMAScript. We suggest adding Flow to your continuous integration pipeline, starting with the code that concerns you most. Flow adds to the clarity of the code, increases the reliability of refactoring and catches type-related bugs early during the build.</p>"
"2018-05",Headless Firefox,Tools,Assess,"<p>When developing front-end applications, we've mentioned <a href=""/radar/tools/headless-chrome-for-front-end-test"">Headless Chrome</a> as a better alternative to PhantomJS for front-end testing in a previous edition of the Radar. Now we suggest assessing <a href=""http://developer.mozilla.org/en-US/Firefox/Headless_mode""><strong>Headless Firefox</strong></a> as a viable option in this area. In the same way as Headless Chrome, Firefox in a headless mode runs the browser without the visible UI components, executing the UI tests suite much faster.</p>"
"2018-05",nsp,Tools,Assess,"<p><a href=""http://www.npmjs.com/package/nsp""><strong>nsp</strong></a> is a command line tool to identify known vulnerabilities in Node.js applications. By running the check command on the root of a Node.js project, nsp generates the vulnerabilities report by checking against the <a href=""http://nodesecurity.io/advisories/"">published advisories</a>. nsp provides a way to customize the check command to hide all vulnerabilities below the given <a href=""http://nvd.nist.gov/vuln-metrics/cvss"">CVSS</a> score or exit with an error code if at least one finding has a CVSS score above the given value. Once the advisories are saved through the gather command, nsp can also be used in offline mode.</p>"
"2018-05",Parcel,Tools,Assess,"<p><a href=""https://en.parceljs.org/""><strong>Parcel</strong></a> is a web application bundler similar to <a href=""/radar/tools/webpack"">Webpack</a> or <a href=""http://browserify.org/"">Browserify</a>. We’ve featured Webpack previously in our Radar and it continues to be a great tool. Parcel distinguishes itself from its rivals through developer experience and speed. It has all the standard bundling features and provides true zero-configuration experience, making it really easy to get started with and use. It has fast bundle times and beats its competitors in many benchmarks. Parcel has gained a lot of community interest and is worth keeping an eye on.</p>"
"2018-05",Scout2,Tools,Assess,"<p><a href=""http://nccgroup.github.io/Scout2/""><strong>Scout2</strong></a> is a security auditing tool for <a href=""/radar/platforms/aws"">AWS</a> environments. Instead of manually navigating through web pages, you can rely on Scout2 to fetch all the configuration data of an AWS environment for you; it even generates an attack surface report. Scout2 ships with preconfigured rules and can be easily extended to support more services and test cases. Since Scout2 only performs AWS API calls to fetch configuration data and identify security gaps, it is not necessary to complete and submit the AWS Vulnerability / Penetration Testing Request Form.</p>"
"2018-05",Sentry,Tools,Assess,"<p><a href=""https://sentry.io/welcome/""><strong>Sentry</strong></a> is an error-tracking tool that helps monitor and fix errors in real time. Error tracking and management tools such as Sentry distinguish themselves from traditional logging solutions such as the <a href=""https://www.elastic.co/elk-stack"">ELK Stack</a> in their focus on discovering, investigating and fixing errors. Sentry has been around for some time and is quite popular — error-tracking tools are increasingly useful with the current focus on ""mean time to recovery"". Sentry — with its integration options with Github, Hipchat, Heroku, Slack, among other platforms — enables us to keep a close eye on our apps. It can provide error notifications following a release, enable us to track whether new commits actually fix the issue and alert us if an issue comes back due to a regression.</p>"
"2018-05",Sonobuoy,Tools,Assess,"<p><a href=""https://github.com/heptio/sonobuoy""><strong>Sonobuoy</strong></a> is a diagnostic tool for running end-to-end conformance tests on any <a href=""/radar/platforms/kubernetes"">Kubernetes</a> cluster in a nondestructive way. The team at <a href=""http://heptio.com/"">Heptio</a>, which was founded by two creators of the Kubernetes projects, built this tool to ensure that the wide array of Kubernetes distributions and configurations conform to the best practices, while following the open source standardization for interoperability of clusters. We're experimenting with Sonobuoy to run as part of our <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a> build pipeline, as well as continuous monitoring of our Kubernetes installations, to validate the behavior and health of the whole cluster.</p>"
"2018-05",Swashbuckle for .NET Core,Tools,Assess,"<p>In the current state of technology services, exposing RESTFul APIs is increasingly adopted and API documentation is very important for consumers. In this space, <a href=""/radar/tools/swagger"">Swagger</a> has been largely used across teams and we would like to highlight <strong><a href=""http://github.com/domaindrivendev/Swashbuckle.AspNetCore"">Swashbuckle for .NET Core</a></strong>. Swashbuckle for .NET Core is a tool that generates living API documentation in Swagger, based on the code for <a href=""/radar/platforms/net-core"">.NET Core</a> projects. When using it, you can also explore and test operations of APIs through its UI.</p>"
"2018-11",Event Storming,Techniques,Adopt,"<p>When organizations move toward <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>, one of the main drivers is the hope for faster time to market. However, this aspiration only tends to be realized when services (and their supporting teams) are cleanly sliced along long-lived business domain boundaries. Otherwise meaningful features will naturally require tight coordination between multiple teams and services, introducing natural friction in competing roadmap prioritization. The solution to this problem is good domain modeling, and <strong>event storming</strong> has rapidly become one of our favorite methods for rapidly identifying the key concepts in a problem space and aligning a variety of stakeholders in the best way to slice potential solutions.</p>"
"2018-11","1% canary",Techniques,Trial,"<p>Fast feedback is one of our <a href=""https://www.thoughtworks.com/insights/blog/what-are-our-core-values-and-practices-building-software"">core values</a> for building software. For many years, we've used the <a href=""https://martinfowler.com/bliki/CanaryRelease.html"">canary release</a> approach to encourage early feedback on new software versions, while reducing the risk through incremental rollout to selected users. One of the questions regarding this technique is how to segment users. Canary releases to a very small segment (say 1%) of users can be a catalyst for change. While starting with a very small segment of users enables teams to get comfortable with the technique, capturing fast user feedback enables diverse teams to observe the impact of new releases and learn and adjust course as necessary—a priceless change in engineering culture. We call this, the mighty <strong>1% canary</strong>.</p>"
"2018-11",Bounded Buy,Techniques,Trial,"<p>Most organizations that don't have the resources to custom-build their software will select out-of-the-box or SaaS solutions to meet their requirements. All too often, however, these solutions tend to aggressively expand their scope to entangle themselves into every part of your business. This blurs integration boundaries and makes change less predictable and slow. To mitigate this risk, we recommend that organizations develop a clear target capability model and then employ a strategy we call <strong>Bounded Buy</strong> —that is, only select vendor products that are modular and decoupled and can be contained within the <a href=""https://martinfowler.com/bliki/BoundedContext.html"">Bounded Context</a> of a single business capability. This modularity and independent deliverability should be included in the acceptance criteria for a <a href=""https://www.slideshare.net/tgriffo/agile-australia-2017-hypothesisdriven-cots-software-selection-tiago-griffo"">vendor selection process</a>.</p>"
"2018-11",Crypto shredding,Techniques,Trial,"<p>Maintaining proper control over sensitive data is difficult, especially when—for backup and recovery purposes—data is copied outside of a master system of record. <strong>Crypto shredding</strong> is the practice of rendering sensitive data unreadable by deliberately overwriting or deleting encryption keys used to secure that data. For example, an entire table of customer personal details could be encrypted using random keys for each record, with a different table storing the keys. If a customer exercised their ""right to be forgotten,"" we can simply delete the appropriate key, effectively ""shredding"" the encrypted data. This technique can be useful where we're confident of maintaining appropriate control of a smaller set of encryption keys but less confident about control over a larger data set.</p>"
"2018-11",Versioning data for reproducible analytics,Techniques,Trial,"<p>When it comes to large-scale data analysis or machine intelligence problems, being able to reproduce different versions of analysis done on different data sets and parameters is immensely valuable. To achieve reproducible analysis, both the data and the model (including algorithm choice, parameters and hyperparameters) need to be version controlled. <strong>Versioning data for reproducible analytics</strong> is a relatively trickier problem than versioning models because of the data size. Tools such as <a href=""https://dvc.org/"">DVC</a> help in versioning data by allowing users to commit and push data files to a remote cloud storage bucket using a git-like workflow. This makes it easy for collaborators to pull a specific version of data to reproduce an analysis.</p>"
"2018-11",Four key metrics,Techniques,Trial,"<p>The <a href=""https://devops-research.com/research.html"">State of DevOps</a> report, first published in 2014, states that high-performing teams create high-performing organizations. Recently, the team behind the report released <a href=""https://itrevolution.com/book/accelerate/"">Accelerate</a>, which describes the scientific method they've used in the report. A key takeaway of both are the <strong>four key metrics</strong> to support software delivery performance: lead time, deployment frequency, mean time to restore (MTTR), and change fail percentage. As a consultancy that has helped many organizations transform, these metrics have come up time and time again as a way to help organizations determine whether they're improving the overall performance. Each metric creates a virtuous cycle and focuses the teams on continuous improvement: to reduce lead time, you reduce wasteful activities which, in turn, lets you deploy more frequently; deployment frequency forces your teams to improve their practices and automation; your speed to recover from failure is improved by better practices, automation and monitoring which reduces the frequency of failures.</p>"
"2018-11",Multi-account cloud setup,Techniques,Trial,"<p>On-demand self-service is a key characteristic (and benefit) of cloud computing. When large-scale service landscapes are deployed using a single account, rules and processes around usage of that account become necessary, often involving approval steps that increase turnaround time. A better approach is a <strong>multi-account cloud setup</strong> where several accounts are used, in the extreme one account per team. This does add overhead in other places, for example, ensuring shared billing, enabling communication between VPCs and managing the relationship with the cloud provider. However, it often accelerates development and it usually improves security, because single-service accounts are easier to audit and, in the case of a breach, the impact is greatly reduced. Having multiple accounts also reduces stickiness, because an account provides a good boundary for services that can be moved en bloc to another cloud provider.</p>"
"2018-11",Observability as code,Techniques,Trial,"<p>The observability is an integral part of operating a distributed and <a href=""https://martinfowler.com/articles/microservices.html"">microservices architecture</a>. We rely on different system outputs such as distributed tracing, aggregate logs and metrics to infer the internal state of the distributed components, diagnose where the problems are and get to the root cause. An important aspect of an observability ecosystem is monitoring—visualizing and analyzing the system's output—and alerting when unexpected conditions are detected. Traditionally, configuration of monitoring dashboards and setting up alerts is done through GUI-based point-and-click systems. This approach leads to nonrepeatable dashboard configurations, no ability to continuously test and adjust alerts to avoid alert fatigue or missing out on important alerts, and drift from organizational best practices. We highly recommend treating your observability ecosystem configurations as code, called <strong>observability as code</strong> , and adopt <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a> for your monitoring and alerting infrastructure. Choose observability products that support configuration through version-controlled code and execution of APIs or commands via infrastructure CD pipelines. Observability as code is an often-forgotten aspect of infrastructure as code and, we believe, crucial enough to be called out.</p>"
"2018-11",Risk-commensurate vendor strategy,Techniques,Trial,"<p>Often, in an effort to outsource risk to their suppliers, businesses look for ""one throat to choke"" on their most critical and risky system implementations. Unfortunately, this gives them fewer solution choices and less flexibility. Instead, businesses should look to maintain the greatest vendor independence where the business risk exposure is highest. We see a new <strong>risk-commensurate vendor strategy</strong> emerging that encourages investment to maintain vendor independence for highly critical business systems. Less critical business functions can take advantage of the streamlined delivery of a vendor-native solution because it allows them to absorb more easily the impact of losing that vendor. This trade-off has become apparent as the major cloud providers have expanded their range of service offerings. For example, using AWS Secret Management Service can speed up initial development and has the benefit of ecosystem integration, but it will also add more inertia if you ever need to migrate to a different cloud provider than it would if you had implemented, for example, <a href=""/radar/tools/hashicorp-vault"">Vault</a>.</p>"
"2018-11",Run cost as architecture fitness function,Techniques,Trial,"<p>We still see teams who aren't tracking the cost of running their applications as closely as they should as their software architecture or usage evolves. This is particularly true when they're using <a href=""/radar/techniques/serverless-architecture"">serverless</a>, which developers assume will provide lower costs since you're not paying for unused server cycles. However, the major cloud providers are pretty savvy at setting their pricing models, and heavily used serverless functions, although very useful for rapid iteration, can get expensive quickly when compared with dedicated cloud (or on-premise) servers. We advise teams to frame a system's <strong>run cost as architecture fitness function</strong> , which means: track the cost of running your services against the value delivered; when you see deviations from what was expected or acceptable, have a discussion about whether it's time to evolve your architecture.</p>"
"2018-11",Secrets as a service,Techniques,Trial,"<p>We've long cautioned people about the temptation to check secrets into their source code repositories. Previously, we've recommended <a href=""/radar/techniques/decoupling-secret-management-from-source-code"">decoupling secret management from source code</a>. However, now we're seeing a set of good tools emerge that offer <strong>secrets as a service</strong>. With this approach, rather than hardwiring secrets or configuring them as part of the environment, applications retrieve them from a separate process. Tools such as <a href=""/radar/tools/hashicorp-vault"">Vault</a> by HashiCorp let you manage secrets separately from the application and enforce policies such as frequent rotation externally.</p>"
"2018-11",Security Chaos Engineering,Techniques,Trial,"<p>Although we've had mostly new blips in this edition of the Radar, we think it's worth continuing to call out the usefulness of <strong>Security Chaos Engineering</strong>. We've moved it to Trial because the teams using this technique are confident that the security policies they have in place are robust enough to handle common security failure modes. Still, proceed with caution when using this technique—we don't want our teams to become desensitized to these issues.</p>"
"2019-11",Commitizen,Tools,Adopt,"<p><strong><a href=""http://commitizen.github.io/cz-cli/"">Commitizen</a></strong> is a simple tool to help streamline the commit process when using Git. It prompts you to provide any required fields and also formats your commit message appropriately. It supports different conventions for describing the required check-in formats, and you can add your own via an adapter. This simple tool saves time and avoids later rejections from a commit hook.</p>"
"2018-11",Chaos Katas,Techniques,Assess,"<p><strong>Chaos Katas</strong> is a technique that our teams have developed to train and upskill infrastructure and platform engineers. It combines <a href=""/radar/techniques/chaos-engineering"">Chaos Engineering</a> techniques—that is, creating failures and outages in a controlled environment—with the systematic teaching and training approach of <a href=""https://en.wikipedia.org/wiki/Kata"">Kata</a>. Here, Kata refers to code patterns that trigger controlled failures, allowing engineers to discover the problem, recover from the failure, run postmortem and find the root cause. Repeated execution of Katas helps engineers to internalize their new skills.</p>"
"2018-11",Distroless Docker images,Techniques,Assess,"<p>When building <a href=""/radar/platforms/docker"">Docker</a> images for our applications, we're often concerned with two things: the security and the size of the image. Traditionally, we've used <a href=""/radar/techniques/container-security-scanning"">container security scanning</a> tools to detect and patch <a href=""https://cve.mitre.org/"">common vulnerabilities and exposures</a> and small distributions such as <a href=""https://alpinelinux.org/"">Alpine Linux</a> to address the image size and distribution performance. In this Radar, we're excited about addressing the security and size of containers with a new technique called <strong>distroless docker images</strong> , pioneered by Google. With this technique, the footprint of the image is reduced to the application, its resources and language runtime dependencies, without operating system distribution. The advantages of this technique include reduced noise of security scanners, smaller security attack surface, reduced overhead of patching vulnerabilities and even smaller image size for higher performance. Google has published a set of <a href=""https://github.com/GoogleContainerTools/distroless"">distroless container images</a> for different languages. You can create distroless application images using the Google build tool <a href=""https://bazel.build/"">Bazel</a>, which has rules for creating distroless containers or simply use multistage Dockerfiles. Note that distroless containers by default don't have a shell for debugging. However, you can easily find debug versions of distroless containers online, including a <a href=""https://busybox.net/downloads/BusyBox.html"">busybox shell</a>.</p>"
"2018-11",Incremental delivery with COTS,Techniques,Assess,"<p>At ThoughtWorks, as early adopters and leaders in the agile space, we've been proponents of the practice of incremental delivery. We've also advised many clients to look at off-the-shelf software through a ""Can this be released incrementally?"" lens. This has often been difficult because of the big-bang approach of most vendors which usually involves migrating large amounts of data. Recently, however, we've also had success using <strong>incremental delivery with COTS</strong> (commercial off-the-shelf), launching specific business processes incrementally to smaller subsets of users. We recommend you assess whether you can apply this practice to the vendor software of your choice, to help reduce the risks involved in big-bang deliveries.</p>"
"2018-11",Infrastructure configuration scanner,Techniques,Assess,"<p>For some time now we've recommended increased delivery team ownership of their entire stack, including infrastructure. This means increased responsibility in the delivery team itself for configuring infrastructure in a safe, secure, and compliant way. When adopting cloud strategies, most organizations default to a tightly locked-down and centrally managed configuration to reduce risk, but this also creates substantial productivity bottlenecks. An alternative approach is to allow teams to manage their own configuration, and use an <strong>Infrastructure configuration scanner</strong> to ensure the configuration is set in a safe and secure way. <a href=""http://github.com/iagcl/watchmen"">Watchmen</a> is an interesting tool, built to provide rule-driven assurance of AWS account configurations that are owned and operated independently by delivery teams. <a href=""/radar/tools/scout2"">Scout2</a> is another example of configuration scanning to support secure compliance.</p>"
"2018-11",Pre-commit downstream build checks,Techniques,Assess,"<p>In more complex architectures and deployments, it may not be immediately obvious that a build that depends on the code currently being checked in is broken. Developers trying to fix a broken build could find themselves working against a moving target, as the build is continually triggered by upstream dependencies. <strong>Pre-commit downstream build checks</strong> is a very simple technique: have a pre-commit or pre-push script check the status of these downstream builds and alert the developer beforehand that a build is broken.</p>"
"2018-11",Service mesh,Techniques,Assess,"<p>As large organizations transition to more autonomous teams owning and operating their own microservices, how can they ensure the necessary consistency and compatibility between those services without relying on a centralized hosting infrastructure? To work together efficiently, even autonomous microservices need to align with some organizational standards. A <strong>service mesh</strong> offers consistent discovery, security, tracing, monitoring and failure handling without the need for a shared asset such as an API gateway or ESB. A typical implementation involves lightweight reverse-proxy processes deployed alongside each service process, perhaps in a separate container. These proxies communicate with service registries, identity providers, log aggregators and other services. Service interoperability and observability are gained through a shared implementation of this proxy but not a shared runtime instance. We've advocated for a decentralized approach to microservices management for some time and are happy to see this consistent pattern emerge. Open source projects such as <a href=""http://linkerd.io/"">Linkerd</a> and <a href=""/radar/platforms/istio"">Istio</a> will continue to mature and make service meshes even easier to implement.</p>"
"2018-11","""Handcranking"" of Hadoop clusters using config management tools",Techniques,Hold,"<p>When organizations choose a <a href=""https://hadoop.apache.org/"">vanilla Hadoop</a> or <a href=""https://spark.apache.org/"">Spark</a> distribution instead of one of the vendor distributions, they have to decide how they want to provision and manage the cluster. Occasionally, we see <strong>""handcranking"" of Hadoop clusters using config management tools</strong> such as <a href=""https://www.ansible.com/"">Ansible</a>, <a href=""https://www.chef.io/"">Chef</a> and others. Although these tools are great at provisioning immutable infrastructure components, they're not very useful when you have to manage stateful systems and can often lead to significant effort trying to manage and evolve clusters using these tools. We instead recommend using tools such as <a href=""https://ambari.apache.org/"">Ambari</a> to provision and manage your stateful Hadoop or Spark clusters.</p>"
"2018-11",git-secrets,Tools,Trial,"<p>Security continues to be paramount, and inadvertently checking credentials and other secrets into source control is a major attack vector. <a href=""https://github.com/awslabs/git-secrets""><strong>git-secrets</strong></a> is a simple tool that prevents you from committing passwords and other sensitive information to a git repository. It can also scan all historical revisions before making a repository public, if you want to ensure you've never accidentally checked in a credential. git-secrets comes with built-in support for common <a href=""/radar/platforms/aws"">AWS</a> keys and credentials and can be set up quickly for other providers too.</p>"
"2018-11",Generic cloud usage,Techniques,Hold,"<p>The major cloud providers have become increasingly competitive in their pricing and the rapid pace of releasing new features. This leaves consumers in a difficult place when choosing and committing to a provider. Increasingly, we're seeing organizations prepare to use ""any cloud"" and to avoid vendor lock-in at all costs. This, of course, leads to <strong>generic cloud usage</strong>. We see organizations limiting their use of the cloud to only those features common across all cloud providers—thereby missing out on the providers' unique benefits. We see organizations making large investments in home-grown abstraction layers that are too complex to build and too costly to maintain to stay cloud agnostic. The problem of lock-in is real. We recommend approaching this problem with a multicloud strategy that evaluates the migration cost and effort of capabilities from one cloud to another, against the benefits of using cloud-specific features. We recommend increasing the portability of the workloads by shipping the applications as widely adopted <a href=""/radar/platforms/docker"">Docker</a> containers: use open source security and identity protocols to easily migrate the identity of the workloads, a <a href=""/radar/techniques/risk-commensurate-vendor-strategy"">risk-commensurate vendor strategy</a> to maintain cloud independence only where necessary and <a href=""/radar/techniques/polycloud"">Polycloud</a> to mix and match services from different providers where it makes sense. In short, shift your approach from a generic cloud usage to a sensible multicloud strategy.</p>"
"2018-11",Layered microservices architecture,Techniques,Hold,"<p>A defining characteristic of a <a href=""https://martinfowler.com/articles/microservices.html"">microservices architecture</a> is that system components and services are organized around business capabilities. Regardless of size, microservices encapsulate a meaningful grouping of functionality and information to allow for the independent delivery of business value. This is in contrast to earlier approaches in service architecture which organized services according to technical characteristics. We've observed a number of organizations who've adopted a <strong>layered microservices architecture</strong> , which in some ways is a contradiction in terms. These organizations have fallen back to arranging services primarily according to a technical role, for example, experience APIs, process APIs or system APIs. It's too easy for technology teams to be assigned by layer, so delivering any valuable business change requires slow and expensive coordination between multiple teams. We caution against the effects of this layering and recommend arranging services and teams primarily according to business capability.</p>"
"2018-11",Master data management,Techniques,Hold,"<p><strong>Master data management</strong> (MDM) is a classic example of the enterprise ""silver bullet"" solution: it promises to solve an apparently related class of problems in one go. Through creating a centralized single point of change, coordination, test and deployment, MDM solutions negatively impact an organization's ability to respond to business change. Implementations tend to be long and complex, as organizations try to capture and map all ""master"" data into the MDM while integrating the MDM solution into all consuming or producing systems.</p>"
"2018-11",Microservice envy,Techniques,Hold,"<p><a href=""https://martinfowler.com/articles/microservices.html"">Microservices</a> has emerged as a leading architectural technique in modern cloud-based systems, but we still think teams should proceed carefully when making this choice. <strong>Microservice envy</strong> tempts teams to complicate their architecture by having lots of services simply because it's a fashionable architecture choice. Platforms such as <a href=""/radar/platforms/kubernetes"">Kubernetes</a> make it much easier to deploy complex sets of microservices, and vendors are pushing their solutions to managing microservices, potentially leading teams further down this path. It's important to remember that microservices trade development complexity for operational complexity and require a solid foundation of automated testing, continuous delivery and DevOps culture.</p>"
"2018-11",Request-response events in user-facing workflows,Techniques,Hold,"<p>On a number of occasions we have seen system designs that use <strong>request-response events in user-facing workflows</strong>. In these cases, the UI is blocked or the user has to wait for a new page to load until a corresponding response message to a request message is received. The main reasons cited for designs like this are performance or a unified approach to communication between backends for synchronous and asynchronous use cases. We feel that the increased complexity—in development, testing and operations—far outweighs the benefit of having a unified approach, and we strongly suggest to use synchronous HTTP requests when synchronous communication between backend services is needed. When implemented well, communication using HTTP rarely is a bottleneck in a distributed system.</p>"
"2018-11",RPA,Techniques,Hold,"<p>Robotic process automation ( <strong>RPA</strong> ) is a key part of many digital transformation initiatives, as it promises to deliver cost savings without having to modernize the underlying architecture and systems. The problem with this approach of focusing only on automating business processes, without addressing the underlying software systems or capabilities, is that this can make it even harder to change the underlying systems by introducing additional coupling. This makes any future attempts to address the legacy IT landscape even more difficult. Very few systems can afford to ignore change and hence RPA efforts need to be coupled with appropriate legacy modernization strategies.</p>"
"2018-11",Apache Atlas,Platforms,Trial,"<p>With the growing and diverse data needs of enterprises comes a growing need for metadata management. <a href=""https://atlas.apache.org/""><strong>Apache Atlas</strong></a> is a metadata management framework that fits the data governance needs of enterprises. Atlas provides capabilities to model types for metadata, classify data assets, track the data lineage and enable data discovery. However, when building a metadata management platform, we need to be careful not to repeat the mistakes of <a href=""/radar/techniques/master-data-management"">master data management</a>.</p>"
"2018-11",AWS,Platforms,Trial,"<p>We first placed <strong>AWS</strong> in Adopt seven years ago, and the breadth, depth and reliability of its services have improved in leaps and bounds since then. However, we're now moving AWS back into Trial, not because of any deficiencies in its offering, but because its competitors, <a href=""/radar/platforms/google-cloud-platform"">GCP</a> and <a href=""/radar/platforms/azure"">Azure</a>, have matured considerably and selecting a cloud provider has become increasingly complex. We reserve Adopt for when we see a clear winner in a field. For many years, AWS was the default choice, but we now feel that organizations should make a balanced selection across cloud providers that takes into account their geographic and regulatory footprint, their strategic alignment (or lack thereof) with the providers, and, of course, the fit between their most important needs and the cloud providers' differentiating products.</p>"
"2018-11",Azure,Platforms,Trial,"<p>Microsoft has steadily improved <a href=""http://azure.microsoft.com""><strong>Azure</strong></a> and today not much separates the core cloud experience provided by the major cloud providers—Amazon, Google and Microsoft. The cloud providers seem to agree and seek to differentiate themselves in other areas such as features, services and cost structure. Microsoft is the provider who shows real interest in the legal requirements of European companies. They’ve a nuanced and plausible strategy, including unique offerings such as <a href=""http://azure.microsoft.com/en-us/global-infrastructure/germany/"">Azure Germany</a> and <a href=""/radar/platforms/azure-stack"">Azure Stack</a>, which gives some certainty to European companies in anticipation of the <a href=""http://www.thoughtworks.com/insights/blog/gdpr-it-s-time-rethink-your-approach-privacy"">GDPR</a> and possible legislative changes in the United States.</p>"
"2018-11",Contentful,Platforms,Trial,"<p>Headless content management systems (CMSes) are becoming a common component of digital platforms. <a href=""http://www.contentful.com/""><strong>Contentful</strong></a> is a modern headless CMS that our teams have successfully integrated into their development workflows. We particularly like its API-first approach and implementing <a href=""http://www.contentful.com/r/knowledgebase/cms-as-code/"">CMS as code</a>. It supports powerful content modeling primitives as code and content model evolution scripts, which allow treating it as other data store schemas and applying <a href=""http://martinfowler.com/articles/evodb.html"">evolutionary database design</a> practices to CMS development. Other notable features that we've liked include inclusion of two CDNs to deliver media assets and JSON documents, good support for localization and the ability—albeit with some effort—to integrate with <a href=""/radar/platforms/auth0"">Auth0</a>.</p>"
"2018-11",Google Cloud Platform,Platforms,Trial,"<p>As <a href=""http://cloud.google.com/free/ce1/""><strong>Google Cloud Platform</strong></a> (GCP) has expanded in terms of available geographic regions and maturity of services, customers globally can now seriously consider it for their cloud strategy. In some areas, GCP has reached feature parity with its main competitor, Amazon Web Services, while in other areas it has differentiated itself—notably with accessible machine learning platforms, data engineering tools, and a workable Kubernetes as a service solution (<a href=""/radar/platforms/gke"">GKE</a>). In practice, our teams have nothing but praise for the developer experience working with the GCP tools and APIs.</p>"
"2018-11",Shared VPC,Platforms,Trial,"<p>As we've gained more experience with the public cloud across organizations large and small, certain patterns have emerged. One of those patterns is a virtual private cloud network managed at the organizational level and divided into smaller subnets under the control of each delivery team. This is closely related to the idea of <a href=""/radar/techniques/multi-account-cloud-setup"">multiaccount cloud setup</a> and helps to <a href=""/radar/techniques/partition-infrastructure-along-team-bounds"">partition an infrastructure along team bounds</a>. After configuring this setup many times using VPCs, subnets, security groups and NACLs, we really like Google's notion of the <a href=""https://cloud.google.com/vpc/docs/shared-vpc""><strong>shared VPC</strong></a>. Shared VPC makes organizations, projects, VPCs and subnets first-class entities in network configurations. VPCs can be managed by an organization's administrators who can delegate subnet administration to projects. Projects can then be explicitly associated with subnets in the VPC. This simplifies configuration and makes security and access control more transparent.</p>"
"2018-11",TICK Stack,Platforms,Trial,"<p><a href=""http://www.influxdata.com/time-series-platform/""><strong>TICK Stack</strong></a> is a collection of open source components that combine to deliver a platform for easily storing, visualizing and monitoring time series data such as metrics and events. The components are: <a href=""https://www.influxdata.com/time-series-platform/telegraf/"">Telegraf</a>, a server agent for collecting and reporting metrics; <a href=""https://www.influxdata.com/time-series-platform/influxdb/"">InfluxDB</a>, a high-performance time series database; <a href=""https://www.influxdata.com/time-series-platform/chronograf/"">Chronograf</a>, a user interface for the platform; and <a href=""https://www.influxdata.com/time-series-platform/kapacitor/"">Kapacitor</a>, a data-processing engine that can process, stream and batch data from InfluxDB. Unlike <a href=""/radar/tools/prometheus"">Prometheus</a>, which is based on the pull model, TICK Stack is based on the push model of collecting data. The heart of the system is the InfluxDB component, which is one of the best time series databases. The stack is backed by InfluxData and although you need the enterprise version for features such as database clustering, it's still a fairly good choice for monitoring. We're using it in a few places in production and have had good experiences with it.</p>"
"2018-11",Azure DevOps,Platforms,Assess,"<p><strong><a href=""https://azure.microsoft.com/en-us/services/devops/"">Azure DevOps</a></strong> services include a set of managed services such as hosted Git repos, CI and CD pipelines and artifact repository. Azure DevOps services have replaced <a href=""https://docs.microsoft.com/en-us/azure/devops/user-guide/what-happened-vsts?view=vsts"">Visual Studio Team Services</a>. We've had a good experience in starting projects quickly with Azure DevOps services—managing, building and releasing applications to <a href=""/radar/platforms/azure"">Azure</a>. We've also run into a few challenges—such as lack of full support for CI and CD pipeline as code, slow build agent startup time, separation of build and release into different pipelines—and experienced a few downtimes. We're hoping that Azure DevOps services improve over time to provide a good developer experience when hosting applications on Azure, with a frictionless experience integrating with other Azure services.</p>"
"2018-11",CockroachDB,Platforms,Assess,"<p><strong><a href=""https://www.cockroachlabs.com/product/cockroachdb/"">CockroachDB</a></strong> is an open source distributed database inspired by the white paper <a href=""https://storage.googleapis.com/pub-tools-public-publication-data/pdf/39966.pdf"">Spanner: Google's distributed database</a>. In CockroachDB, data is automatically divided into ranges, usually 64MB, and distributed across nodes in the cluster. Each range has a consensus group and, because it uses the <a href=""https://raft.github.io/"">Raft consensus algorithm</a>, the data is always kept in sync. With its unique design, CockroachDB provides distributed transactions and geo-partitioning while still supporting SQL. Unlike <a href=""/radar/platforms/cloud-spanner"">Spanner</a>, which relies on <a href=""https://cloud.google.com/spanner/docs/true-time-external-consistency"">TrueTime</a> with atomic clock for linearizability, CockroachDB uses <a href=""https://en.wikipedia.org/wiki/Network_Time_Protocol"">NTP</a> for clock synchronization and provides serializability as the default isolation level. If you're working with structured data that fits in a single node, then choose a traditional relational database. However, if your data needs to scale across nodes, be consistent and survive failures, then we recommend you take a closer look at CockroachDB.</p>"
"2018-11",Debezium,Platforms,Assess,"<p><strong>Debezium</strong> is a <a href=""https://en.wikipedia.org/wiki/Change_data_capture"">change data capture (CDC)</a> platform that can stream database changes onto <a href=""/radar/tools/apache-kafka"">Kafka</a> topics. CDC is a popular technique with multiple use cases, including replicating data to other databases, feeding analytics systems, extracting microservices from monoliths and invalidating caches. We're always on the lookout for tools or platforms in this space (we talked about <a href=""/radar/tools/bottled-water"">Bottled Water</a> in a previous Radar) and Debezium is an excellent choice. It uses a log-based CDC approach which means it works by reacting to changes in the database's log files. Debezium uses Kafka Connect which makes it highly scalable and resilient to failures and has CDC connectors for multiple databases including Postgres, Mysql and MongoDB. We're using it in a few projects and it has worked very well for us.</p>"
"2018-11",Glitch,Platforms,Assess,"<p>We've been intrigued by <strong><a href=""https://glitch.com/"">Glitch</a></strong>, which is a collaborative online development environment that lets you easily copy and adapt (or ""remix"") existing web apps or create your own. Rooted in the ""tinkerer"" ethos, it's ideal for people learning to code but it has the capability to support more complex applications. The main focus is on JavaScript and <a href=""/radar/platforms/node-js"">Node.js</a>, but it also has limited support for other languages. With integrated live editing, hosting, sharing and automatic source versioning, Glitch offers a refreshing and distinctive take on collaborative programming.</p>"
"2018-11",Google Cloud Dataflow,Platforms,Assess,"<p><a href=""https://cloud.google.com/dataflow/""><strong>Google Cloud Dataflow</strong></a> is useful in traditional ETL scenarios for reading data from a source, transforming it and then storing it to a sink, with configurations and scaling being managed by dataflow. Dataflow supports Java, Python and Scala and provides wrappers for connections to various types of data sources. However, the current version won’t let you add additional libraries, which may make it unsuitable for certain data manipulations. You also can’t change the dataflow DAG dynamically. Hence, if your ETL has conditional execution flows based on parameters, you may not be able to use dataflow without workarounds.</p>"
"2018-11",gVisor,Platforms,Assess,"<p><strong><a href=""https://github.com/google/gvisor"">gVisor</a></strong> is a user-space kernel for containers. It limits the host kernel surface accessible to the application without taking away access to all the features it expects. Unlike existing sandbox technologies, such as virtualized hardware (<a href=""https://www.linux-kvm.org"">KVM</a> and <a href=""https://www.xenproject.org"">Xen</a>) or rule-based execution (<a href=""https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt"">seccomp</a>, <a href=""https://selinuxproject.org"">SELinux</a> and <a href=""https://wiki.ubuntu.com/AppArmor"">AppArmor</a>), gVisor takes a distinct approach to container sandboxing by intercepting application system calls and acting as the guest kernel without the need for translation through virtualized hardware. gVisor includes an <a href=""https://www.opencontainers.org"">Open Container Initiative (OCI)</a> runtime called runsc that integrates with <a href=""/radar/platforms/docker"">Docker</a> and provides experimental support for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. gVisor is a relatively new project and we recommend assessing it for your container security landscape.</p>"
"2018-11",IPFS,Platforms,Assess,"<p>In most cases, blockchain is not the right place to store a <a href=""https://en.wikipedia.org/wiki/Binary_large_object"">blob</a> file (e.g., image or audio). When developing <a href=""/radar/techniques/ethereum-for-decentralized-applications"">DApp</a>, one option is to put blob files in some off-chain centralized data storage, which usually signals lack of trust. Another option is to store them on InterPlanetary File System (<strong><a href=""https://ipfs.io/"">IPFS</a></strong>), which is a content-addressed, versioned, peer-to-peer file system. It’s designed to distribute high volumes of data with high efficiency and removed from any centralized authority. Files are stored on peers that don’t need to trust each other. IPFS keeps every version of a file so you never lose important files. We see IPFS as a good complement to blockchain technology. Beyond its blockchain application, IPFS has an ambitious goal to decentralize the Internet infrastructure.</p>"
"2018-11",Istio,Platforms,Assess,"<p>When building and operating a <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a> ecosystem, one of the early questions to answer is how to implement cross-cutting concerns such as service discovery, service-to-service and origin-to-service security, observability (including telemetry and distributed tracing), rolling releases and resiliency. Over the last couple of years, our default answer to this question has been using a <a href=""/radar/techniques/service-mesh"">service mesh</a> technique. A service mesh offers the implementation of these cross-cutting capabilities as an infrastructure layer that is configured as code. The policy configurations can be consistently applied to the whole ecosystem of microservices; enforced on both in and out of mesh traffic (via the mesh proxy as a gateway) as well as on the traffic at each service (via the same mesh proxy as a sidecar container). While we're keeping a close eye on the progress of different open source service mesh projects such as <a href=""https://linkerd.io/"">Linkerd</a>, we've successfully used <strong><a href=""https://istio.io/"">Istio</a></strong> in production with a surprisingly easy-to-configure operating model.</p>"
"2018-11",Knative,Platforms,Assess,"<p>As application developers, we love to focus on solving core business problems and let the underlying platform handle the boring but difficult tasks of deploying, scaling and managing applications. Although <a href=""/radar/techniques/serverless-architecture"">serverless architecture</a> is a step in that direction, most of the popular offerings are tied to a proprietary implementation, which means vendor lock-in. <a href=""https://cloud.google.com/knative/""><strong>Knative</strong></a> tries to address this by being an open source serverless platform that integrates well with the popular <a href=""/radar/platforms/kubernetes"">Kubernetes</a> ecosystem. With Knative you can model computations on request in a supported framework of your choice (including Ruby on Rails, Django and Spring among others); subscribe, deliver and manage events; integrate with familiar CI and CD tools; and build containers from source. By providing a set of middleware components for building source-centric and container-based applications that can be elastically scaled, Knative is an attractive platform that deserves to be assessed for your serverless needs.</p>"
"2018-11",Pulumi,Platforms,Assess,"<p>We're quite interested in <a href=""https://pulumi.io/""><strong>Pulumi</strong></a>, a promising entrant in cloud infrastructure automation. Pulumi distinguishes itself by allowing configurations to be written in <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a>/JavaScript, <a href=""/radar/languages-and-frameworks/python-3"">Python</a>, and Go—no YAML required. Pulumi is tightly focused on cloud-native architectures—including containers, serverless functions and data services—and provides good support for Kubernetes.</p>"
"2018-11",Quorum,Platforms,Assess,"<p><a href=""/radar/platforms/ethereum"">Ethereum</a> is the leading developer ecosystem in blockchain tech. We've seen emerging solutions that aim to spread this technology into enterprise environments that usually require network permissioning and transaction privacy as well as higher throughput and lower latency. <a href=""https://www.jpmorgan.com/global/Quorum""><strong>Quorum</strong></a> is one of these solutions. Originally developed by J.P. Morgan, Quorum positions itself as ""an enterprise-focused version of Ethereum."" Unlike the <a href=""https://github.com/hyperledger/burrow"">Hyperledger Burrow</a> node, which creates a new Ethereum virtual machine (EVM), Quorum forks code from Ethereum's official client so that it can evolve alongside Ethereum. Although it keeps most features of the Ethereum ledger, Quorum changes the consensus protocol from PoW to more efficient ones and adds private transaction support. With Quorum, developers can use their Ethereum knowledge of using, for example, <a href=""/radar/languages-and-frameworks/solidity"">Solidity</a> and <a href=""/radar/languages-and-frameworks/truffle"">Truffle</a> contracts to build enterprise blockchain applications. However, based on our experience, Quorum is not yet enterprise ready; for example, it lacks access control for private contracts, doesn't work well with load balancers and only has partial database support, all of which will lead to significant deployment and design burden. We recommend that you're cautious in implementing Quorum while keeping an eye on its development.</p>"
"2018-11",Resin.io,Platforms,Assess,"<p><strong><a href=""https://resin.io/"">Resin.io</a></strong> is an Internet of Things (IoT) platform that does one thing and does it well: it deploys containers onto devices. Developers use a software as a service (SaaS) portal to manage devices and assign applications, defined by Dockerfiles, to them. The platform can build containers for various hardware types and deploys the images over the air. For the containers, Resin.io uses <a href=""https://www.balena.io/"">balena</a>, an engine based on the Moby framework created by <a href=""/radar/platforms/docker"">Docker</a>. The platform is still under development, has some rough edges and lacks some features (e.g., working with private registries), but the current feature set, including the option to ssh into a container on a device from the web portal, points toward a promising future.</p>"
"2018-11",Rook,Platforms,Assess,"<p><strong><a href=""https://rook.io/"">Rook</a></strong> is an open source cloud native storage orchestrator for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. Rook integrates with <a href=""/radar/platforms/ceph"">Ceph</a> and brings File, Block and Object storage systems into the Kubernetes cluster, running them seamlessly alongside other applications and services that are consuming the storage. By using Kubernetes operators, Rook orchestrates Ceph at the control plane and stays clear of the data path between applications and Ceph. Storage is one of the important components of cloud-native computing and we believe that Rook, though still an incubating-level project at <a href=""https://www.cncf.io/"">CNCF</a>, takes us a step closer to self-sufficiency and portability across public cloud and on-premise deployments.</p>"
"2018-11",SPIFFE,Platforms,Assess,"<p>Making key elements of Google's groundbreaking, high-scale platform available as open source offerings appears to have become a trend. In the same way that HBASE drew on BigTable and <a href=""/radar/platforms/kubernetes"">Kubernetes</a> drew on Borg, <a href=""https://spiffe.io/""><strong>SPIFFE</strong></a> is now drawing upon Google's LOAS to bring to life a critical cloud-native concept called workload identity. The SPIFFE standards are backed by the OSS <a href=""https://github.com/spiffe/spire"">SPIFFE Runtime Environment (SPIRE)</a>, which automatically delivers cryptographically provable identities to software workloads. Although SPIRE isn't quite ready for production use, we see tremendous value in a platform-agnostic way to make strong identity assertions between workloads in modern, distributed IT infrastructures. SPIRE supports many use cases, including identity translation, OAuth client authentication, mTLS ""encryption everywhere,"" and workload observability. <a href=""/radar/platforms/istio"">Istio</a> uses SPIFFE by default.</p>"
"2018-11",Data-hungry packages,Platforms,Hold,"<p><strong>Data-hungry packages</strong> are solutions that require absorption of data into themselves in order to function. In some cases they may even require that they become the ""master"" for that data. Once the data is owned by the package, that software becomes the only way to update, change or access the data. The data-hungry package might solve a particular business problem such as ERP. However, inventory or finance ""data demands"" placed upon an organization will often require complex integration and changes to systems that lie well outside of the original scope.</p>"
"2018-11",Low-code platforms,Platforms,Hold,"<p><strong>Low-code platforms</strong> use graphical user interfaces and configuration in order to create applications. Unfortunately, low-code environments are promoted with the idea that this means you no longer need skilled development teams. Such suggestions ignore the fact that writing code is just a small part of what needs to happen to create high-quality software—practices such as source control, testing and careful design of solutions are just as important. Although these platforms have their uses, we suggest approaching them with caution, especially when they come with extravagant claims for lower cost and higher productivity.</p>"
"2018-11",Jepsen,languages-and-frameworks,Trial,"<p>With the increased adoption of a <a href=""https://martinfowler.com/microservices/"">microservices</a> architecture, we're building more distributed applications than before. Although there are many benefits of a decoupled architecture, the complexity and the effort involved in proving the correctness of the overall system has dramatically increased. <a href=""https://github.com/aphyr/jepsen""><strong>Jepsen</strong></a> provides much needed tooling to verify correctness in coordination of task schedulers, test eventual consistency, <a href=""https://jepsen.io/consistency/models/linearizable"">linearizability</a> and <a href=""https://jepsen.io/consistency/models/serializable"">serializability</a> characteristics of distributed databases. We've used Jepsen in a few projects and we like the fact that we can test drive configurations, inject and correct faults, and verify the state of the system after recovery.</p>"
"2018-11",MMKV,languages-and-frameworks,Trial,"<p>An open source framework developed by <a href=""/radar/platforms/wechat"">WeChat</a>, <strong><a href=""https://github.com/Tencent/MMKV"">MMKV</a></strong> provides fast key-value storage for mobile apps. It uses iOS memory-mapping features to avoid the need to explicitly save changes and is extremely fast and performant. In the event of an unexpected crash, MMKV allows the app to restore the data quickly.</p>"
"2018-11",MockK,languages-and-frameworks,Trial,"<p><a href=""https://mockk.io""><strong>MockK</strong></a> is a library for mocking written in <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a>. Its main philosophy is to provide first-class support for Kotlin language features such as <a href=""https://kotlinlang.org/docs/reference/coroutines-overview.html"">Coroutines</a> or lambda blocks. As a native library, it helps our teams to write clean and concise code on testing Kotlin applications instead of using incommodious wrappers of Mockito or PowerMock.</p>"
"2018-11",TypeScript,languages-and-frameworks,Trial,"<p><strong><a href=""https://www.typescriptlang.org/"">TypeScript</a></strong> is a carefully considered language and its consistently improving tools and IDE support continues to impress us. With a <a href=""https://definitelytyped.org/"">good repository</a> of TypeScript-type definitions, we benefit from all the rich JavaScript libraries while gaining type safety. This is particularly important as our browser-based code base continues to grow. The type safety in TypeScript lets you use IDEs and other tools to provide deeper context into your code and make changes and refactor code with safety. TypeScript, being a superset of JavaScript, and documentation and the community has helped ease the learning curve.</p>"
"2018-11",Apache Beam,languages-and-frameworks,Assess,"<p><strong><a href=""https://beam.apache.org/"">Apache Beam</a></strong> is an open source unified programming model for defining and executing both batch and streaming data-parallel processing pipelines. Beam provides a portable API layer for describing these pipelines independent of execution engines (or runners) such as <a href=""https://spark.apache.org/"">Apache Spark</a>, <a href=""https://flink.apache.org/"">Apache Flink</a> or <a href=""/radar/platforms/google-cloud-dataflow"">Google Cloud Dataflow</a>. Different runners have different capabilities and providing a portable API is a difficult task. Beam tries to strike a delicate balance by actively pulling innovations from these runners into the Beam model and also working with the community to influence the roadmap of these runners. Beam has a rich set of <a href=""http://beam.apache.org/documentation/io/built-in/"">built-in I/O transformations</a> that cover most of the data pipeline needs and it also provides a mechanism to implement <a href=""http://beam.apache.org/documentation/io/authoring-overview/"">custom transformations</a> for specific use cases. The portable API and extensible IO transformations make a compelling case for assessing Apache Beam for data pipeline needs.</p>"
"2018-11",Camunda,languages-and-frameworks,Assess,"<p>We tend to be quite skeptical of business process model and notation (BPMN) tools in general as they're often associated with low-code environments and their downsides. Although the OSS BPMN framework <strong><a href=""https://camunda.com/"">Camunda</a></strong> provides some of this whizziness, it also offers workflow and decision engines that can be directly integrated as a library in your Java code. This makes it easy to test, version and refactor workflows. Camunda also integrates with Spring and Spring Boot, among other frameworks, making it a solid choice.</p>"
"2018-11",Flutter,languages-and-frameworks,Assess,"<p><a href=""http://flutter.io/""><strong>Flutter</strong></a> is a cross-platform framework that enables you to write native mobile apps in <a href=""/radar/languages-and-frameworks/google-dart"">Dart</a>. It benefits from Dart and can be compiled into native code and communicates with the target platform without bridge and context switching—something that can cause performance bottlenecks in frameworks such as <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> or <a href=""/radar/languages-and-frameworks/weex"">Weex</a>. Flutter's hot-reload feature is impressive and provides superfast visual feedback when editing code. Currently, Flutter is still in beta, but we'll continue keeping an eye on it to see how its ecosystem matures.</p>"
"2018-11",Ktor,languages-and-frameworks,Assess,"<p><a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> is no longer just a great fit for mobile app development. New tools and frameworks have emerged that demonstrate the value of the language for web application development as well. <strong><a href=""https://ktor.io"">Ktor</a></strong> is one such framework. In contrast to other web frameworks that support Kotlin, Ktor is written in Kotlin, using language features such as <a href=""https://kotlinlang.org/docs/reference/coroutines-overview.html"">coroutines</a> which allows for an asynchronous non-blocking implementation. The flexibility to incorporate different tools for logging, DI or a templates engine—in addition to its lightweight architecture—makes Ktor an interesting option for our teams for creating RESTful services.</p>"
"2018-11",Nameko,languages-and-frameworks,Assess,"<p>One insight we gained after talking with our teams is that <a href=""/radar/languages-and-frameworks/python-3"">Python</a> is making a comeback across many technology domains. In fact, it's well on its way to become the <a href=""https://spectrum.ieee.org/at-work/innovation/the-2018-top-programming-languages"">most-used programming language</a>. In part, this is driven by its adoption by data scientists and in machine learning, but we also see teams adopting it to build microservices. <a href=""https://www.nameko.io/""><strong>Nameko</strong></a> is a super-lightweight microservices framework and an alternative to <a href=""http://flask.pocoo.org/"">Flask</a> for writing services. Unlike Flask, Nameko only has a limited set of features that includes WebSocket, HTTP and AMQP support. We also like its focus on testability. If you don't need features such as templating that Flask provides, then Nameko is worth a look.</p>"
"2018-11",Polly.js,languages-and-frameworks,Assess,"<p><a href=""https://netflix.github.io/pollyjs/""><strong>Polly.js</strong></a> is a simple tool that helps teams test JavaScript websites and applications. Our teams particularly like that it enables them to intercept and stub HTTP interactions which allows for easier and faster testing of JavaScript code without having to spin up dependent services or components.</p>"
"2018-11",PredictionIO,languages-and-frameworks,Assess,"<p><a href=""http://predictionio.apache.org/""><strong>PredictionIO</strong></a> is an open source machine-learning server. Developers and data scientists can use it to build intelligent applications for prediction. Like all intelligent applications, PredictionIO has three parts: data collection and storage, model training, and model deployment and expose service. Developers could focus on implementing data-processing logic, model algorithm and prediction logic based on the corresponding interfaces and liberate themselves from data storage and model training deployment. In our experience, PredictionIO can support both small and large volumes of data with low concurrency. We mostly use PredictionIO to build predictive services for small and medium-sized enterprises or as a proof of concept when building more complex, customized prediction engines.</p>"
"2018-11",Puppeteer,languages-and-frameworks,Assess,"<p>In the previous Radar we mentioned <a href=""/radar/tools/headless-chrome-for-front-end-test"">Headless Chrome for front-end test</a>. With the adoption of <a href=""http://devtools.chrome.com"">Chrome DevTools Protocol</a> (CDP) by other browsers a new set of libraries is emerging for browser automation and testing. CDP allows for fine-grained control over the browser even in headless mode. New high-level libraries are being created using CDP for testing and automation. <strong><a href=""https://pptr.dev"">Puppeteer</a></strong> is one of these new libraries. It can drive headless Chrome through a single-page application, obtain time-trace for performance diagnostics and more. Our teams found it faster and also more flexible than alternatives based on WebDriver.</p>"
"2018-11",Q#,languages-and-frameworks,Assess,"<p>Quantum computing currently exists in a twilight zone of being available for testing without having arrived yet. While we're still waiting for the hardware to arrive, we can experiment with and learn from languages and simulators. Although IBM and others have been making good progress, we've paid particular attention to Microsoft's efforts based around the <a href=""https://docs.microsoft.com/en-us/quantum/quantum-qr-intro?view=qsharp-preview""><strong>Q#</strong></a> language and its simulator (32 qubits locally and 40 on Azure). If you want to start wrapping your head around the potential future of programming, check out their set of <a href=""https://github.com/Microsoft/Quantum"">samples on GitHub</a>.</p>"
"2018-11",SAFE stack,languages-and-frameworks,Assess,"<p>The <strong>SAFE stack</strong> —short for <a href=""https://suave.io/"">Suave</a>, <a href=""https://azure.microsoft.com"">Azure</a>, <a href=""http://fable.io/"">Fable</a>, and <a href=""https://github.com/elmish/elmish"">Elmish</a>—brings a number of technologies into a coherent stack for web development. It's built around the F# programming language, both on the server side and in the browser, and therefore has a focus on functional, type-safe programming with an asynchronous approach. It offers productivity features such as hot reloading and lets you substitute parts of the stack, for example, the server-side web framework or the cloud provider.</p>"
"2018-11",Spek,languages-and-frameworks,Assess,"<p>The adoption of a new language typically spawns the emergence of new tools that support mature engineering practices such as test automation. <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> is no exception. <a href=""https://spekframework.org""><strong>Spek</strong></a> is a testing framework—inspired by well-known tools such as <a href=""https://cucumber.io/"">Cucumber</a>, <a href=""http://rspec.info/"">RSpec</a> and <a href=""https://jasmine.github.io/"">Jasmine</a>—that writes tests in Gherkin and Specification, allowing teams to bring mature practices such as <a href=""https://dannorth.net/introducing-bdd"">behaviour-driven development</a> into the Kotlin space.</p>"
"2018-11",troposphere,languages-and-frameworks,Assess,"<p>We're trying out <a href=""http://github.com/cloudtools/troposphere""><strong>troposphere</strong></a> as a way of defining the <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a> on AWS for our projects that use <a href=""http://aws.amazon.com/cloudformation/"">AWS</a> <a href=""http://aws.amazon.com/cloudformation/"">CloudFormation</a> instead of <a href=""/radar/tools/terraform"">Terraform</a>. troposphere is a Python library that allows us to write Python code to generate CloudFormation JSON descriptions. What we like about troposphere is that it facilitates catching JSON errors early, applying type checking, and unit testing and DRY composition of AWS resources.</p>"
"2018-11",WebAssembly,languages-and-frameworks,Assess,"<p><a href=""http://webassembly.org/""><strong>WebAssembly</strong></a> is a big step forward in the capabilities of the browser as a code execution environment. Supported by all major browsers and backward compatible, it's a binary compilation format designed to run in the browser at near native speeds. It opens up the range of languages you can use to write front-end functionality, with early focus on C, C++ and Rust, and it's also an LLVM compilation target. When run in the sandbox, it can interact with JavaScript and shares the same permissions and security model. When used with <a href=""http://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/"">Firefox's new streaming compiler</a>, it also results in faster page initialization. Although it's still early days, this W3C standard is definitely one to start exploring.</p>"
"2018-11",WebFlux,languages-and-frameworks,Assess,"<p>Spring Framework 5, released over a year ago, embraces <a href=""https://www.reactive-streams.org/"">reactive streams</a>, a standard for asynchronous stream processing with non-blocking backpressure. The <a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html""><strong>WebFlux</strong></a> module introduces a reactive alternative to the traditional Spring MVC module for writing web applications in the Spring ecosystem. After working with it on a number of applications, our teams have come away impressed and report that the reactive (functional) approach improves code readability and system throughput. They do note, though, that adopting WebFlux requires a significant shift in thinking and recommend to factor this into the decision to choose WebFlux over Spring MVC.</p>"
"2018-11",acs-engine,Tools,Trial,"<p>Azure Container Service Engine (<a href=""https://github.com/Azure/acs-engine""><strong>acs-engine</strong></a>) is an Azure Resource Manager (ARM) template generator. The required configurations of the cluster are defined in a JSON file; acs-engine reads these <a href=""https://github.com/Azure/acs-engine/blob/master/docs/clusterdefinition.md"">cluster definitions</a> and generates a number of files that can be consumed by ARM. The tool also provides flexibility to choose different orchestrators—including <a href=""/radar/platforms/kubernetes"">Kubernetes</a>, <a href=""https://dcos.io/"">DC/OS</a>, <a href=""https://www.openshift.com/"">OpenShift</a>, <a href=""https://docs.docker.com/engine/swarm/"">Swarm mode</a> and Swarm—and to configure features and agents of the cluster. We’ve been using acs-engine in a number of projects and would recommend it for managing clusters in Azure Container Service.</p>"
"2018-11",Archery,Tools,Trial,"<p>We're seeing significant advances in security tooling integration with modern software delivery processes. <a href=""https://archerysec.info/""><strong>Archery</strong></a> is an open source tool with an active community that's doing a good job of pulling together a collection of other tools, including <a href=""/radar/tools/zap"">Zap</a>. Designed primarily for web applications, Archery makes it easy to integrate security tooling into your build and deployment systems. Its dashboards also let you track vulnerabilities as well as application and network scans.</p>"
"2018-11",ArchUnit,Tools,Trial,"<p><a href=""http://www.archunit.org/""><strong>ArchUnit</strong></a> is a Java testing library for checking architecture characteristics such as package and class dependencies, annotation verification and even layer consistency. We like that it runs as unit tests within your existing test setup, even though it supports only Java-based architectures. The ArchUnit test suite can be incorporated into a CI environment or a deployment pipeline, making it easier to implement <a href=""/radar/techniques/architectural-fitness-function"">fitness functions</a> in an <a href=""http://evolutionaryarchitecture.com/"">evolutionary architecture</a> way.</p>"
"2018-11",Cypress,Tools,Trial,"<p>Running end-to-end tests can present challenges, such as the long duration of the running process, the flakiness of some tests and the challenges of fixing failures in CI when running tests in headless mode. Our teams have had very good experiences with <a href=""http://www.cypress.io/""><strong>Cypress</strong></a> by solving common issues such as lack of performance and long wait time for responses and resources to load. Cypress is a useful tool that helps developers build end-to-end tests and records all test steps as a video in an MP4 file to make it easier to identify errors.</p>"
"2018-11",LocalStack,Tools,Trial,"<p>One of the challenges of using cloud services is being able to develop and test locally using those services. <a href=""https://github.com/localstack/localstack""><strong>LocalStack</strong></a> solves this problem for <a href=""/radar/platforms/aws"">AWS</a> by providing local <a href=""https://martinfowler.com/bliki/TestDouble.html"">test double</a> implementations of a wide range of AWS services, including S3, Kinesis, DynamoDB and Lambda. It builds on top of existing best-of-breed tools such as <a href=""https://github.com/mhart/kinesalite"">Kinesalite</a>, <a href=""https://github.com/mhart/dynalite"">Dynalite</a> and <a href=""https://github.com/spulec/moto"">Moto</a> and adds isolated processes and error injection functionality. LocalStack is very easy to use and ships with a simple JUnit runner and a JUnit 5 extension. We're using it in a few of our projects and have been impressed with it.</p>"
"2018-11",Mermaid,Tools,Trial,"<p><strong><a href=""https://mermaidjs.github.io"">Mermaid</a></strong> lets you generate diagrams from a markdown-like markup language. Born out of need to simplify documentation, Mermaid has grown into a larger ecosystem with plugins for <a href=""https://marketplace.atlassian.com/apps/1214124/mermaid-plugin-for-confluence?hosting=server&tab=overview"">Confluence</a>, <a href=""https://marketplace.visualstudio.com/items?itemName=vstirbu.vscode-mermaid-preview"">Visual Studio Code</a> and <a href=""https://rubygems.org/gems/jekyll-mermaid/versions/1.0.0"">Jekyll</a> to name a few. To see how it works, you can use the <a href=""https://mermaidjs.github.io/mermaid-live-editor/"">Live Editor</a> on GitHub. Mermaid also has a convenient command line interface that lets you generate SVG, PNG and PDF files as output from definition files. We've been using Mermaid in many projects and we like the simplicity of describing graphs and flowcharts with markdown and checking in the definition files with the code repository.</p>"
"2018-11",Prettier,Tools,Trial,"<p><strong><a href=""https://prettier.io/"">Prettier</a></strong> is an opinionated, automated code formatter for JavaScript (with growing support for other languages). By enforcing its own opinionated formatting style it increases consistency and readability and reduces developer effort both on formatting and engaging in wasteful team debates about code style. Even though you may disagree with the stylistic choices enforced by Prettier, we find that the benefits to the team generally outweigh small style issues. Prettier can be used with a precommit hook or an IDE plugin. As with any formatter, a one-time reformatting of your codebase can confuse your version control history, but we feel that's a minor drawback. We particularly like the way Prettier flips the linter-based approach and, borrowing from <a href=""https://golang.org/cmd/gofmt/"">gofmt</a>, instead of validating your code, it ensures that your code will always be valid.</p>"
"2018-11",Rider,Tools,Trial,"<p>We've covered <a href=""/radar/tools/visual-studio-code"">Visual Studio Code</a> in the Radar since 2015, but it isn't the only cross-platform .NET Core IDE kid on the block anymore. Recently, <a href=""https://www.jetbrains.com/rider/""><strong>Rider</strong></a>, which is part of the IDEA platform developed by JetBrains, has gained adoption, especially by those used to the speed and dexterity provided by <a href=""https://www.jetbrains.com/resharper/"">ReSharper</a>, which drives the refactoring in Rider. Rider, however, does more than ReSharper to bring the full IDEA platform to .NET and increase developer productivity. Regardless of your preferred platform, it's worth exploring Rider as it currently has the productivity edge on Visual Studio Code. It's also great to see the ecosystem alive and well, as competition ensures these tools continue to improve.</p>"
"2018-11",Snyk,Tools,Trial,"<p><strong><a href=""https://snyk.io/"">Snyk</a></strong> helps you find, fix and monitor known vulnerabilities in npm, Ruby, Python, Scala, Golang, .NET, PHP, Java and Docker dependency trees. When added to your build pipeline, Snyk continuously monitors and tests the library dependency tree against a hosted vulnerability database and suggests the minimal direct dependency version upgrade needed for remediation.</p>"
"2018-11",UI dev environments,Tools,Trial,"<p>As more and more teams embrace <a href=""/radar/techniques/designops"">DesignOps</a>, practices and tooling in this space mature, too. Many of our teams now work with what could be called <strong>UI dev environments</strong> , which provide a comprehensive environment for quickly iterating on UI components, focusing on collaboration between user experience designers and developers. We now have a few options in this space: <a href=""https://storybook.js.org/"">Storybook</a>, <a href=""https://react-styleguidist.js.org/"">react-styleguidist</a>, <a href=""https://compositor.io/"">Compositor</a> and <a href=""https://mdxjs.com/"">MDX</a>. You can use these tools standalone in component library or design system development as well as embedded in a web application project. Rather than spinning up the app, plus a <a href=""/radar/techniques/bff-backend-for-frontends"">BFF</a>, plus services simply to add a feature to a component, you can start up the Storybook dev server instead.</p>"
"2018-11",Visual Studio Code,Tools,Trial,"<p><strong><a href=""https://code.visualstudio.com/"">Visual Studio Code</a></strong> is Microsoft's free IDE editor, available across platforms. We've had good experience using this for front-end development using React and <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a>, and back-end languages such as GoLang, without having to switch between different editors. The tooling, language support and extensions for Visual Studio Code continue to soar and get better. We'd particularly like to call out <a href=""/radar/tools/visual-studio-live-share"">Visual Studio Live Share</a> for real-time collaboration and remote pairing. While complex projects in statically typed languages, such as Java, .NET or C++, will likely find better support from the more mature IDEs from Microsoft or Jetbrains, we find that Visual Studio Code is increasingly becoming a tool of choice among infrastructure and front-end development teams.</p>"
"2018-11",Visual Studio Live Share,Tools,Trial,"<p><strong><a href=""https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack"">Visual Studio Live Share</a></strong> is a suite of extensions for <a href=""/radar/tools/visual-studio-code"">Visual Studio Code</a> and Visual Studio. The real-time collaboration for editing and debugging of code, voice calls, sharing a terminal and exposing local ports have reduced some of the obstacles we'd otherwise encounter when pairing remotely. In particular, we like that Live Share allows developers to collaborate with each other, while continuing to use their preconfigured editor, which includes themes, key maps and extensions.</p>"
"2018-11",Bitrise,Tools,Assess,"<p>Building, testing and deploying mobile applications entails a number of complex steps, especially when we consider a pipeline from source code repositories to app stores. All these steps can be automated with scripts and build pipelines in generic CI/CD tools. However, for teams that focus on mobile development, and have little or no requirement to integrate with build pipelines for back-end systems, a domain-specific tool can reduce the complexity and maintenance overhead. <a href=""https://www.bitrise.io""><strong>Bitrise</strong></a> is easy to set up and provides a comprehensive set of prebuilt steps for most mobile development needs.</p>"
"2018-11",Grafeas,Tools,Assess,"<p>We're continually on the lookout for tools and techniques that allow delivery teams to work independently from the rest of a larger organization while staying within its security and risk guardrails. <strong><a href=""https://github.com/grafeas/grafeas"">Grafeas</a></strong> is such a tool. It lets organizations publish authoritative metadata about software artifacts—Docker images, libraries, packages—that is then accessible from build scripts or other automated compliance controls. The access control mechanisms allow for a separation of responsibility between the teams that publish approvals or vulnerabilities and the teams that build and deploy software. Although several organizations, including Google and JFrog, use Grafeas in their workflows, note that the tool is still in alpha.</p>"
"2018-11",Heptio Ark,Tools,Assess,"<p><strong><a href=""https://github.com/heptio/ark"">Heptio Ark</a></strong> is a tool for managing disaster recovery for <a href=""/radar/platforms/kubernetes"">Kubernetes</a> clusters and persistent volumes. Ark is easy to use and configure and lets you back up and restore your clusters through a series of checkpoints. With Ark you can significantly reduce recovery time in case of an infrastructure failure, easily migrate Kubernetes resources from one cluster to another and replicate the production environment for testing and troubleshooting. Ark supports key backup <a href=""https://github.com/heptio/ark/blob/master/docs/support-matrix.md"">storage providers</a> (including AWS, Azure and Google Cloud) and, as of version 0.6.0, a plugin system that adds compatibility for additional backup and volume storage platforms. Managed Kubernetes environments, such as <a href=""/radar/platforms/gke"">GKE</a>, provide these services out of the box. However, if you're operating Kubernetes either on premise or in the cloud, take a closer look at Heptio Ark for disaster recovery.</p>"
"2018-11",Jaeger,Tools,Assess,"<p><strong><a href=""https://github.com/jaegertracing/jaeger"">Jaeger</a></strong> is an open source distributed tracing system. Similar to <a href=""/radar/tools/zipkin"">Zipkin</a>, it's been inspired by the Google <a href=""https://ai.google/research/pubs/pub36356"">Dapper</a> paper and complies with <a href=""https://opentracing.io/"">OpenTracing</a>. Jaeger is a younger open source project than Zipkin, but it's gained popularity quickly due to a larger number of supported languages for the client libraries and easy installation on <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. We've used Jaeger successfully with <a href=""/radar/platforms/istio"">Istio</a>, integrating application traces with <a href=""https://www.envoyproxy.io/"">Envoy</a> on Kubernetes, and like its <a href=""https://github.com/jaegertracing/jaeger-ui"">UI</a>. With Jaeger joining <a href=""https://www.cncf.io/blog/2017/09/13/cncf-hosts-jaeger/"">CNCF</a>, we anticipate a larger community engagement effort and deeper integration with other CNCF projects.</p>"
"2018-11",kube-bench,Tools,Assess,"<p><a href=""https://github.com/aquasecurity/kube-bench""><strong>kube-bench</strong></a> is an example of an <a href=""/radar/techniques/infrastructure-configuration-scanner"">infrastructure configuration scanner</a> that automates checking your Kubernetes configuration against the <a href=""https://www.cisecurity.org/benchmark/kubernetes/"">CIS benchmark for K8s</a>. It covers user authentication, permissions and secure data among other areas. Our teams have found kube-bench valuable in the identification of vulnerable configurations.</p>"
"2018-11",Ocelot,Tools,Assess,"<p><a href=""http://threemammals.com/ocelot""><strong>Ocelot</strong></a> is a .NET API gateway. After three years of development, Ocelot has built a relatively complete feature set and an active community. Although there is no dearth of excellent API gateways (e.g., <a href=""/radar/tools/kong-api-gateway"">Kong</a>), the .NET community appears to prefer Ocelot when building microservices. Part of the reason is that Ocelot integrates well with the .NET ecosystem (e.g., with IdentityServer). Another reason may be that the .NET community has extended Ocelot to support communication protocols such as gRPC, Orleans and WebSocket.</p>"
"2018-11",Optimal Workshop,Tools,Assess,"<p>UX research demands data collection and analysis to make better decisions about the products we need to build. <a href=""https://www.optimalworkshop.com""><strong>Optimal Workshop</strong></a> is a suite of tools that helps to do this digitally. Features such as first-click or card sorting help to both validate prototypes and improve website navigation and information display. For distributed teams, in particular, benefit from Optimal Workshop as it lets them conduct remote research.</p>"
"2018-11",Stanford CoreNLP,Tools,Assess,"<p>We have more and more projects that require unstructured data processing. To extract meaningful business information from text data is a key technique. <a href=""https://stanfordnlp.github.io/CoreNLP/""><strong>Stanford CoreNLP</strong></a> is a Java-based set of natural language processing tools. It supports named-entity recognition, relationship extraction, sentiment analysis and text classification as well as multiple languages, including English, Chinese and Arabic. We also find tools usable to label corpus and training models for our scenario. With Stanford CoreNLP, we were able to use the latest research in the field of NLP to solve various business problems.</p>"
"2018-11",Terragrunt,Tools,Assess,"<p>We widely use <a href=""/radar/tools/terraform"">Terraform</a> as code to configure a cloud infrastructure. <strong><a href=""https://github.com/gruntwork-io/terragrunt"">Terragrunt</a></strong> is a thin wrapper for Terraform that implements the practices advocated by the <a href=""https://www.oreilly.com/library/view/terraform-up-and/9781491977071/"">Terraform: Up and Running</a> book. We've found Terragrunt helpful as it encourages versioned modules and reusability for different environments with some handy features, including recursive code execution in subdirectories. We'd like to see the tool evolve to support CD practices natively, where all code can be packaged, versioned and reused across different environments on CD pipelines. Our team achieves this today with workarounds.</p>"
"2018-11",TestCafe,Tools,Assess,"<p>Our teams are reporting good success with <strong><a href=""https://devexpress.github.io/testcafe/"">TestCafe</a></strong>, a JavaScript-based browser test automation tool. TestCafe allows you to write tests in JavaScript or <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a> and runs tests in any browser that supports JavaScript. TestCafe has several useful features including out-of-the-box parallel execution and HTTP request mocking. TestCafe uses an asynchronous execution model with no explicit wait times, which results in much more stable test suites.</p>"
"2019-04",Chaos Engineering,Techniques,Trial,"<p>In the last year we've seen <strong>Chaos Engineering</strong> move from a much talked-about idea to an accepted, mainstream approach to improving and assuring distributed system resilience. As organizations large and small begin to implement Chaos Engineering as an operational process, we're learning how to apply these techniques safely at scale. The approach is definitely not for everyone, and to be effective and safe, it requires organizational support at scale. Industry acceptance and available expertise will definitely increase with the appearance of commercial services such as <a href=""/radar/tools/gremlin"">Gremlin</a> and deployment tools such as <a href=""/radar/tools/spinnaker"">Spinnaker</a> implementing some Chaos Engineering tools.</p>"
"2018-11",Traefik,Tools,Assess,"<p><a href=""https://traefik.io/""><strong>Traefik</strong></a> is an open-source reverse proxy and load balancer. If you're looking for an edge proxy that provides simple routing without all the features of <a href=""https://nginx.org"">NGINX</a> and <a href=""https://haproxy.org"">HAProxy</a>, Traefik is a good choice. The router provides a reload-less reconfiguration, metrics, monitoring and circuit breakers that are essential when running microservices. It also integrates nicely with <a href=""/radar/tools/let-s-encrypt"">Let's Encrypt</a> to provide SSL termination. When compared to Traefik, tools such as NGINX and HAProxy may require additional tooling to templatize configuration in response to scaling, adding or removing microservices and may, at times, require a restart which can be annoying in production environments.</p>"
"2018-11",Wallaby.js,Tools,Assess,"<p>We all obsess about fast feedback during test-driven development and we're always looking for new ways to make this even faster. <a href=""https://wallabyjs.com/""><strong>Wallaby.js</strong></a> is a commercial extension for popular editors that provides continuous execution of JavaScript unit tests, highlighting the results in line next to your code. The tool identifies and runs the minimum set of tests affected by each code change and lets you run tests continuously as you type.</p>"
"2019-04",Four key metrics,Techniques,Adopt,"<p>The thorough <a href=""https://devops-research.com/research.html"">State of DevOps</a> reports have focused on data-driven and statistical analysis of high-performing organizations. The result of this multiyear research, published in <a href=""https://itrevolution.com/book/accelerate/"">Accelerate</a>, demonstrates a direct link between organizational performance and software delivery performance. The researchers have determined that only <strong>four key metrics</strong> differentiate between low, medium and high performers: lead time, deployment frequency, mean time to restore (MTTR) and change fail percentage. Indeed, we've found that these four key metrics are a simple and yet powerful tool to help leaders and teams focus on measuring and improving what matters. A good place to start is to instrument the build pipelines so you can capture the four key metrics and make the software delivery value stream visible. <a href=""https://www.gocd.org/"">GoCD pipelines,</a> for example, provide the ability to measure these four key metrics as a first-class citizen of the <a href=""https://www.gocd.org/analytics.html"">GoCD analytics</a>.</p>"
"2019-04",Micro frontends,Techniques,Adopt,"<p>We've seen significant benefits from introducing <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create a frontend monolith — a large, entangled browser application that sits on top of the backend services — largely neutralizing the benefits of microservices. Since we first described <strong>micro frontends</strong> as a technique to address this issue, we've had almost universally positive experiences with the approach and have found a number of patterns to use micro frontends even as more and more code shifts from the server to the web browser. So far, <a href=""/radar/platforms/web-components-standard"">web components</a> have been elusive in this field, though.</p>"
"2019-04",Opinionated and automated code formatting,Techniques,Adopt,"<p>For as long as we can remember, what style to use for formatting code has been a matter of personal taste, company policy and heated debate. Finally, the industry appears to be tiring of this endless argument and teams are freeing up surprisingly large amounts of time by forgoing these discussions and just adopting <strong>opinionated and automated code formatting</strong> tools. Even if you don't agree 100% with the opinions of the various tools, the benefits of focusing on what your code does rather than how it looks is something most teams should be able to get behind. <a href=""/radar/tools/prettier"">Prettier</a> has been getting our vote for JavaScript, but similar tools, such as <a href=""https://github.com/ambv/black"">Black</a> for Python, are available for many other languages and are increasingly being built-in as we see with <a href=""https://golang.org/cmd/gofmt/"">Golang</a> and <a href=""https://elixir-lang.org/blog/2018/01/17/elixir-v1-6-0-released/"">Elixir</a>. The key here is not to spend hours discussing which rules to enforce, but instead pick a tool that is opinionated, minimally configurable and automated — ideally as a pre-commit hook.</p>"
"2019-04",Polyglot programming,Techniques,Adopt,"<p>We put <strong>polyglot programming</strong> on Trial in one of our first Radars to suggest that choosing the right language for the job could significantly boost productivity, and there were new language entrants that were worthy of consideration. We want to reraise this suggestion because we're seeing a new push to standardize language stacks by both developers and enterprises. While we acknowledge that placing no restrictions on language uses can create more problems than it solves, promoting a few languages that support different ecosystems or language features is important for both enterprises to accelerate processes and go live more quickly and developers to have the right tools to solve the problem at hand.</p>"
"2019-04",Secrets as a service,Techniques,Adopt,"<p>Humans and machines use secrets throughout the value stream of building and operating software. The build pipelines need secrets to interface with secure infrastructures such as container registries, the applications use API keys as secrets to get access to business capabilities, and the service-to-service communications are secured using certificates and keys as secrets. You can set and retrieve these secrets in different ways. We've long cautioned developers about using source code management for storing secrets. We've recommended <a href=""/radar/techniques/decoupling-secret-management-from-source-code"">decoupling secret management from source code</a> and using tools such as <a href=""/radar/tools/git-secrets"">git-secrets</a> and <a href=""/radar/tools/talisman"">Talisman</a> to avoid storing secrets in the source code. We've been using <strong>secrets as a service</strong> as a default technique for storing and accessing secrets. With this technique you can use tools such as <a href=""/radar/tools/hashicorp-vault"">Vault</a> or <a href=""https://aws.amazon.com/kms/"">AWS Key Management Service (KMS)</a> to read/write secrets over an HTTPS endpoint with fine-grained levels of access control. Secrets as a service uses external identity providers such as <a href=""https://aws.amazon.com/iam/"">AWS IAM</a> to identify the actors who request access to secrets. Actors authenticate themselves with the secrets service. For this process to work, it's important to automate bootstrapping the identity of the actors, services and applications. Platforms based on <a href=""/radar/platforms/spiffe"">SPIFFE</a> have improved the automation of assigning identities to services.</p>"
"2019-04",Puppeteer,languages-and-frameworks,Trial,"<p>Much like <a href=""/radar/tools/cypress"">Cypress</a> and <a href=""/radar/tools/testcafe"">TestCafe</a>, <strong><a href=""https://pptr.dev/"">Puppeteer</a></strong> is one of the web UI testing tools garnering praise from our teams. Puppeteer can have fine-grained control over headless browsers, obtain time-trace for performance diagnostics and more. Our teams have found Puppeteer to be stable as well as faster and more flexible than alternatives based on WebDriver.</p>"
"2019-04",Container security scanning,Techniques,Trial,"<p>The container revolution around <a href=""/radar/platforms/docker"">Docker</a> has massively reduced the friction in moving applications between environments, fueling increased adoption of continuous delivery and continuous deployments. The latter, especially, has blown a rather large hole in the traditional controls over what can go to production. The technique of <strong>container security scanning</strong> is a necessary response to this threat vector. Tools in the build pipeline automatically check containers flowing through the pipeline against known vulnerabilities. Since our first mention of this technique, the tool landscape has matured and the technique has proven useful on development efforts with our clients.</p>"
"2019-04",Continuous delivery for machine learning (CD4ML),Techniques,Trial,"<p><strong>Continuous delivery for machine learning (CD4ML)</strong> apply continuous delivery practices to developing machine learning models so that they are always ready for production. This technique addresses two main problems of traditional machine learning model development: long cycle time between training models and deploying them to production, which often includes manually converting the model to production-ready code; and using production models that had been trained with stale data.</p><p>A continuous delivery pipeline of a machine learning model has two triggers: (1) changes to the structure of the model and (2) changes to the training and test data sets. For this to work we need to both version <a href=""/radar/techniques/versioning-data-for-reproducible-analytics"">the data sets</a> and the model's source code. The pipeline often includes steps such as testing the model against the test data set, applying automatic conversion of the model (if necessary) with tools such as <a href=""https://www.h2o.ai/"">H2O</a>, and deploying the model to production to deliver value.</p>"
"2019-04",Crypto shredding,Techniques,Trial,"<p>Maintaining proper control over sensitive data is difficult, especially when it's copied outside of a master system of record for backup and recovery purposes. <strong>Crypto shredding</strong> is the practice of rendering sensitive data unreadable by deliberately overwriting or deleting encryption keys used to secure that data. Considering there are systems, such as audit application or blockchain, that should not or could not delete historical records, this technique is quite useful for privacy protection and <a href=""https://www.thoughtworks.com/insights/blog/gdpr-it-s-time-rethink-your-approach-privacy"">GDPR</a> compliance.</p>"
"2019-04",Infrastructure configuration scanner,Techniques,Trial,"<p>For some time now we've recommended that delivery teams take ownership of their entire stack, including infrastructure. This means increased responsibility in the delivery team itself for configuring the infrastructure in a safe, secure and compliant way. When adopting cloud strategies, most organizations default to a tightly locked-down and centrally managed configuration to reduce risk, but this also creates substantial productivity bottlenecks. An alternative approach is to allow teams to manage their own configuration and use an <strong>infrastructure configuration scanner</strong> to ensure the configuration is safe and secure. Options include open-source scanners such as <a href=""https://github.com/toniblyx/prowler"">prowler</a> for <a href=""/radar/platforms/aws"">AWS</a> and <a href=""/radar/tools/kube-bench"">kube-bench</a> for <a href=""/radar/platforms/kubernetes"">Kubernetes</a> installations. For more continuous detection, take a look at cloud platforms such as AWS Config Rules among other commercial services.</p>"
"2019-04",Service mesh,Techniques,Trial,"<p><strong>Service mesh</strong> is an approach to operating a secure, fast and reliable microservices ecosystem. It has been an important stepping stone in making it easier to adopt microservices at scale. It offers discovery, security, tracing, monitoring and failure handling. It provides these cross-functional capabilities without the need for a shared asset such as an API gateway or baking libraries into each service. A typical implementation involves lightweight reverse-proxy processes, aka sidecars, deployed alongside each service process in a separate container. Sidecars intercept the inbound and outbound traffic of each service and provide cross-functional capabilities mentioned above. This approach has relieved the distributed service teams from building and updating the capabilities that the mesh offers as code in their services. This has lead to an even easier adoption of <a href=""/radar/techniques/polyglot-programming"">polyglot programming</a> in a microservices ecosystem. Our teams have been successfully using this approach with open source projects such as <a href=""/radar/platforms/istio"">Istio</a> and we will continue to monitor other open service mesh implementations such as <a href=""http://linkerd.io/"">Linkerd</a> closely.</p>"
"2019-04",Ethical OS,Techniques,Assess,"<p>As developers at ThoughtWorks we're acutely aware of the ethics of the work we do. As society becomes ever more reliant on technology, it's important that we consider ethics when making decisions as software development teams. Several toolkits have emerged that can help us think through some of the future implications of the software we're building. They include <a href=""http://tarotcardsoftech.artefactgroup.com/"">Tarot Cards of Tech</a> and <strong><a href=""https://ethicalos.org/"">Ethical OS</a></strong>, which we've had good feedback on. Ethical OS is a thinking framework and a set of tools that drive discussions around the ethics of building software. The framework is a collaboration between the Institute for the Future and the Tech and Society Solutions Lab. It's based on a practical set of risk zones, such as addiction and the <a href=""https://eand.co/the-dopamine-economy-336b239272ef"">dopamine economy</a>, plus a number of scenarios to drive conversation and discussion.</p>"
"2019-04",Smart contracts,Techniques,Assess,"<p>The more experience we gain with using distributed ledger technologies (DLTs), the more we encounter the rough edges around the current state of <strong><a href=""https://en.wikipedia.org/wiki/Smart_contract"">smart contracts</a></strong>. Committing automated, irrefutable, irreversible contracts on ledger sounds great in theory. The problems arise when you consider how to use modern software delivery techniques to developing them, as well as the differences between implementations. Immutable data is one thing, but immutable business logic is something else entirely! It's really important to think about whether to include logic in a smart contract. We've also found very different operational characteristics between different implementations. For example, even though contracts can evolve, different platforms support this evolution to a greater or lesser extent. Our advice is to think long and hard before committing business logic to a smart contract and to weigh the merits of the different platforms before you do.</p>"
"2019-04",Transfer learning for NLP,Techniques,Assess,"<p>Transfer learning has been quite effective within the field of computer vision, speeding the time to train a model by reusing existing models. Those of us who work in machine learning are excited that the same techniques can be applied to natural language processing (NLP) with the publication of <a href=""https://arxiv.org/abs/1801.06146"">ULMFiT</a> and open source pretrained models and code examples. We think <strong>transfer learning for NLP</strong> will significantly reduce the effort to create systems dealing with text classification.</p>"
"2019-04",Wardley mapping,Techniques,Assess,"<p>We're usually wary of covering diagrammatic techniques, but <strong><a href=""https://medium.com/wardleymaps"">Wardley mapping</a></strong> is an interesting approach to start conversations around the evolution of an organization's software estate. At their simplest, they're used to visualize the value chains that exist within an organization, starting with customers' needs and progressively plotting the different capabilities and systems used to deliver on those needs along with the evolution of those capabilities and systems. The value of this technique is the process of collaborating to create the maps rather than the artefact itself. We recommend getting the right people in the room to produce them, and then treat them as living, evolving things rather than a complete artefact.</p>"
"2019-04",Productionizing Jupyter Notebooks,Techniques,Hold,"<p><a href=""/radar/tools/jupyter"">Jupyter Notebooks</a> have gained in popularity among data scientists who use them for exploratory analyses, early-stage development and knowledge sharing. This rise in popularity has led to the trend of <strong>productionizing Jupyter Notebooks</strong>, by providing the tools and support to execute them at scale. Although we wouldn't want to discourage anyone from using their tools of choice, we don't recommend using Jupyter Notebooks for building scalable, maintainable and long-lived production code — they lack effective version control, error handling, modularity and extensibility among other basic capabilities required for building scalable, production-ready code. Instead, we encourage developers and data scientists to work together to find solutions that empower data scientists to build production-ready machine learning models using <a href=""/radar/techniques/continuous-delivery-for-machine-learning-cd4ml-models"">continuous delivery</a> practices with the right programming frameworks. We caution against productionization of Jupyter Notebooks to overcome inefficiencies in continuous delivery pipelines for machine learning, or inadequate automated testing.</p>"
"2019-04",Puncturing encapsulation with change data capture,Techniques,Hold,"<p><a href=""https://en.wikipedia.org/wiki/Change_data_capture"">Change data capture</a> (CDC) is a very powerful technique for pulling database changes out of a system and performing some actions on that data. One of the most popular ways of doing this is to use the database's transaction log to identify changes and then publish those changes directly onto an event bus that can be consumed by other services. This works very well for use cases such as <a href=""https://martinfowler.com/articles/break-monolith-into-microservices.html"">breaking monoliths into microservices</a> but when used for first-class integration between microservices, this leads to puncturing encapsulation and leaking the source service's data layer into the event contract. We've talked about <a href=""/radar/techniques/domain-scoped-events"">domain scoped events</a> and other techniques that emphasize the importance of having our events model our domain properly. We're seeing some projects use CDC for publishing row-level change events and directly consuming these events in other services. This <strong>puncturing of encapsulation with change data capture</strong> can be a slippery slope leading to fragile integrations and we would like to call this out with this blip.</p>"
"2019-04",Release train,Techniques,Hold,"<p>We've seen organizations successfully move from very infrequent releases to a higher cadence by using the <strong>release train</strong> concept. The release train is a technique for coordinating releases across multiple teams or components that have runtime dependencies. All releases happen on a fixed and reliable schedule regardless of whether all expected features are ready (the train doesn't wait for you — if you miss it you wait for the next one). Although we wholeheartedly endorse discipline around regularly releasing and demoing working software, we've experienced serious drawbacks with the approach over the medium to long term as it reinforces temporal coupling around sequencing of changes and can degrade quality as teams rush to complete features. We prefer to focus on the architectural and organizational approaches necessary to support independent releases. Although the train can be a useful forcing function for speeding up slower teams, we've also seen it as imposing an upper limit on how quickly faster-moving teams can move. We believe that it is a technique that should be approached with a good degree of caution, if at all.</p>"
"2019-04",Templating in YAML,Techniques,Hold,"<p>As infrastructures grow in complexity, so do the configuration files that define them. Tools such as <a href=""https://aws.amazon.com/cloudformation/"">AWS CloudFormation</a>, <a href=""/radar/platforms/kubernetes"">Kubernetes</a> and <a href=""/radar/tools/helm"">Helm</a> expect configuration files in JSON or YAML syntax, presumably in an attempt to make them easy to write and process. However, in most cases, teams quickly reach the point where they have some parts that are similar but not quite the same, for example, when the same service must be deployed in different regions with a slightly different setup. For such cases tools offer <strong>templating in YAML</strong> (or JSON), which has caused a huge amount of <a href=""https://leebriggs.co.uk/blog/2019/02/07/why-are-we-templating-yaml.html"">frustration with practitioners</a>. The problem is that the syntax of JSON and YAML requires all sorts of awkward compromises to graft templating features such as conditionals and loops into the files. We recommend using an API from a programming language instead or, when this is not an option, a templating system in a programming language, either a general-purpose language such as Python or something specialized such as <a href=""https://jsonnet.org/"">Jsonnet</a>.</p>"
"2019-04",Contentful,Platforms,Adopt,"<p>Headless content management systems (CMSes) are becoming a common component of digital platforms. <a href=""http://www.contentful.com/""><strong>Contentful</strong></a> is a modern headless CMS that our teams have successfully integrated into their development workflows. We particularly like its API-first approach and implementation of <a href=""http://www.contentful.com/r/knowledgebase/cms-as-code/"">CMS as code</a>. It supports powerful content modeling primitives as code and content model evolution scripts, which allow it to be treated like other data store schemas and enable <a href=""http://martinfowler.com/articles/evodb.html"">evolutionary database design</a> practices to be applied to CMS development. Its robustness and a stream of new features, including a sandbox environment, have impressed our teams further and made Contentful our default choice in this space.</p>"
"2019-04",AWS Fargate,Platforms,Trial,"<p><strong><a href=""http://aws.amazon.com/fargate/"">AWS Fargate</a></strong>, the docker-as-a-service option on <a href=""/radar/platforms/aws"">AWS</a>, is now widely available across regions. It's a great solution for situations in which teams want to run Docker containers, because <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> functions aren't powerful enough, without having to manage EC2 instances or Kubernetes clusters. Our teams report generally positive experiences with Fargate; however, the convenience of this managed service can come at a cost, in financial terms.</p>"
"2019-04",EVM beyond Ethereum,Platforms,Trial,"<p><a href=""https://github.com/ethereum/wiki/wiki/Ethereum-Virtual-Machine-(EVM)-Awesome-List"">Ethereum Virtual Machine (EVM)</a> was originally designed for the <a href=""/radar/platforms/ethereum"">Ethereum</a> main network. Nowadays, however, most teams no longer want to reinvent blockchain from scratch; instead, they'd like to take <strong>EVM beyond Ethereum</strong>. We've seen a lot of blockchain teams choose to fork Ethereum (e.g., <a href=""/radar/platforms/quorum"">Quorum</a>) or implement the EVM spec (e.g., <a href=""https://github.com/hyperledger/burrow"">Burrow</a>, <a href=""https://github.com/PegaSysEng/pantheon"">Pantheon</a>), adding their own designs. The intention is to not only reuse the Ethereum design but also leverage its ecosystem and developer community. To many developers, the concept of ""smart contract"" is almost equivalent to a smart contract written in <a href=""/radar/languages-and-frameworks/solidity"">Solidity</a>. Although Ethereum itself has some constraints, the technology around the EVM ecosystem is booming.</p>"
"2019-04",InfluxDB,Platforms,Trial,"<p><a href=""/radar/platforms/time-series-databases"">Time series databases</a> (TSDBs) have been around for some time now. But increasingly they're becoming more mainstream as more use cases naturally fit the time series model. <a href=""https://github.com/influxdata/influxdb""><strong>InfluxDB</strong></a> continues to remain a good choice for TSDBs with monitoring being one of its key use cases. <a href=""/radar/platforms/tick-stack"">TICK Stack</a> is an example of a monitoring solution that has InfluxDB at its heart. Influx 2.0 alpha recently introduced Flux — a scripting language for querying and processing time series data. It's still early days for Flux and the jury's out on its <a href=""https://medium.com/timescale/sql-vs-flux-influxdb-query-language-time-series-database-290977a01a8a"">broader adoption beyond InfluxDB</a>, but it promises to be more powerful and expressive than InfluxQL and enables pushing time series analytic workloads to the database. However, clustering support for InfluxDB is only available with the enterprise version which has limited its adoption on some of our projects.</p>"
"2019-04",Istio,Platforms,Trial,"<p><strong><a href=""https://istio.io/"">Istio</a></strong> is becoming the de facto infrastructure to operationalize a <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a> ecosystem. Its out-of-the-box implementation of cross-cutting concerns — such as service discovery, service-to-service and origin-to-service security, observability (including telemetry and distributed tracing), rolling releases and resiliency — has been bootstrapping our microservices implementations very quickly. It's the main implementation of the <a href=""/radar/techniques/service-mesh"">service mesh</a> technique we've been using. We've been enjoying its monthly releases and its continuous improvements with seamless upgrades. We use Istio to bootstrap our projects, starting with observability (tracing and telemetry) and service-to-service security. We're closely watching its improvements to service-to-service authentication everywhere in and outside of the mesh. We'd also like to see Istio establish best practices for configuration files to strike a balance between giving autonomy to service developers and control to the service mesh operators.</p>"
"2019-04",Kafka Streams,Platforms,Trial,"<p><strong><a href=""https://kafka.apache.org/documentation/streams/"">Kafka Streams</a></strong> is a lightweight library to build streaming applications. It supports basic streaming APIs such as join, filter, map and aggregate as well as local storage for common use cases such as windowing and sessions. Unlike other stream-processing platforms such as <a href=""/radar/platforms/apache-spark"">Apache Spark</a> and <a href=""https://doc.akka.io/docs/akka-stream-kafka/current/home.html"">Alpakka Kafka</a>, Kafka Streams has been a good fit for scenarios that don't require large-scale distribution and parallel processing; hence we could get away without yet another piece of infrastructure such as cluster schedulers. Naturally, Kafka Streams has been a good choice when operating in the Kafka ecosystem. Kafka Streams is particularly useful when we have to process data strictly in order and exactly once. One particular use case of Kafka Streams is to build a <a href=""https://en.wikipedia.org/wiki/Change_data_capture#Event_Programming"">change data capture (CDC)</a> platform.</p>"
"2019-04",Nomad,Platforms,Trial,"<p>HashiCorp continues to release interesting software. We've featured <a href=""/radar/tools/hashicorp-vault"">HashiCorp Vault</a> in March 2017, and tools related to Terraform are all over this edition of the Radar. We've moved <strong><a href=""https://www.nomadproject.io/"">Nomad</a></strong> to Trial because we've had positive experiences using it. While <a href=""/radar/platforms/kubernetes"">Kubernetes</a> continues to gain traction, we like Nomad's general applicability. It's not just limited to running containerized workloads but can be used to schedule just about anything. Java and Golang are supported natively as well as batch and distributed cron jobs. We like its focus on multi- and hybrid-cloud operations, something likely to become more important to avoid sticky clouds and the fact that it does scheduling well.</p>"
"2019-04",CloudEvents,Platforms,Assess,"<p>Outside the function code itself, applications written as serverless functions are tightly coupled to the cloud platform on which they're hosted. Although events are a common FaaS-triggering mechanism, and every cloud provider supports them in some form, the current proprietary specifications prevent interoperability across clouds. The <strong><a href=""https://cloudevents.io/"">CloudEvents</a></strong> specification is a burgeoning standard that has been accepted into the <a href=""https://www.cncf.io/sandbox-projects/"">CNCF Sandbox</a>. The standard is still in active development but several language bindings exist and Microsoft has announced first-class support in <a href=""/radar/platforms/azure"">Azure</a>. We're hoping other cloud providers will follow suit.</p>"
"2019-04",Cloudflare Workers,Platforms,Assess,"<p>Most modern server-side or serverless code execution platforms are centered around containers or VMs. <strong><a href=""https://www.cloudflare.com/products/cloudflare-workers/"">Cloudflare Workers</a></strong>, however, takes a different approach to hosting a serverless computing offering. It uses <a href=""https://v8docs.nodesource.com/node-10.6/d5/dda/classv8_1_1_isolate.html"">V8 Isolates</a>, the open source JavaScript engine developed for Chrome, to run functions as a service (FaaS) on their extensive CDN network. Code can be written in JavaScript or anything that compiles to <a href=""/radar/languages-and-frameworks/webassembly"">WebAssembly</a> and data can be accessed from Cloudflare's cache or key-value store. The major benefit for developers is performance: by being on the edge network, close to end users, cold-starts take only five milliseconds. For the provider the benefits include both the ability to densely pack isolates because of their lower memory overhead and faster performance through reduced process context switching. This is definitely an intriguing approach to monitor and assess.</p>"
"2019-04",Deno,Platforms,Assess,"<p>As a group we have mixed feelings about programming in JavaScript on the server side, especially when the rationale for doing so is simply to avoid <a href=""/radar/techniques/polyglot-programming"">polyglot programming</a>. That said, if you decide to use JavaScript or TypeScript on the server, have a look at <strong><a href=""https://deno.land/"">Deno</a></strong>. Written by Ryan Dahl, the inventor of Node.js, Deno aims to avoid what Ryan considers mistakes that were made in Node.js. It brings a strict sandbox system and built-in dependency and package management, and it supports <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a> out of the box. Deno is built using <a href=""/radar/languages-and-frameworks/rust"">Rust</a> and V8.</p>"
"2019-04",Hot Chocolate,Platforms,Assess,"<p>The <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> ecosystem and community keep growing. <strong><a href=""https://hotchocolate.io/"">Hot Chocolate</a></strong> is a GraphQL server for .NET (core and classic). It lets you build and host schemas and then serve queries against them. The team behind Hot Chocolate has recently added schema stitching which allows for a single entry point to query across multiple schemas aggregated from different locations. Although there are plenty of ways to misuse this approach, it's worth assessing whether to add it to your toolkit.</p>"
"2019-04",Knative,Platforms,Assess,"<p>The <a href=""/radar/techniques/serverless-architecture"">serverless architecture</a> has popularized a FaaS style of programming among developers; it helps developers focus on solving core business problems with independently built and deployed functions that react to an event, run a business process, produce other events in the process and scale down to zero. Historically, proprietary serverless platforms such as <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> or Microsoft <a href=""https://azure.microsoft.com/en-us/services/functions/"">Azure Functions</a> have enabled this programming paradigm. <strong><a href=""https://www.knative.dev/"">Knative</a></strong> is an open-source Kubernetes-based platform to run FaaS workloads. There are few things that stand out about Knative: it's open source and provider agnostic; it implements the serverless workflow as described in the CNCF Serverless Working Group <a href=""https://github.com/cncf/wg-serverless/tree/master/whitepapers/serverless-overview"">whitepaper</a>; it ensures cross-service interoperability by implementing its eventing interface consistent with <a href=""https://github.com/cloudevents/spec/blob/master/spec.md#design-goals"">CNCF CloudEvents</a> specification; and, most importantly, it addresses a common challenge of operating a harmonized and yet hybrid FaaS and long-running container-based architecture. It easily integrates with both <a href=""/radar/platforms/istio"">Istio</a> and <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. For example, developers can take advantage of roll-out strategies that Istio implements by traffic splitting between different revisions of the functions. Developers can take benefit of Istio-provided observability not only for long-running container services but also for FaaS programs in the same Kubernetes environment. We anticipate that Knative open-source eventing interface will continue to enable new underlying source and destination event integrations.</p>"
"2019-04",MinIO,Platforms,Assess,"<p>Object storage is a popular choice for storing unstructured data and in a few cases structured data in the cloud. We do discourage the use of <a href=""/radar/techniques/generic-cloud-usage"">generic cloud</a> but if you want to minimize the risk of cloud stickiness for object storage, we've found <strong><a href=""https://min.io/"">MinIO</a></strong> quite helpful. With an S3-compatible API layer, MinIO abstracts object storage across cloud providers, including <a href=""/radar/platforms/aws"">AWS</a>, <a href=""/radar/platforms/azure"">Azure</a> and <a href=""/radar/platforms/google-cloud-platform"">Google Cloud Platform</a> (GCP), and we've used it successfully in products with flexible target infrastructures from data centers to cloud providers.</p>"
"2019-04",Prophet,Platforms,Assess,"<p>Even in the era of deep learning, statistical models still play a role in business decision support. Time series models are widely used to forecast inventories, demand, customer traffic, and so on. Hand-crafting these models so that they're robust and flexible has typically been the role of either specialized statisticians or large commercial software vendors. <strong><a href=""https://facebook.github.io/prophet/"">Prophet</a></strong> is an open-source alternative to commercial forecasting packages that can be programmed in R or Python. Facebook claims to use Prophet internally for business forecasting at scale and has made it available as an open-source package for anyone to use. We like that Prophet removes some of the tedium of model construction, maintenance and data manipulation so that human analysts and subject matter experts can focus on doing what they do best.</p>"
"2019-04",Quorum,Platforms,Assess,"<p><strong><a href=""https://www.jpmorgan.com/global/Quorum"">Quorum</a></strong> is ""an enterprise-focused version of Ethereum"" that aims to provide network permissioning and transaction privacy as well as higher performance. One of our teams has worked deeply with Quorum; however, their experience so far hasn't been great. Some challenges result from <a href=""/radar/techniques/smart-contracts"">complex smart contract programming</a> and some come from Quorum itself. For example, it doesn't work well with load balancers and only has partial database support, which will lead to significant deployment burden. We faced some stability and compatibility issues especially on private transactions. Quorum recently attracted a lot of attention because of <a href=""https://www.jpmorgan.com/global/news/digital-coin-payments"">JPM Coin</a>. However, from a tech perspective, we recommend being cautious when implementing Quorum while keeping an eye on its development.</p>"
"2019-04",SPIFFE,Platforms,Assess,"<p><strong><a href=""https://spiffe.io/"">SPIFFE</a></strong> standardization of service identity has been an important step in enabling turnkey solutions for end-to-end encryption and mutual authentication between services. The SPIFFE standards are backed by the OSS <a href=""https://github.com/spiffe/spire"">SPIFFE Runtime Environment (SPIRE)</a>, which automatically delivers cryptographically provable identities to services. <a href=""/radar/platforms/istio"">Istio</a> also uses SPIFFE by default. SPIFFE enables many use cases, including identity translation, OAuth client authentication, mTLS ""encryption everywhere"" and workload observability. ThoughtWorks is actively working with the Istio and SPIFFE communities to bridge the gap between legacy service identity providers and SPIFFE-based identities so that mTLS can be used everywhere between services, inside a service mesh and outside.</p>"
"2019-04",Tendermint,Platforms,Assess,"<p><a href=""https://en.wikipedia.org/wiki/Byzantine_fault"">Byzantine fault tolerance (BFT)</a> is one of the fundamental problems in cryptocurrency and blockchain systems. It requires overall system agreement on a single data value in the presence of a number of arbitrary faulty processes, which includes malicious fraud. <strong><a href=""https://www.tendermint.com/"">Tendermint</a></strong> is a BFT state machine replication engine that lets you implement your own blockchain systems. The consensus engine, Tendermint Core, takes over the peer-to-peer communication and consensus part, you just need to implement the rest of the application (e.g., construct transaction and verify cryptographic signature) and communicate with Tendermint Core through <a href=""https://github.com/tendermint/tendermint/tree/master/abci"">ABCI</a>. Some blockchain <a href=""https://tendermint.com/ecosystem"">implementations</a> have already chosen Tendermint as their consensus engine.</p>"
"2019-04",TimescaleDB,Platforms,Assess,"<p>In previous Radars we've discussed <a href=""/radar/platforms/postgresql-for-nosql"">PostgreSQL for NoSQL</a>. PostgreSQL's maturity and extensibility have led to a steady stream of innovative persistence stores built on the Postgres engine. One that caught our attention is <strong><a href=""https://www.timescale.com/"">TimescaleDB</a></strong>, a database that allows fast writes and optimized queries over time-series data. Albeit not (yet) as full-featured as <a href=""/radar/platforms/influxdb"">InfluxDB</a>, TimescaleDB offers an alternative data model and querying capability. You should evaluate TimescaleDB if you have modest scalability needs, prefer to use SQL and appreciate the stability and familiar administrative interface that PostgreSQL offers.</p>"
"2019-04",Apollo,languages-and-frameworks,Adopt,"<p>Our teams report that <strong><a href=""http://www.apollographql.com/client"">Apollo</a></strong> has become the library of choice when building a <a href=""/radar/languages-and-frameworks/react-js"">React</a> application that uses GraphQL to access data from a <a href=""/radar/techniques/bff-backend-for-frontends"">back-end</a> service. Although the Apollo project also provides a server framework and a GraphQL gateway, the Apollo client gets our attention because it simplifies the problem of binding UI components to data served by any GraphQL backend. Put simply, this means less code needs to be written than using REST backends and redux.</p>"
"2019-04",MockK,languages-and-frameworks,Adopt,"<p><strong><a href=""https://mockk.io"">MockK</a></strong> is our go-to tool for mocks when writing tests for <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> applications. We like to use this library because of its first-class support for Kotlin language features such as <a href=""https://kotlinlang.org/docs/reference/coroutines-overview.html"">coroutines</a> or lambda blocks. As a native library, it helps our teams to write clean and concise code on testing Kotlin applications instead of using the inconvenient wrappers of Mockito or PowerMock.</p>"
"2019-04",TypeScript,languages-and-frameworks,Adopt,"<p><strong><a href=""https://www.typescriptlang.org/"">TypeScript</a></strong>, a statically typed language and superset of JavaScript, has become our sensible default. Large-scale projects benefit most from the type safety. Our developers favor its minimal configuration management, well-integrated IDE support and its ability to refactor code safely and gradually adopt types. With its <a href=""https://definitelytyped.org/"">good repository</a> of TypeScript-type definitions at hand, we benefit from all the rich JavaScript libraries while gaining type safety.</p>"
"2019-04",Apache Beam,languages-and-frameworks,Trial,"<p><strong><a href=""https://beam.apache.org/"">Apache Beam</a></strong> is an open-source unified programming model for defining and executing both batch and streaming data parallel processing pipelines. The Beam model is based on the <a href=""http://www.vldb.org/pvldb/vol8/p1792-Akidau.pdf"">Dataflow model</a> which allows us to express logic in an elegant way so that we can easily switch between batch, windowed batch or streaming. The big data-processing ecosystem has been evolving quite a lot which can make it difficult to choose the right data-processing engine. One of the key reasons to choose Beam is that it allows us to switch between different runners — a few months ago <a href=""http://samza.apache.org/"">Apache Samza</a> was added to the other runners it already supports, which include <a href=""https://spark.apache.org/"">Apache Spark</a>, <a href=""https://flink.apache.org/"">Apache Flink</a> and <a href=""/radar/platforms/google-cloud-dataflow"">Google Cloud Dataflow</a>. Different runners have different capabilities and providing a portable API is a difficult task. Beam tries to strike a delicate balance by actively pulling innovations from these runners into the Beam model and also working with the community to influence the roadmap of these runners. Beam has SDKs in multiple languages including Java, Python and Golang. We've also had success using <a href=""https://github.com/spotify/scio"">Scio</a> which provides a Scala wrapper around Beam.</p>"
"2019-04",Formik,languages-and-frameworks,Trial,"<p><strong><a href=""https://jaredpalmer.com/formik/"">Formik</a></strong> is a useful higher-order component for making the surprisingly verbose and complex job of handling forms in <a href=""/radar/languages-and-frameworks/react-js"">React</a> much easier. It localizes state management, assists with submission and optionally uses <a href=""https://www.npmjs.com/package/yup"">Yup</a> to simplify data validation.</p>"
"2019-04",HiveRunner,languages-and-frameworks,Trial,"<p><strong><a href=""https://github.com/klarna/HiveRunner"">HiveRunner</a></strong> is an open-source unit test framework for Apache Hadoop <a href=""/radar/languages-and-frameworks/hive"">Hive</a> queries based on JUnit4. When writing nontrivial analytics or data pipelines in Hive SQL, we found HiveRunner to be a good enabler for writing tests and even TDDing out some moderately complicated SQL. HiveRunner enables you to write Hive SQL as releasable tested artifacts.</p>"
"2019-04",joi,languages-and-frameworks,Trial,"<p><strong><a href=""https://github.com/hapijs/joi"">joi</a></strong> is a schema description language and validator for JavaScript objects. We like that joi is independent of any web application framework, so our teams can use the same schemas across different stacks. You can also use companion libraries to generate Swagger documentation for APIs that validate requests with joi schemas.</p>"
"2019-04",Ktor,languages-and-frameworks,Trial,"<p><a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> has demonstrated its value beyond mobile app development. When building microservices and shipping software to production, our teams have had good experiences with Ktor. <strong><a href=""https://ktor.io"">Ktor</a></strong> is a framework that, unlike other web frameworks that support Kotlin, is written in Kotlin, using language features such as <a href=""https://kotlinlang.org/docs/reference/coroutines-overview.html"">coroutines</a> which allow for an asynchronous nonblocking implementation. The flexibility to incorporate different tools for logging, DI or a template engine — in addition to its lightweight architecture — makes Ktor an interesting option for creating RESTful services.</p>"
"2019-04",Laconia,languages-and-frameworks,Trial,"<p><strong><a href=""https://laconiajs.io/"">Laconia</a></strong> is a framework for developing <a href=""/radar/platforms/aws-lambda"">AWS Lambda</a> functions in JavaScript. As interest and use of serverless tech has grown so has the complexity of the applications being built. Laconia is a small, lightweight framework that takes away some of the rough edges we often encounter. It uses dependency injection to isolate your application code from lower-level AWS APIs and provides adaptors for the different events that your application can respond too. It also plays nicely with the <a href=""/radar/tools/serverless-framework"">Serverless Framework</a> at deploy time. We like small and simple frameworks and Laconia is just that.</p>"
"2019-04",Reactor,languages-and-frameworks,Trial,"<p>We've talked about <strong><a href=""http://projectreactor.io"">Reactor</a></strong> in the previous Radars. It has continued to gain traction in many of our projects. With the Spring ecosystem embracing Reactor, it has become the dominant implementation of <a href=""http://www.reactive-streams.org/"">Reactive Streams</a>. Reactive systems come with improved scalability and resilience but with increased cost of debugging and a steeper learning curve. For those projects where this tradeoff is acceptable, Reactor has proven to be a good choice. Some of our projects have observed significant improvements in scalability once they moved to Reactor and the rest of the Reactive stack. With <a href=""http://r2dbc.io/"">R2DBC</a> we are starting to get reactive support for RDBMS drivers which addresses one of the weaknesses of reactive services.</p>"
"2019-04",Resilience4j,languages-and-frameworks,Trial,"<p><a href=""https://github.com/resilience4j/resilience4j""><strong>Resilience4j</strong></a> is a lightweight fault tolerance library inspired by Netflix <a href=""/radar/tools/hystrix"">Hystrix</a>. We like its lightweight and modular structure where we pull in specific modules for specific capabilities such as circuit-breaking, rate-limiting, retry, and bulkhead. While <a href=""/radar/techniques/service-mesh"">service meshes</a> are taking on some of the fault tolerance capabilities, fault tolerance libraries continue to remain a key component of our systems for more nuanced domain-specific fault tolerance behavior and for non-containerized services. With Hystrix going into <a href=""https://github.com/Netflix/Hystrix/commit/a7df971cbaddd8c5e976b3cc5f14013fe6ad00e6#diff-04c6e90faac2675aa89e2176d2eec7d8"">maintenance mode</a>, Resilience4j becomes a default choice in the Java ecosystem. It can work with synchronous APIs as well as reactive ones. It also surfaces metrics to <a href=""https://metrics.dropwizard.io/4.0.0/"">dropwizard metrics</a>, <a href=""/radar/tools/prometheus"">Prometheus</a> and others using additional modules.</p>"
"2019-04",Room,languages-and-frameworks,Trial,"<p><strong><a href=""https://developer.android.com/topic/libraries/architecture/room"">Room</a></strong> is a persistence library to access SQLite on Android. It makes database access code much simpler, with minimal boilerplate code, and more robust, with compile-time verification of SQL queries. Our developers like its complete integration with observable queries, using <a href=""https://developer.android.com/topic/libraries/architecture/livedata"">LiveData</a>. Room is one of the Android <a href=""https://developer.android.com/jetpack"">Jetpack</a> components that were created to make application development on Android easier.</p>"
"2019-04",Rust,languages-and-frameworks,Trial,"<p>Since we last featured it on the Radar in January 2015, we've seen steadily increasing interest in <strong><a href=""http://www.rust-lang.org/"">Rust</a></strong>. Some of our clients are now using Rust, mostly in the context of infrastructure tooling but also in high-powered embedded devices. Interest was fuelled by a growing ecosystem as well as improvements to the language itself. The latter included straightforward performance improvements but also changes that make Rust more intuitive, for example the change to non-lexical scoping. Most of the significant changes are included in the Rust 2018 standard released last December.</p>"
"2019-04",WebFlux,languages-and-frameworks,Trial,"<p><strong><a href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html"">WebFlux</a></strong> is the Spring Framework implementation of <a href=""https://www.reactive-streams.org/"">Reactive Streams</a>. We see a rise in reactive programming models across our teams in general and the use of WebFlux in teams who are working in the Spring ecosystem. It's best used in large microservices ecosystems where the high performance of the requests is a major concern. It allows overlapping request processing asynchronously without the complications of using multiple threads. WebFlux uses <a href=""https://github.com/reactor/reactor"">Reactor</a> as its reactive library but it is interoperable with other reactive libraries via Reactive Streams. It uses <a href=""https://netty.io/"">Netty</a> as its underlying high-performance communications engine. Although we encourage using Reactive Streams, adopting this programming model requires a significant shift in thinking.</p>"
"2019-04",Aeron,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/real-logic/aeron"">Aeron</a></strong> is an efficient and reliable peer-to-peer message transport. It provides a replicated persistent log of messages via a number of media drivers, including HTTP, UDP and TCP. It also supports persistent storage of message streams for later replay. For many applications, Aeron may be overkill because it operates at a pretty low level (OSI Layer 4 conceptually), but it's peer-to-peer design and low (and predictable) latency are useful in a number of use cases. Indeed, we've found it to be useful in certain machine learning applications as well as playing a part in event-driven architectures. We think it's worth pointing out that alternative messaging protocols exist that don't require additional services such as <a href=""/radar/tools/apache-kafka"">Apache Kafka</a> to be run.</p>"
"2019-04",Arrow,languages-and-frameworks,Assess,"<p><strong><a href=""https://arrow-kt.io/"">Arrow</a></strong> is a functional programming library for <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a>, created by merging two existing popular libraries (<a href=""https://github.com/JcMinarro/kategory"">kategory</a> and <a href=""https://github.com/MarioAriasC/funKTionale"">funKTionale</a>). While Kotlin provides building blocks for functional programming, Arrow delivers a package of ready-to-use higher-level abstractions for application developers. It provides data types, type classes, effects, optics and other functional programming patterns as well as integrations with popular libraries. With Arrow, existing libraries are unified, which should go a long way to avoid fractured communities in this space.</p>"
"2019-04",Chaos Toolkit,languages-and-frameworks,Assess,"<p>The <strong><a href=""https://chaostoolkit.org/"">Chaos Toolkit</a></strong> is one of a number of <a href=""/radar/techniques/chaos-engineering"">Chaos Engineering</a> tools that made this edition of the Radar. You use the toolkit to describe and then run repeatable experiments on your infrastructure to understand its resilience in the event of failure. Many of our teams have been using homegrown tools to do this, so it's great to see an open-source project dedicated to the practice. The toolkit already has drivers for <a href=""/radar/platforms/aws"">AWS</a>, <a href=""/radar/platforms/azure-service-fabric"">Azure Service Fabric</a> and GCE (among others) and plays nicely with build tools which lets you experiment with automation. The usual caveats apply though, Chaos Engineering is a very powerful technique that is best used on resilience-aware systems, that is, systems that have been built to cope with failure. For that reason, we recommend starting using Chaos Toolkit in your nonproduction environments first.</p>"
"2019-04",Dask,languages-and-frameworks,Assess,"<p>Data scientists and engineers often use libraries such as <a href=""https://pandas.pydata.org/"">pandas</a> to perform ad hoc data analysis. Although expressive and powerful, these libraries have one critical limitation: they only work on a single CPU and don't provide horizontal scalability for large data sets. <a href=""https://dask.org/""><strong>Dask</strong></a>, however, includes a lightweight, high-performance scheduler that can scale from a laptop to a cluster of machines. And because it works with <a href=""http://www.numpy.org/"">NumPy</a>, pandas and <a href=""/radar/tools/scikit-learn"">Scikit-learn</a>, Dask looks promising for further assessment.</p>"
"2019-04",Embark,languages-and-frameworks,Assess,"<p>We've recommended <a href=""/radar/languages-and-frameworks/truffle"">Truffle</a> for <a href=""/radar/techniques/ethereum-for-decentralized-applications"">decentralized application</a> (dapp) development in the past. <strong><a href=""https://embark.status.im/"">Embark</a></strong> too can make your work easier. Embark provides features such as scaffolding, building, testing and debugging and integrates with decentralized storages such as <a href=""/radar/platforms/ipfs"">IPFS</a>. Through its declarative configuration, you can manage <a href=""/radar/techniques/smart-contracts"">smart contract</a> configuration, dependencies, artifact and deployment quite easily. Embark's interactive CLI dashboard is also impressive. We keep seeing people use <a href=""https://remix.ethereum.org"">Remix</a> to write smart contracts and manually deploy their apps without automated testing, source control management or artifact management. We'd like to draw people's attention to dapp engineering practice by promoting tools such as Truffle and Embark.</p>"
"2019-04",fastai,languages-and-frameworks,Assess,"<p><strong><a href=""https://docs.fast.ai/"">fastai</a></strong> is an open-source Python library that simplifies training fast and accurate neural nets. It is built on top of <a href=""/radar/languages-and-frameworks/pytorch"">PyTorch</a> and has become a popular tool for our data scientists. fastai simplifies painful aspects of model training such as preprocessing and loading data down to a few lines of code. It's built on deep learning best practices and has out-of-the-box support for computer vision, natural language processing (NLP) and more. The founders' motivation has been to create an easy-to-use library for deep learning and an improved successor to <a href=""/radar/languages-and-frameworks/keras"">Keras</a>. <a href=""/radar/platforms/google-cloud-platform"">GCP</a>, <a href=""/radar/platforms/aws"">AWS</a> and <a href=""/radar/platforms/azure"">Azure</a> all have already included fastai in their machine images. The creators of fastai, acknowledging the speed and safety limitations of Python, have announced <a href=""https://www.fast.ai/2019/03/06/fastai-swift/"">embracing Swift</a> as an alternative language for deep learning. We'll be closely watching this space.</p>"
"2019-04",http4k,languages-and-frameworks,Assess,"<p><strong><a href=""https://www.http4k.org/"">http4k</a></strong> is an HTTP toolkit written in pure <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> for serving and consuming HTTP services. One of the key ideas behind http4k is that HTTP apps are modelled by composing two simple functions — HttpHandler and Filter. They derive inspiration from Twitter's <a href=""https://monkey.org/%7Emarius/funsrv.pdf"">""Your Server as a Function""</a> paper. It's very lightweight with the core module having no dependencies apart from Kotlin StdLib. Apart from its elegance and simplicity, we also like its emphasis on testability — given that the entities in the libraries are immutable and the routes in the app, as well as the app itself, are just functions, they're super easy to test. One of the things to be aware of, though, is that we don't have nonblocking or coroutines support in http4k yet.</p>"
"2019-04",Immer,languages-and-frameworks,Assess,"<p>With the increasing complexity of single-page JavaScript applications, managing state predictably is becoming more and more important. Immutability can help to ensure our applications behave consistently, but unfortunately JavaScript doesn't natively support the ability to create immutable objects. Libraries such as <a href=""/radar/languages-and-frameworks/immutable-js"">Immutable.js</a> filled that gap but introduced new problems because now two kinds of objects and arrays existed in the application, the library's version and the native JavaScript ones. <strong><a href=""https://github.com/mweststrate/immer"">Immer</a></strong> — German for <em>always</em> — is a tiny package that lets you work with immutable state in a more convenient way. It's based on the copy-on-write mechanism, has a minimal API and operates on normal JavaScript objects and arrays. This means that data access is seamless and no large refactoring efforts are needed when introducing immutability to an existing codebase.</p>"
"2019-04",Karate,languages-and-frameworks,Assess,"<p>Given our experience that tests are the only API specifications that really matter, we're always on the lookout for new tools that might help. <strong><a href=""https://intuit.github.io/karate/"">Karate</a></strong> is an API testing framework whose unique feature is that tests are written directly in Gherkin without relying on a general-purpose programming language to implement test behavior. Karate is really a domain-specific language for describing HTTP-based API tests. Although this approach is interesting and makes for some very readable specifications for simple tests, the special-purpose language for matching and validating payloads can become quite syntax-heavy and difficult to understand. It remains to be seen if more complex tests written in this style will be readable and maintainable over the long haul.</p>"
"2019-04",Micronaut,languages-and-frameworks,Assess,"<p><strong><a href=""https://micronaut.io/"">Micronaut</a></strong> is a new JVM framework for building microservices using Java, <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> or Groovy. It distinguishes itself through a small memory footprint and short startup time. It achieves these improvements by avoiding runtime reflection for DI and proxy generation, a common shortcoming of traditional frameworks, and instead uses a <a href=""https://martinfowler.com/articles/injection.html"">DI</a>/<a href=""https://en.wikipedia.org/wiki/Aspect-oriented_programming"">AOP</a> container which performs dependency injection at compile time. This makes it attractive not just for standard server-side microservices but also in the context of, for example, the Internet of Things, Android applications and serverless functions. Micronaut uses Netty and has first-class support for reactive programming. It also includes many features that make it cloud-native friendly such as service discovery and circuit breaking. Micronaut is a very promising entrant to the full stack framework for the JVM space and we're keenly watching it.</p>"
"2019-11",ROS,Platforms,Trial,"<p><strong><a href=""https://www.ros.org/"">ROS</a></strong> (Robot Operating System) is a set of libraries and tools to help software developers create robot applications. It's a development framework that provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management and more. <a href=""/radar/platforms/apollo-auto"">Apollo Auto</a> is based on ROS. In our other <a href=""https://en.wikipedia.org/wiki/Advanced_driver-assistance_systems"">ADAS</a> simulation project, we've also used ROS's messaging system (<a href=""http://wiki.ros.org/Bags"">bag</a>). The technology isn't new, but it has regained developers’ attention with the development of ADAS.</p>"
"2019-04",Next.js,languages-and-frameworks,Assess,"<p><a href=""/radar/languages-and-frameworks/react-js"">React.js</a> has revolutionized the way most people write single-page JavaScript applications. Generally, we recommend you use Create React App throughout the application lifecycle so you don't have to configure your setup, builds and packages manually. But some developers will prefer a tool whose initial defaults reflect a sound set of opinions. <strong><a href=""https://nextjs.org/"">Next.js</a></strong> is just such an opinionated framework and it is garnering quite a bit of interest among our front-end enthusiasts. Next.js simplifies routing, renders on the server side by default and streamlines dependencies and builds. We're keen to see if it lives up to expectations on our own projects.</p>"
"2019-04",Pose,languages-and-frameworks,Assess,"<p><strong><a href=""https://popmotion.io/pose/"">Pose</a></strong> is a simple CSS-like animation library for <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>, <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> and <a href=""/radar/languages-and-frameworks/vue-js"">Vue.js</a> frameworks. It is a declarative motion system that combines the simplicity of CSS syntax with the power and flexibility of JavaScript animations and interactions.</p>"
"2019-04",react-testing-library,languages-and-frameworks,Assess,"<p>As the pace of change in JavaScript frameworks has slowed, our teams have more time to work with specific frameworks and are gaining deeper insights as a result. With <a href=""/radar/languages-and-frameworks/react-js"">React</a> and the dominant testing framework, <a href=""/radar/languages-and-frameworks/enzyme"">Enzyme</a>, we've observed a worrying trend of unit tests becoming tightly coupled to implementation details without providing — because the focus is on shallow details — much confidence that features work as expected. These unit tests make evolving the design difficult and they shift too much responsibility up the test pyramid to functional testing. This has made us revisit the idea of <a href=""https://www.martinfowler.com/bliki/SubcutaneousTest.html"">subcutaneous testing</a>. Additionally, because of its design, <a href=""https://github.com/airbnb/enzyme/issues/1917"">Enzyme has issues</a> trying to keep up with React's development. All this has pushed us toward assessing <strong><a href=""https://github.com/kentcdodds/react-testing-library"">react-testing-library</a></strong> as a new framework for testing React applications.</p>"
"2019-04",ReasonML,languages-and-frameworks,Assess,"<p><strong><a href=""https://reasonml.github.io/"">ReasonML</a></strong> is an interesting new language based on OCaml with a sprinkling of C-like syntax and uses JavaScript as the default compilation target. Created by Facebook, it allows embedded JavaScript snippets and JSX templating with good <a href=""/radar/languages-and-frameworks/react-js"">React</a> integration. It aims to be approachable for JavaScript developers and leverages that ecosystem, while providing type safety in a functional language.</p>"
"2019-04",Taiko,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/getgauge/taiko"">Taiko</a></strong> is a node.js library with a clear and concise API to assist with chrome or chromium browser automation. You can leverage Taiko's smart selectors and write reliable tests as the structure of the web application evolves. There's no need for ID, CSS or XPath selectors or adding explicit waits (for XHR requests) in test scripts. The interactive REPL recorder comes in handy when you want to develop the tests side by side as you explore the functionality. Although you could use Taiko independently, we've had good success using it with <a href=""/radar/tools/gauge"">Gauge</a>.</p>"
"2019-04",Vapor,languages-and-frameworks,Assess,"<p>We're strong proponents of <a href=""/radar/techniques/polyglot-programming"">polyglot programming</a> but recognize that in some cases it can make sense to focus on a single programming language. If you're heavily invested in Swift, most likely because of iOS development, and you find yourself looking for a technology to write server-side services, have a look at <strong><a href=""https://vapor.codes/"">Vapor</a></strong>, a modern web framework for Swift that has gained a fair amount of popularity.</p>"
"2019-04",Cypress,Tools,Adopt,"<p>We keep receiving positive feedback on ""post-Selenium"" web UI testing tools such as <strong><a href=""http://www.cypress.io/"">Cypress</a></strong>, <a href=""/radar/tools/testcafe"">TestCafe</a> and <a href=""/radar/languages-and-frameworks/puppeteer"">Puppeteer</a>. Running end-to-end tests can present challenges, such as the long duration of the running process, the flakiness of some tests and the challenges of fixing failures in CI when running tests in headless mode. Our teams have had very good experiences with Cypress by solving common issues such as lack of performance and long wait time for responses and resources to load. Cypress has become the tool of choice for end-to-end testing within our teams.</p>"
"2019-04",Jupyter,Tools,Adopt,"<p>Over the past couple of years, we've noticed a steady rise in the popularity of analytics notebooks. These are Mathematica-inspired applications that combine text, visualization and code in a living, computational document. <strong><a href=""http://jupyter.org/"">Jupyter</a></strong> Notebooks are widely used by our teams for prototyping and exploration in analytics and machine learning. We've moved Jupyter to Adopt for this issue of the Radar to reflect that it has emerged as the current default for Python notebooks. However, we caution to use <a href=""/radar/techniques/productionizing-jupyter-notebooks"">Jupyter Notebooks in production</a>.</p>"
"2019-04",LocalStack,Tools,Adopt,"<p>One of the challenges of using cloud services is being able to develop and test locally. <strong><a href=""https://github.com/localstack/localstack"">LocalStack</a></strong> solves this problem for <a href=""/radar/platforms/aws"">AWS</a> by providing local <a href=""https://martinfowler.com/bliki/TestDouble.html"">test double</a> implementations of a wide range of AWS services, including S3, Kinesis, DynamoDB and Lambda. It builds on top of best-of-breed tools such as <a href=""https://github.com/mhart/kinesalite"">Kinesalite</a>, <a href=""https://github.com/mhart/dynalite"">dynalite</a> and <a href=""https://github.com/spulec/moto"">Moto</a> and adds isolated processes and error injection functionality. LocalStack is very easy to use, ships with a simple JUnit runner and a JUnit 5 extension and can also run inside a docker container. For many teams, it has become the default for testing services that are deployed on AWS.</p>"
"2019-04",Stolon,Tools,Trial,"<p>Setting up highly available PostgreSQL instances can be tricky, which is why we like <a href=""/radar/tools/patroni"">Patroni</a> — it helps us speed up the setup of PostgreSQL clusters. <a href=""https://github.com/sorintlab/stolon""><strong>Stolon</strong></a> is another tool that we've used successfully to run high-availability (HA) clusters of PostgreSQL instances in production using Kubernetes. Although PostgreSQL supports streaming replication out of the box, the challenge in an HA setup is to assure that the clients always connect to the current master. We like that Stolon enforces the connection to the right PostgreSQL master by actively closing connections to unelected masters and routing requests to the active one.</p>"
"2019-04",Terraform,Tools,Adopt,"<p><strong><a href=""https://www.terraform.io/"">Terraform</a></strong>, is rapidly becoming a de facto choice for creating and managing cloud infrastructures by writing declarative definitions. The configuration of the servers instantiated by Terraform is usually left to Puppet, Chef or Ansible. We like Terraform because the syntax of its files is quite readable and because it supports a number of cloud providers while making no attempt to provide an artificial abstraction across those providers. The active community will add support for the latest features from most cloud providers. Following our first, more cautious, mention of Terraform almost two years ago, it has seen continued development and has evolved into a stable product with a good ecosystem that has proven its value in our projects. The issue with state file management can now be sidestepped by using what Terraform calls a ""remote state backend."" We've successfully used <a href=""https://aws.amazon.com/s3/"">AWS S3</a> for that purpose.</p>"
"2019-04",UI dev environments,Tools,Adopt,"<p>As more and more teams embrace <a href=""/radar/techniques/designops"">DesignOps</a>, practices and tooling in this space mature. <strong>UI dev environments</strong> provide a comprehensive environment for quickly iterating on UI components, focusing on collaboration between user experience designers and developers. We now have a few options in this space: <a href=""https://storybook.js.org/"">Storybook</a>, <a href=""https://react-styleguidist.js.org/"">React Styleguidist</a>, <a href=""https://compositor.io/"">Compositor</a> and <a href=""https://mdxjs.com/"">MDX</a>. You can use these tools standalone in component library or design system development as well as embedded in a web application project. Many teams were able to decrease their UI feedback cycles and improve timing of UI work in preparation for development work, which has made using UI dev environments a reasonable default for us.</p>"
"2019-04",AnyStatus,Tools,Trial,"<p>As developers used to pushing many small commits daily, we rely on monitors to notify us when builds go green. <strong><a href=""https://www.anystat.us/"">AnyStatus</a></strong> is a lightweight Windows desktop app that rolls up metrics and events from various sources into one place. Examples include build results and releases, health checks for different services and OS metrics. Think of it as CCTray on steroids. It's also available as a Visual Studio plugin.</p>"
"2019-04",AVA,Tools,Trial,"<p><strong><a href=""https://github.com/avajs/ava"">AVA</a></strong> is a test runner for Node.js. Even though JavaScript is single-threaded, IO in Node.js can happen in parallel because of its asynchronous nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO-heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. AVA is a lightweight option, when compared to full-featured frameworks such as <a href=""/radar/languages-and-frameworks/jest"">Jest</a>. It is opinionated and forces you to write atomic test cases.</p>"
"2019-04",batect,Tools,Trial,"<p>So much energy and effort continue to be wasted on configuring local development environments and troubleshooting the ""works on my machine"" problem. For many years our teams have adopted the <a href=""https://www.thoughtworks.com/insights/blog/praise-go-script-part-i"">""check out and go""</a> approach where we use a scripted approach to ensure the local development environment is configured consistently. <strong><a href=""https://github.com/charleskorn/batect/"">batect</a></strong> is an open source tool developed by a ThoughtWorker that makes it easy to set up and share a build environment based on <a href=""/radar/techniques/docker-for-builds"">Docker</a>. batect becomes the entry point script for your build system, launching containers to perform build tasks that don't rely at all on local setup. Changes to build configuration and dependencies are simply shared through source control without requiring any changes or installations on local machines or CI agents. While we like <a href=""/radar/tools/cage"">Cage</a>, among other tools, in this space, we see batect quickly growing in favor with our teams.</p>"
"2019-04",Elasticsearch LTR,Tools,Trial,"<p>One of the challenges of search is ensuring the most relevant results for the user appear at the top of the list. This is where learning to rank (LTR) can help. LTR is the process of applying machine learning to rank documents retrieved by a search engine. If you're using <a href=""/radar/platforms/elastic-search"">Elasticsearch</a>, you can achieve search-relevant ranking with the <a href=""https://github.com/o19s/elasticsearch-learning-to-rank""><strong>Elasticsearch LTR</strong></a> plugin. The plugin uses <a href=""https://sourceforge.net/p/lemur/wiki/RankLib/"">RankLib</a> for generating the models during the training phase. Then, when querying Elasticsearch, you can use this plugin to ""rescore"" the top results. We've used it in a few projects and have been happy with the results. There's also an equivalent <a href=""http://lucene.apache.org/solr/guide/7_7/learning-to-rank.html"">LTR solution</a> for Solr users.</p>"
"2019-04",Helm,Tools,Trial,"<p><a href=""http://helm.sh""><strong>Helm</strong></a> is a package manager for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. It comes with a repository of curated Kubernetes applications that are maintained in the official <a href=""https://github.com/helm/charts"">Charts repository</a>. Helm has two components: a command line utility called Helm and a cluster component called Tiller. Securing a Kubernetes cluster is a wide and nuanced topic, but we highly recommend setting up Tiller in a role-based access control (RBAC) environment. We've used Helm in a number of client projects and its dependency management, templating and hook mechanism has greatly simplified the application lifecycle management in Kubernetes. However, we recommend proceeding with caution — Helm's <a href=""/radar/techniques/templating-in-yaml"">YAML templating</a> can be difficult to understand, and Tiller still has some rough edges. Helm 3 is expected to address these issues.</p>"
"2019-04",InSpec,Tools,Trial,"<p>How does an organization give autonomy to delivery teams while still making sure their deployed solutions are safe and compliant? How do you ensure that servers, once deployed, maintain a consistent configuration without drift? <strong><a href=""https://www.chef.io/inspec/"">InSpec</a></strong> is positioned as a solution for continuous compliance and security, but you can also use it for general infrastructure testing. InSpec allows the creation of declarative infrastructure tests, which can then be continuously run against provisioned environments including production. Our teams particularly praise its extensible design with resources and matchers for multiple platforms. We recommend trialling InSpec as a solution to the problem of assuring compliance and security.</p>"
"2019-04",Lottie,Tools,Trial,"<p>Good UI animation could greatly improve user experience. However, to reproduce a designer's delicate animation on an app is usually a challenging task for developers. <strong><a href=""http://airbnb.io/lottie/#/"">Lottie</a></strong> is a library for Android, iOS, web, and Windows that parses Adobe After Effects animations exported as JSON with Bodymovin and renders them natively on mobile and on the web. Both designers and developers can continue to use their familiar tools and have a fluent collaboration.</p>"
"2019-04",TestCafe,Tools,Trial,"<p>We have good experience using ""post-Selenium"" web UI testing tools such as <a href=""/radar/tools/cypress"">Cypress</a>, <strong><a href=""https://github.com/DevExpress/testcafe"">TestCafe</a></strong> and <a href=""/radar/languages-and-frameworks/puppeteer"">Puppeteer</a>. TestCafe lets you write tests in JavaScript or <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a> and runs in-browser tests. TestCafe has several useful features that include out-of-the-box parallel execution and HTTP request mocking. TestCafe uses an asynchronous execution model with no explicit wait times, which results in much more stable test suites. Its selector API makes it easier to implement <a href=""https://martinfowler.com/bliki/PageObject.html"">PageObject</a> patterns. TestCafe recently released version 1.0.<em>x</em>, which improved stability and functionality.</p>"
"2019-04",Traefik,Tools,Trial,"<p><strong><a href=""https://traefik.io/"">Traefik</a></strong> is an open-source reverse proxy and load balancer. If you're looking for an edge proxy that provides simple routing without all the features of <a href=""https://nginx.org"">NGINX</a> and <a href=""https://haproxy.org"">HAProxy</a>, Traefik is a good choice. The router provides a reload-less reconfiguration, metrics, monitoring and circuit breakers that are essential when running microservices. It also integrates nicely with <a href=""/radar/tools/let-s-encrypt"">Let's Encrypt</a> to provide SSL termination as well as infrastructure components such as Kubernetes, Docker Swarm or Amazon ECS to automatically pick up new services or instances to include in its load balancing.</p>"
"2019-04",Anka,Tools,Assess,"<p><strong><a href=""https://ankadoc.bitbucket.io/"">Anka</a></strong> is a set of tools to create, manage and distribute build and test macOS reproducible virtual environments for iOS and macOS development. It brings Docker-like experience to macOS environments: instant start, CLI to manage virtual machines and registry to version and tag virtual machines for distribution. We discovered Anka when we proposed a macOS private cloud solution to a client. This tool is worth considering when applying DevOps workflow to iOS and macOS environments.</p>"
"2019-04",Cage,Tools,Assess,"<p><strong><a href=""http://cage.faraday.io/"">Cage</a></strong> is an open-source wrapper around <a href=""https://docs.docker.com/compose/"">Docker Compose</a> that lets you configure and run multiple dependent components as a larger application. It lets you orchestrate the execution of components such as Docker images, service source code from repo, scripts to load datastores and pods, which are containers that run together as a unit. Cage uses the Docker Compose v2 configuration file format. It addresses some of the Docker Compose gaps such as supporting multiple environments, including the dev environment for running a distributed application on the local developer machine and the test environment for running integration tests and production.</p>"
"2019-04",Cilium,Tools,Assess,"<p>Traditional Linux network security approaches, such as iptables, filter on IP address and TCP/UDP ports. However, these IP addresses frequently churn in dynamic microservices environments. By leveraging Linux <a href=""http://www.brendangregg.com/ebpf.html"">eBPF</a>, <strong><a href=""https://cilium.io/"">Cilium</a></strong> provides API-aware networking and security by transparently inserting security in a way that is based on service, pod or container identity in contrast to IP address identification. By decoupling security from addressing, Cilium could play a significant role as a new network protection layer and we recommend you to check it out.</p>"
"2019-04",Detekt,Tools,Assess,"<p><strong><a href=""https://github.com/arturbosch/detekt"">Detekt</a></strong> is a static code analysis tool for <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a>. It finds code smells and code complexity. You can run it from the command line or use its plugins for integration with popular developer tools such as <a href=""/radar/tools/gradle"">Gradle</a> (to perform code analysis via builds) or <a href=""https://www.sonarqube.org/"">SonarQube</a> (to perform code coverage in addition to static code analysis), and IntelliJ. Detekt is a great addition to build pipelines of Kotlin applications.</p>"
"2019-04",Flagr,Tools,Assess,"<p><a href=""https://martinfowler.com/articles/feature-toggles.html"">Feature toggles</a> are an important technique in continuous deployment scenarios. We've come across a number of good home-grown solutions, but we do like the approach <strong><a href=""https://github.com/checkr/flagr"">Flagr</a></strong> takes: a complete feature toggle as a service, distributed as a Docker container. It comes with SDKs for all major languages, has a simple and well-documented REST API and provides a convenient frontend.</p>"
"2019-04",Gremlin,Tools,Assess,"<p><a href=""https://www.gremlin.com/""><strong>Gremlin</strong></a> is a SaaS solution for organizations to conduct <a href=""/radar/techniques/chaos-katas"">chaos experiments</a> and help test the resilience of their systems. It comes with a series of failure attacks — including resource, network and state failures — that can be run ad hoc or on schedule and require minimal setup (especially for <a href=""/radar/platforms/kubernetes"">Kubernetes</a> users, who can run <a href=""/radar/tools/helm"">Helm</a> to install Gremlin). The Gremlin client also has a nice web-based user interface, which makes it easy to execute and manage chaos experiments.</p>"
"2019-04",Honeycomb,Tools,Assess,"<p><strong><a href=""https://www.honeycomb.io/"">Honeycomb</a></strong> is an observability tool that ingests rich data from production systems and makes it manageable through dynamic sampling. Developers can log large amounts of rich events and decide later how to slice and correlate them. This interactive approach is useful when working with today's large distributed systems because we've passed the point where we can reasonably anticipate which questions we might want to ask of production systems.</p>"
"2019-04",Humio,Tools,Assess,"<p><strong><a href=""https://humio.com/"">Humio</a></strong> is a fairly new player in the log management space. It's been built from the ground up to be super fast at both log ingestion and query using its built-in query language on top of a custom-designed time series database. It integrates with just about everything out there from an ingestion, visualization and alerting perspective. The log management space has been dominated by Splunk and the ELK Stack, so having alternatives is a good thing. We'll be watching Humio's development with interest.</p>"
"2019-11",Continuous delivery for machine learning (CD4ML),Techniques,Trial,"<p>With an increased popularity of ML-based applications, and the technical complexity involved in building them, our teams rely heavily on <strong><a href=""https://martinfowler.com/articles/cd4ml.html"">continuous delivery for machine learning (CD4ML)</a></strong> to deliver such applications safely, quickly and in a sustainable manner. CD4ML is the discipline of bringing CD principles and practices to ML applications. It removes long cycle times between training models and deploying them to production. CD4ML removes manual handoffs between different teams, data engineers, data scientists and ML engineers in the end-to-end process of build and deployment of a model served by an application. Using CD4ML, our teams have successfully implemented the automated versioning, testing and deployment of all components of ML-based applications: data, model and code.</p>"
"2019-04",Kubernetes Operators,Tools,Assess,"<p>We're excited about the impact <a href=""/radar/platforms/kubernetes"">Kubernetes</a> has had on our industry but also concerned about the operational complexity that comes with it. Keeping a Kubernetes cluster up and running and then managing packages deployed on it requires special skills and time. Operational processes such as upgrades, migrations, backups, among others, can be a full-time job. We think that <strong><a href=""https://coreos.com/operators/"">Kubernetes Operators</a></strong> will play a key role in reducing this complexity. The framework provides a standard mechanism to describe automated operational processes for packages running in a Kubernetes cluster. Although Operators were spearheaded and promoted by RedHat, several community-developed Operators for common open-source packages such as <a href=""/radar/tools/jaeger"">Jaeger</a>, <a href=""/radar/platforms/mongodb"">MongoDB</a> and <a href=""/radar/platforms/redis"">Redis</a> have begun to emerge.</p>"
"2019-04",OpenAPM,Tools,Assess,"<p>One of the challenges in adopting an open-source alternative to popular commercial packages is sorting through the complicated landscape of projects to understand which components you need, which ones play nicely together and exactly which part of a total solution each component covers. This is particularly difficult in the world of observability, where the standard practice is to purchase one comprehensive but pricey package to do it all. <strong><a href=""https://openapm.io"">OpenAPM</a></strong> makes the open-source selection process for observability tools easier. It displays the current crop of open-source packages classified by component roles, so you can interactively select compatible components. As long as you keep the tool up to date, it should help you navigate through the confusing array of possible tools.</p>"
"2019-04",Systems,Tools,Assess,"<p>It's easy to think of many of the processes we work within as linear chains of cause and effect. Most of the time we are working within more complex systems where positive and negative feedback loops influence outcomes. <strong><a href=""https://github.com/lethain/systems"">Systems</a></strong> is a set of tools for describing, executing and visualizing systems diagrams. Using a compact DSL and running either standalone or within a Jupyter Notebook, it's super easy to describe fairly complex processes and the flow of information through them. It's pretty much a niche tool; but an interesting and fun one.</p>"
"2019-04",Taurus,Tools,Assess,"<p><strong><a href=""https://gettaurus.org/"">Taurus</a></strong> is a handy application and service performance testing tool written in Python. It wraps many performance testing executors, including <a href=""/radar/tools/gatling"">Gatling</a> and <a href=""/radar/tools/locust"">Locust</a>. You can run it from the command line and easily integrate it with continuous delivery pipelines to run performance tests at different stages of the pipeline. Taurus also has great reporting either as console text-based output or integrated with an interactive web UI. Our teams have found that configuring Taurus YAML files is easy because you can use multiple files to describe each test scenario and refer to underlying executer's scenario definitions.</p>"
"2019-04",Terraform provider GoCD,Tools,Assess,"<p><strong><a href=""https://github.com/beamly/terraform-provider-gocd"">Terraform provider GoCD</a></strong> lets you build pipelines using <a href=""/radar/tools/terraform"">Terraform</a>, a mature and widely used tool in the <a href=""/radar/tools/infrastructure-as-code"">infrastructure as code</a> space. With this provider, you can write pipelines in the <a href=""https://github.com/hashicorp/hcl"">HashiCorp Configuration Language (HCL)</a> that use all of the functionality Terraform provides, including workspaces, modules and remote state. This approach is an excellent alternative to <a href=""https://github.com/gocd-contrib/gomatic"">Gomatic</a>, which we highlighted in the <a href=""/radar/techniques/pipelines-as-code"">Pipelines as code</a> blip before. The Golang SDK used in this provider has automatic regression tests for the GoCD API which should minimize issues while upgrading.</p>"
"2019-04",Terratest,Tools,Assess,"<p>We widely use <a href=""/radar/tools/terraform"">Terraform</a> as code to configure a cloud infrastructure. <strong><a href=""https://github.com/gruntwork-io/terratest"">Terratest</a></strong> is a Golang library that makes it easier to write automated tests for infrastructure code. A test run creates real infrastructure components (such as servers, firewalls or load balancers), deploys applications on them and validates the expected behavior using Terratest. At the end of the test, Terratest can undeploy the apps and clean up resources. This makes it largely useful for end-to-end tests of your infrastructure in a real environment.</p>"
"2019-04",Handwritten CloudFormation,Tools,Hold,"<p><a href=""https://aws.amazon.com/cloudformation/"">AWS CloudFormation</a> is a proprietary declarative language to provision AWS infrastructure as code. Handwriting CloudFormation files is often a default approach to bootstrap AWS infrastructure automation. Although this might be a sensible way to start a small project, our teams, and the industry at large, have found that <strong>handwritten CloudFormation</strong> simply does not scale as the infrastructure grows. Noticeable pitfalls of handwritten CloudFormation files for large projects include poor readability, lack of imperative constructs, limited parameter definition and usage, and lack of type checking. Addressing these shortfalls has led to a rich ecosystem of both open-source and custom tooling. We find <a href=""/radar/tools/terraform"">Terraform</a> a sensible default that not only addresses shortfalls of CloudFormation but also has an active community to add the latest AWS features and fix bugs. In addition to Terraform, you can choose from many other tools and languages, including <a href=""/radar/languages-and-frameworks/troposphere"">troposphere</a>, <a href=""https://github.com/cloudreach/sceptre"">sceptre</a>, <a href=""https://github.com/capitalone/stack-deployment-tool"">Stack Deployment Tool</a> and <a href=""/radar/platforms/pulumi"">Pulumi</a>.</p>"
"2019-11",Container security scanning,Techniques,Adopt,"<p>The continued adoption of containers for deployments, especially <a href=""/radar/platforms/docker"">Docker</a>, has made <strong>container security scanning</strong> a must-have technique and we've moved this technique into Adopt to reflect that. Specifically, containers introduced a new path for security issues; it's vital that you use tools to scan and check containers during deployment. We prefer using automated scanning tools that run as part of the deployment pipeline.</p>"
"2019-11",Zhong Tai,Techniques,Trial,"<p><strong><a href=""https://www.thoughtworks.com/insights/blog/zhong-tai-radical-approach-enterprise-it"">Zhong Tai</a></strong> has been a buzzword in the Chinese IT industry for years, but it has yet to catch on in the West. At its core, Zhong Tai is an approach to delivering encapsulated business models. It's designed to help a new breed of small businesses deliver first-rate services without the costs of traditional enterprise infrastructure and enabling existing organizations to bring innovative services to market at breakneck speeds. The Zhong Tai strategy was originally proposed by Alibaba and soon followed by many Chinese Internet companies, because their business model is digital native, making it suitable to replicate for new markets and sectors. Nowadays, more Chinese firms are using Zhong Tai as a lever for digital transformation.</p>"
"2019-11",Data integrity at the origin,Techniques,Adopt,"<p>Today, many organizations' answer to unlocking data for analytical usage is to build a labyrinth of data pipelines. Pipelines retrieve data from one or multiple sources, cleanse it and then transform and move it to another location for consumption. This approach to data management often leaves the consuming pipelines with the difficult task of verifying the inbound data's integrity and building complex logic to cleanse the data to meet its required level of quality. The fundamental problem is that the source of the data has no incentive and accountability for providing quality data to its consumers. For this reason, we strongly advocate for <strong>data integrity at the origin</strong>, by which we mean, any source that provides consumable data must describe its measures of data quality explicitly and guarantee those measures. The main reason behind this is that the originating systems and teams are most intimately familiar with their data and best positioned to fix it at the source. <a href=""/radar/techniques/data-mesh"">Data mesh</a> architecture takes this one step further, comparing consumable data to a <em>product</em>, where data quality and its objectives are integral attributes of every shared data set.</p>"
"2019-11",Micro frontends,Techniques,Adopt,"<p>We've seen significant benefits from introducing <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create a front-end monolith — a large, entangled browser application that sits on top of the back-end services — largely neutralizing the benefits of microservices. <strong>Micro frontends</strong> have continued to gain in popularity since they were first introduced. We've seen many teams adopt some form of this architecture as a way to manage the complexity of multiple developers and teams contributing to the same user experience. In June of this year, one of the originators of this technique published an <a href=""https://martinfowler.com/articles/micro-frontends.html"">introductory article</a> that serves as a reference for micro frontends. It shows how this style can be implemented using various web programming mechanisms and builds out an example application using <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>. We're confident this style will grow in popularity as larger organizations try to decompose UI development across multiple teams.</p>"
"2019-11",Pipelines for infrastructure as code,Techniques,Adopt,"<p>The use of continuous delivery pipelines to orchestrate the release process for software has become a mainstream concept. CI/CD tools can be used to test server configuration (e.g., Chef cookbooks, Puppet modules, Ansible playbooks), server image building (e.g., <a href=""/radar/tools/packer"">Packer</a>), environment provisioning (e.g., <a href=""/radar/tools/terraform"">Terraform</a>, CloudFormation) and the integration of environments. The use of <strong>pipelines for infrastructure as code</strong> lets you find errors before changes are applied to operational environments — including environments used for development and testing. They also offer a way to ensure that infrastructure tooling is run consistently, using CI/CD agents rather than individual workstations. Our teams have had good results adopting this technique on their projects.</p>"
"2019-11",Run cost as architecture fitness function,Techniques,Adopt,"<p>Automating the estimation, tracking and projection of cloud infrastructure's run cost is necessary for today's organizations. The cloud providers' savvy pricing models, combined with proliferation of pricing parameters and the dynamic nature of today's architecture, can lead to surprisingly expensive run cost. For example, the price of <a href=""/radar/techniques/serverless-architecture"">serverless</a> based on API calls, event streaming solutions based on traffic or data processing clusters based on running jobs, all have a dynamic nature that changes over time as the architecture evolves. When our teams manage infrastructure on the cloud, implementing <strong>run cost as architecture fitness function</strong> is one of their early activities. This means that our teams can observe the cost of running services against the value delivered; when they see deviations from what was expected or acceptable, they'll discuss whether it's time to evolve the architecture. The observation and calculation of the run cost is implemented as an automated function.</p>"
"2019-11",Testing using real device,Techniques,Adopt,"<p>When adopting continuous delivery (CD) successfully, teams strive to make the various test environments look as close to production as possible. This allows them to avoid bugs that would otherwise only show themselves in the production environment. This remains just as valid for embedded and Internet of Things software; if we don't run our tests in realistic environments we can expect to find some bugs for the first time in production. <strong>Testing using real devices</strong> helps avoid this issue by making sure the right devices are available in the CD pipeline.</p>"
"2019-11",Automated machine learning (AutoML),Techniques,Trial,"<p>The power and promise of machine learning has created a demand for expertise that outstrips the supply of data scientists who specialize in this area. In response to this skills gap, we've seen the emergence of <strong>Automated machine learning (AutoML)</strong> tools that purport to make it easy for nonexperts to automate the end-to-end process of model selection and training. Examples include <a href=""https://cloud.google.com/automl/"">Google's AutoML</a>, <a href=""https://www.datarobot.com"">DataRobot</a> and <a href=""http://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html"">the H2O AutoML interface</a>. Although we've seen promising results from these tools, we'd caution businesses against viewing them as the sum total of their machine-learning journey. As stated on the <a href=""http://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html"">H2O website</a>, ""there is still a fair bit of knowledge and background in data science that is required to produce high-performing machine learning models."" Blind trust in automated techniques also increases the risk of introducing ethical bias or making decisions that disadvantage minorities. While businesses may use these tools as a starting point to generate useful, trained models, we encourage them to seek out experienced data scientists to validate and refine the results.</p>"
"2019-11",Binary attestation,Techniques,Trial,"<p>As the usage of containers, deployment of large fleet of services by autonomous teams and increased speed of continuous delivery become common practice for many organizations, the need for automated deploy-time software security controls arise. <strong>Binary attestation</strong> is a technique to implement deploy-time security control; to cryptographically verify that a binary image is authorized for deployment. Using this technique, an attestor, an automated build process or a security team signs off the binaries that have passed the required quality checks and tests and are authorized to be deployed. Services such as <a href=""https://cloud.google.com/binary-authorization/"">GCP Binary Authorization</a> enabled by <a href=""/radar/tools/grafeas"">Grafeas</a>, and tools such as <a href=""/radar/tools/in-toto"">in-toto</a> and <a href=""/radar/tools/docker-notary"">Docker Notary</a> support creating attestations and validating the image signatures before deployment.</p>"
"2019-11",Data discoverability,Techniques,Trial,"<p>One of the main points of friction for data scientists and analysts, in their workflow, is to locate the data they need, make sense of it and evaluate whether it's trustworthy to use it. This remains a challenge due to the missing metadata about the available data sources and lack of adequate functionality needed to search and locate data. We encourage teams who are providing analytical data sets or building data platforms to make <strong>data discoverability</strong> a first-class function of their environments; to provide the ability to easily locate available data, detect its quality, understand its structure and lineage and get access to it. Traditionally this function has been provided by bloated data cataloguing solutions. In recent years, we've seen the growth of open-source projects that are improving developer experiences for both data providers and data consumers to do one thing really well: to make data discoverable. <a href=""https://github.com/lyft/amundsen"">Amundsen</a> by Lyft and <a href=""https://github.com/linkedin/WhereHows"">WhereHows</a> by LinkedIn are among these tools. What we like to see is a change in providers' behavior to intentionally share the metadata that help discoverability in favor of discoverability tools that infer partial metadata information from silos of application databases.</p>"
"2019-11",Dependency drift fitness function,Techniques,Trial,"<p>Many teams and organizations have no formal or consistent way of tracking technical dependencies in their software. This issue often shows itself when that software needs to be changed, at which point the use of an outdated version of a library, API or component will cause problems or delay. <strong>Dependency drift fitness function</strong> is a technique to introduce a specific <a href=""/radar/techniques/evolutionary-architecture"">evolutionary architecture</a> fitness function to track these dependencies over time, thus giving an indication of the possible work needed and whether a potential issue is getting better or worse.</p>"
"2019-11",Design systems,Techniques,Trial,"<p>As application development becomes increasingly dynamic and complex, it's a challenge to achieve the effective delivery of accessible and usable products that are consistent in style. <strong>Design systems</strong> define a collection of design patterns, component libraries and good design and engineering practices that ensure consistency in the development of digital products. We've found design systems a useful addition to our toolbox when working across teams and disciplines in product development, because they allow teams to focus on more strategic challenges around the product itself without the need to reinvent the wheel every time they need to add a visual component. The types of components and tools you use to create design systems can vary greatly.</p>"
"2019-11",Experiment tracking tools for machine learning,Techniques,Trial,"<p>The day-to-day work of machine learning often boils down to a series of experiments in selecting a modeling approach, the network topology, training data and various optimizations or tweaks to the model. Because many of these models are still difficult to interpret or explain, data scientists must use experience and intuition to hypothesize changes and then measure the impact those changes have on the overall performance of the model. As these models have become increasingly common in business systems, several different <strong>experiment tracking tools for machine learning</strong> have emerged to help investigators keep track of these experiments and work through them methodically. Although no clear winner has emerged, tools such as <a href=""https://mlflow.org/"">MLflow</a> or <a href=""https://www.wandb.com/"">Weights & Biases</a> and platforms such as <a href=""https://comet.ml"">Comet</a> or <a href=""https://neptune.ml"">Neptune</a> have introduced rigor and repeatability into the entire machine learning workflow. They also facilitate collaboration and help turn data science from a solitary endeavor into a team sport.</p>"
"2019-11",Explainability as a first-class model selection criterion,Techniques,Trial,"<p>Deep neural networks have demonstrated remarkable recall and accuracy across a wide range of problems. Given sufficient training data and an appropriately chosen topology, these models meet and exceed human capabilities in certain select problem spaces. However, they're inherently opaque. Although parts of models can be reused through <a href=""/radar/techniques/transfer-learning-for-nlp"">transfer learning</a>, we're seldom able to ascribe any human-understandable meaning to these elements. In contrast, an explainable model is one that allows us to say how a decision was made. For example, a decision tree yields a chain of inference that describes the classification process. Explainability becomes critical in certain regulated industries or when we're concerned about the ethical impact of a decision. As these models are incorporated more widely into critical business systems, it's important to consider <strong>explainability as a first-class model selection criterion</strong>. Despite their power, neural networks might not be an appropriate choice when explainability requirements are strict.</p>"
"2019-11",Security policy as code,Techniques,Trial,"<p>Security policies are rules and procedures that protect our systems from threats and disruption. For example, access control policies define and enforce who can access which services and resources under what circumstances; or network security policies can dynamically limit the traffic rate to a particular service. The complexity of the technology landscape today demands treating <strong>security policy as code</strong>: define and keep policies under version control, automatically validate them, automatically deploy them and monitor their performance. Tools such as <a href=""/radar/tools/open-policy-agent-opa"">Open Policy Agent</a>, or platforms such as <a href=""/radar/platforms/istio"">Istio</a> provide flexible policy definition and enforcement mechanisms that support the practice of security policy as code.</p>"
"2019-11",Sidecars for endpoint security,Techniques,Trial,"<p>Many of the technical solutions we build today run in increasingly complex <a href=""/radar/techniques/polycloud"">polycloud</a> or hybrid-cloud environments with multiple distributed components and services. Under such circumstances, we apply two security principles early in implementation: <em>zero trust network</em>, never trust the network and always verify; and the principle of <em>least privilege</em>, granting the minimum permissions necessary for performing a particular job. <strong>Sidecars for endpoint security</strong> is a common technique we use to implement these principles to enforce security controls at every component's endpoint, e.g., APIs of services, data stores or <a href=""/radar/platforms/kubernetes"">Kubernetes</a> control interface. We do this using an out-of-process sidecar — a process or a container that is deployed and scheduled with each service sharing the same execution context, host and identity. <a href=""/radar/tools/open-policy-agent-opa"">Open Policy Agent</a> and <a href=""http://github.com/envoyproxy/envoy"">Envoy</a> are tools that implement this technique. Sidecars for endpoint security minimize the trusted footprint to a local endpoint rather than the network perimeter. We like to see the responsibility of sidecar’s security policy configuration left with the team that is responsible for the endpoint and not a separate centralized team.</p>"
"2019-11",BERT,Techniques,Assess,"<p><strong><a href=""https://arxiv.org/abs/1810.04805"">BERT</a></strong> stands for Bidirectional Encoder Representations from Transformers; it's a new method of pretraining language representations which was published by researchers at Google in October 2018. BERT has significantly altered the natural language processing (NLP) landscape by obtaining state-of-the-art results on a wide array of NLP tasks. Based on Transformer architecture, it learns from both the left and right side of a token's context during training. Google has also released pretrained general-purpose BERT models that have been trained on a large corpus of unlabelled text including Wikipedia. Developers can use and fine-tune these pre-trained models on their task-specific data and achieve great results. We talked about <a href=""/radar/techniques/transfer-learning-for-nlp"">transfer learning for NLP</a> in our April 2019 edition of the Radar; BERT and its successors continue to make transfer learning for NLP a very exciting field with significant reduction in effort for users dealing with text classification.</p>"
"2019-11",Data mesh,Techniques,Assess,"<p><strong><a href=""https://martinfowler.com/articles/data-monolith-to-mesh.html"">Data mesh</a></strong> is an architectural paradigm that unlocks analytical data at scale; rapidly unlocking access to an ever-growing number of distributed domain data sets, for a proliferation of consumption scenarios such as machine learning, analytics or data intensive applications across the organization. Data mesh addresses the common failure modes of the traditional centralized <a href=""https://martinfowler.com/bliki/DataLake.html"">data lake</a> or data platform architecture, with a shift from the centralized paradigm of a lake, or its predecessor, the data warehouse. Data mesh shifts to a paradigm that draws from modern distributed architecture: considering domains as the first-class concern, applying platform thinking to create a self-serve data infrastructure, treating data as a product and implementing open standardization to enable an ecosystem of interoperable distributed data products.</p>"
"2019-11",Ethical bias testing,Techniques,Assess,"<p>Over the past year, we've seen a shift in interest around machine learning and deep neural networks in particular. Until now, tool and technique development has been driven by excitement over the remarkable capabilities of these models. Currently though, there is rising concern that these models could cause unintentional harm. For example, a model could be trained to make profitable credit decisions by simply excluding disadvantaged applicants. Fortunately, we're seeing a growing interest in <strong>ethical bias testing</strong> that will help to uncover potentially harmful decisions. Tools such as <a href=""https://github.com/marcotcr/lime"">lime</a>, <a href=""https://aif360.mybluemix.net/"">AI Fairness 360</a> or <a href=""/radar/tools/what-if-tool"">What-If</a> can help uncover inaccuracies that result from underrepresented groups in training data and visualization tools such as <a href=""https://ai.googleblog.com/2017/07/facets-open-source-visualization-tool.html"">Google Facets</a> or <a href=""https://pair-code.github.io/facets/"">Facets Dive</a> can be used to discover subgroups within a corpus of training data. However, this is a developing field and we expect standards and practices specific to ethical bias testing to emerge over time.</p>"
"2019-11",Federated learning,Techniques,Assess,"<p>Model training generally requires collecting data from its source and transporting it to a centralized location where the model training algorithm runs. This becomes particularly problematic when the training data consists of personally identifiable information. We're encouraged by the emergence of <strong>federated learning</strong> as a privacy-preserving method for training on a large diverse set of data relating to individuals. Federated learning techniques allow the data to remain on the users' device, under their control, yet contribute to an aggregate corpus of training data. In one such technique, each user device updates a model independently; then the model parameters, rather than the data itself, are combined into a centralized view. Network bandwidth and device computational limitations present some significant technical challenges, but we like the way federated learning leaves users in control of their own personal information.</p>"
"2019-11",JAMstack,Techniques,Assess,"<p>The trend that started as <a href=""/radar/platforms/backend-as-a-service"">backend as a service</a> for native mobile apps many years ago is now becoming popular with web applications. We're seeing frameworks such as <a href=""/radar/languages-and-frameworks/gatsby-js"">Gatsby.js</a> that combine static site generation and client-side rendering with third-party APIs. Referred to as <strong><a href=""https://jamstack.org/"">JAMstack</a></strong> (the JAM stands for <strong>J</strong>avaScript, <strong>A</strong>PI, and <strong>M</strong>arkup), this approach can provide rich user experiences to web applications that rely mostly on APIs and SaaS offerings. Because the HTML is rendered either in the web browser or at build time, the deployment model is the same as fully statically generated sites, with all its benefits: the attack surface on the server is small and great performance can be achieved with low resource usage. Such deployments are also ideal for a content delivery network. In fact, we toyed with the idea of labelling this technique as <em>CDN first</em> applications.</p>"
"2019-11",Privacy-preserving record linkage (PPRL) using Bloom filter,Techniques,Assess,"<p>Linking records from different data providers in the presence of a shared key is trivial. However, you may not always have a shared key; even if you do, it may not be a good idea to expose it due to privacy concerns. <strong>Privacy-preserving record linkage (PPRL) using Bloom filter</strong> (a space-efficient probabilistic data structure) is an established technique that allows probabilistic linkage of records from different data providers without exposing privately identifiable personal data. For example, when linking data from two data providers, each provider encrypts its personally identifiable data using <a href=""https://en.wikipedia.org/wiki/Bloom_filter"">Bloom filter</a> to get cryptographic linkage keys and then sends them to you via a secure channel. Once data is received, the records can be linked by computing similarity scores between sets of cryptographic linkage keys from each provider. Among other techniques, we found PPRL using Bloom filters to be scalable for large data sets.</p>"
"2019-11",Semi-supervised learning loops,Techniques,Assess,"<p><strong>Semi-supervised learning loops</strong> are a class of iterative machine-learning workflows that take advantage of the relationships to be found in unlabeled data. These techniques may improve models by combining labeled and unlabeled data sets in various ways. In other cases they compare models trained on different subsets of the data. Unlike either unsupervised learning where a machine infers classes in unlabeled data or supervised techniques where the training set is entirely labeled, semi-supervised techniques take advantage of a small set of labeled data and a much larger set of unlabeled data. Semi-supervised learning is also closely related to active learning techniques where a human is directed to selectively label ambiguous data points. Since expert humans that can accurately label data are a scarce resource and labeling is often the most time-consuming activity in the machine-learning workflow, semi-supervised techniques lower the cost of training and make machine learning feasible for a new class of users.</p>"
"2019-11","10x engineers",Techniques,Hold,"<p>The old term <strong>10x engineer</strong> has come under scrutiny these past few months. A widely shared Twitter thread essentially suggests companies should excuse antisocial and damaging behaviors in order to retain engineers who are perceived as having immense individual output. Thankfully, many people on social media made fun of the concept, but the stereotype of the ""rockstar developer"" is still pervasive. In our experience, great engineers are driven not by individual output but by working in amazing teams. It's more effective to build teams of talented individuals with mixed experiences and diverse backgrounds and provide the right ingredients for teamwork, learning and continuous improvement. These 10x teams can move faster, scale more quickly and are much more resilient — without needing to pander to bad behaviors.</p>"
"2019-11",Front-end integration via artifact,Techniques,Hold,"<p>When teams embrace the concept of <a href=""/radar/techniques/micro-frontends"">micro frontends</a> they have a number of patterns at their disposal to integrate the individual micro frontends into one application. As always there are antipatterns, too. A common one in this case is <strong>front-end integration via artifact</strong>. For each micro frontend an artifact is built, usually an NPM package, which is pushed into a registry. A later step, sometimes in a different build pipeline, then combines the individual packages into a final package that contains all micro frontends. From a purely technical perspective this integration at build time results in a working application. However, integrating via artifact implies that for each change the full artifact needs to be rebuilt, which is time consuming and will likely have a negative impact on developer experience. Worse, this style of integrating frontends also introduces direct dependencies between the micro frontends at build time and therefore causes considerable coordination overhead.</p>"
"2019-11",Lambda pinball,Techniques,Hold,"<p>We've been building <a href=""/radar/techniques/serverless-architecture"">serverless</a> architectures on our projects for a couple of years now, and we've noticed that it's quite easy to fall into the trap of building a distributed monolith. <strong><a href=""https://twitter.com/ctford/status/1128774411832762369"">Lambda pinball</a></strong> architectures characteristically lose sight of important domain logic in the tangled web of lambdas, buckets and queues as requests bounce around increasingly complex graphs of cloud services. Typically they're hard to test as units, and the application needs must be tested as an integrated whole. One pattern we can use to avoid these pinball architectures is to draw a distinction between <a href=""https://martinfowler.com/ieeeSoftware/published.pdf"">public and published interfaces</a> and apply good old domain boundaries with published interfaces between them.</p>"
"2019-11",Legacy migration feature parity,Techniques,Hold,"<p>We find that more and more organizations need to replace aging legacy systems to keep up with the demands of their customers (both internal and external). One antipattern we keep seeing is <strong>legacy migration feature parity</strong>, the desire to retain feature parity with the old. We see this as a huge missed opportunity. Often the old systems have bloated over time, with many features unused by users (50% according to a <a href=""https://www.standishgroup.com/sample_research_files/Exceeding%20Value_Layout.pdf"">2014 Standish Group report</a>) and business processes that have evolved over time. Replacing these features is a waste. Our advice: Convince your customers to take a step back and understand what their users currently <em>need</em> and prioritize these needs against business outcomes and metrics — which often is easier said than done. This means conducting user research and applying modern product development practices rather than simply replacing the existing ones.</p>"
"2019-11",Apache Flink,Platforms,Trial,"<p><strong><a href=""https://flink.apache.org/"">Apache Flink</a></strong> has seen increasing adoption since our initial assessment on 2016. Flink is recognized as the leading stream-processing engine and also gradually matured in the fields of batch processing and machine learning. One of Flink's key differentiator from other stream-processing engines is its use of consistent checkpoints of an application's state. In the event of failure, the application is restarted and its state is loaded from the latest checkpoint — so that the application can continue processing as if the failure had never happened. This helps us to reduce complexity of building and operating external systems for fault tolerance. We see more and more companies using Flink to build their data-processing platform.</p>"
"2019-11",Apollo Auto,Platforms,Trial,"<p>Once exclusive to tech giants, self-driving technology isn't rocket science anymore, as demonstrated by <strong><a href=""http://apollo.auto/"">Apollo Auto</a></strong>. The goal of the Baidu-owned Apollo program is to become the Android of the autonomous driving industry. The Apollo platform has components such as perception, simulation, planning and intelligent control that enable car companies to integrate their own autonomous driving systems into their vehicles' hardware. The developer community is still new but with a lot of vendors joining to contribute more ports. One of our projects helped our client to complete self-driving license exams with the Apollo-based autopilot system. Apollo also provides an evolutionary architecture approach to adopt advanced features gradually, which enables us to integrate more sensors and functions in an agile, iterative way.</p>"
"2019-11",GCP Pub/Sub,Platforms,Trial,"<p><strong><a href=""https://cloud.google.com/pubsub/"">GCP Pub/Sub</a></strong> is Google Cloud's event streaming platform. It's a popular piece of infrastructure for many of our architectures running <a href=""/radar/platforms/google-cloud-platform"">Google Cloud Platform</a>, including mass event ingestion, communication of serverless workloads and streaming data-processing workflows. One of its unique features is support of pull and push subscriptions: subscribing to receive all published messages available at the time of subscription or pushing messages to a particular endpoint. Our teams have enjoyed its reliability and scale and that it just works as advertised.</p>"
"2019-11",Mongoose OS,Platforms,Trial,"<p><strong><a href=""http://mongoose-os.com/"">Mongoose OS</a></strong> remains one of our preferred open-source microcontroller operating systems and embedded firmware development frameworks. It's worth noting that Mongoose OS fills a noticeable gap for embedded software developers: the gap between Arduino firmware suitable for prototyping and bare-metal microcontrollers' native SDKs. Our teams have successfully used <a href=""https://mongoose-os.com/about.html"">Cesanta's</a> new end-to-end device management platform, <a href=""https://mdash.net/home/"">mDash</a>, for small-scale greenfield hardware projects. Major Internet of Things (IoT) cloud platform providers today support the Mongoose OS development framework for their device management, connectivity, and over-the-air (OTA) firmware upgrades. Since we last reported on Mongoose OS, the number of supported boards and microcontrollers has grown to include STM, Texas Instruments and Espressif. We continue to enjoy its seamless support for OTA updates and its built-in security at the individual device level.</p>"
"2019-11",AWS Cloud Development Kit,Platforms,Assess,"<p>For many of our teams <a href=""/radar/tools/terraform"">Terraform</a> has become the default choice for defining cloud infrastructure. However, some of our teams have been experimenting with <strong><a href=""https://docs.aws.amazon.com/cdk/latest/guide/home.html"">AWS Cloud Development Kit</a></strong> (AWS CDK) and they like what they've seen so far. In particular, they like the use of first-class programming languages instead of configuration files which allows them to use existing tools, test approaches and skills. Like similar tools, care is still needed to ensure deployments remain easy to understand and maintain. Given that support for C# and Java is coming soon and ignoring for now some gaps in functionality, we think AWS CDK is worth watching as an alternative to other configuration file–based approaches.</p>"
"2019-11",Azure DevOps,Platforms,Assess,"<p><strong><a href=""https://azure.microsoft.com/en-us/services/devops/"">Azure DevOps</a></strong> services include a set of managed services such as hosted Git repos, CI/CD pipelines, automated testing tooling, backlog management tooling and artifact repository. Azure DevOps Pipelines have been maturing over time. We particularly like its ability to define <a href=""/radar/techniques/pipelines-as-code"">Pipelines as code</a> and its ecosystem of extensions on the Azure DevOps <a href=""https://marketplace.visualstudio.com/azuredevops"">marketplace</a>. At the time of writing, our teams are still running into a few immature features, including lack of an effective UI for pipeline visualization and navigation and the inability to trigger a pipeline from artifacts or other pipelines.</p>"
"2019-11",Azure Pipelines,Platforms,Assess,"<p><strong><a href=""https://azure.microsoft.com/en-us/services/devops/pipelines/"">Azure Pipelines</a></strong> is a product of <a href=""/radar/platforms/azure-devops"">Azure DevOps</a> that offers cloud-based solutions to implement pipelines as code for projects hosted in Azure DevOps Git server or other Git solution such as GitHub or Bitbucket. The interesting part of this solution is the ability to run your scripts in Linux, MacOS and Windows agents without the overhead of managing a virtual machine on your own. This represents a big step forward, especially for teams that work on Windows environments with .NET Framework solutions; we're also assessing this service for continuous delivery in iOS.</p>"
"2019-11",Crowdin,Platforms,Assess,"<p>Most of the projects with multilingual support start with development teams building features in one language and managing the rest through offline translation via emails and spreadsheets. Although this simple setup works, things can quickly get out of hand. You may have to keep answering the same questions for different language translators, sucking the energy out of the collaboration between translators, proofreaders and the development team. <strong><a href=""https://crowdin.com"">Crowdin</a></strong> is one of a handful of platforms that help in streamlining the localization workflow of your project. With Crowdin the development team can continue building features and the platform streamlines the text that needs translation into an online workflow. We like that Crowdin nudges the teams to continuously and incrementally incorporate translation rather than managing them in large batches toward the end.</p>"
"2019-11",Crux,Platforms,Assess,"<p><strong><a href=""https://www.juxt.pro/crux/index.html"">Crux</a></strong> is an open-source document database with bitemporal graph queries. Most database systems are temporal, meaning they help us model facts along with the time at which they occurred. Bitemporal database systems let you model not just the <em>valid</em> time the fact occurred but also the <em>transaction</em> time when it was received. If you need a document store with graph capabilities for querying the content, then give Crux a try. It's currently in alpha and lacks SQL support, but you can use a <a href=""https://en.wikipedia.org/wiki/Datalog"">Datalog</a> query interface for reading and traversing relationships.</p>"
"2019-11",Delta Lake,Platforms,Assess,"<p><strong><a href=""https://docs.databricks.com/delta/index.html"">Delta Lake</a></strong> is an open-source storage layer by Databricks that attempts to bring transactions to big data processing. One of the problems we often encounter when using <a href=""/radar/platforms/apache-spark"">Apache Spark</a> is the lack of ACID transactions. Delta Lake integrates with the Spark API and addresses this problem by its use of a transaction log and versioned <a href=""https://parquet.apache.org/"">Parquet</a> files. With its serializable isolation, it allows concurrent readers and writers to operate on Parquet files. Other welcome features include schema enforcement on write and versioning, which allows us to query and revert to older versions of data if necessary. We've started to use it in some of our projects and quite like it.</p>"
"2019-11",Fission,Platforms,Assess,"<p><a href=""/radar/platforms/kubernetes"">Kubernetes</a>'s serverless ecosystem is growing. We talked about <a href=""/radar/platforms/knative"">Knative</a> in a previous Radar; now we're seeing <strong><a href=""https://fission.io/"">Fission</a></strong> gaining traction. Fission lets developers focus on writing short-lived functions and map them to HTTP requests while the framework handles the rest of the plumbing and automation of Kubernetes resources behind the scenes. Fission also lets you <a href=""https://fission.io/workflows/"">compose functions</a>, integrate with third-party providers via web hooks and automate the management of the Kubernetes infrastructure.</p>"
"2019-11",FoundationDB,Platforms,Assess,"<p><strong><a href=""https://www.foundationdb.org"">FoundationDB</a></strong> is an open-source multimodel database, acquired by Apple in 2015 and then open sourced in April 2018. The core of FoundationDB is a distributed key-value store, which provides strict serializability transactions. One of the interesting aspects of FoundationDB is its concept of layers to offer additional models. These layers are essentially stateless components built on top of the core key-value store, such as the <a href=""https://www.foundationdb.org/blog/announcing-record-layer/"">Record layer</a> and the <a href=""https://www.foundationdb.org/blog/announcing-document-layer/"">Document layer</a>. FoundationDB sets a high standard with its <a href=""https://apple.github.io/foundationdb/testing.html"">Simulation testing</a> where they run daily tests simulating various system failures. With its performance, rigorous testing and easy operability, FoundationDB is not just a database but can also be used by those looking to build distributed systems where they can use FoundationDB as a core primitive on which to build their system.</p>"
"2019-11",Arrow,languages-and-frameworks,Trial,"<p><strong><a href=""https://arrow-kt.io/"">Arrow</a></strong> is a functional programming library for <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a>, created by merging two existing popular libraries (<a href=""https://github.com/JcMinarro/kategory"">kategory</a> and <a href=""https://github.com/MarioAriasC/funKTionale"">funKTionale</a>). While Kotlin provides building blocks for functional programming, Arrow delivers a package of ready-to-use higher-level abstractions for application developers. It provides data types, type classes, effects, optics and other functional programming patterns as well as integrations with popular libraries. Our initial positive impressions of Arrow were confirmed when using it to build applications that are now in production.</p>"
"2019-11",GraalVM,Platforms,Assess,"<p><strong><a href=""https://www.graalvm.org/"">GraalVM</a></strong> is a universal virtual machine by Oracle for running applications written in JVM languages, JavaScript, Python, Ruby and R, as well as C/C++ and other LLVM-based languages. At its simplest, GraalVM can be used as a more performant VM for JVM and other supported non-JVM languages. But it also allows us to write polyglot applications with very little performance impact; and its <a href=""https://www.graalvm.org/docs/reference-manual/native-image/"">Native Image</a> utility (currently only available as an <a href=""https://docs.oracle.com/en/graalvm/enterprise/19/guide/overview/license/licensing-information.html"">Early Adopter Technology</a>) lets us compile Java code ahead of time to stand-alone executables for faster startup and less memory use. GraalVM has generated a lot of excitement in the Java community, and a host of Java frameworks (including <a href=""/radar/languages-and-frameworks/micronaut"">Micronaut</a>, <a href=""https://quarkus.io/"">Quarkus</a>, and <a href=""https://helidon.io/#/"">Helidon</a>) are already taking advantage of it.</p>"
"2019-11",Hydra,Platforms,Assess,"<p>Not everyone needs a self-hosted OAuth2 solution, but if you do, we found <strong><a href=""https://www.ory.sh/hydra/"">Hydra</a></strong> — a fully compliant open-source OAuth2 server and OpenID connect provider — quite useful. We really like that Hydra doesn't provide any identity management solutions out of the box; so no matter what flavor of identity management you have, it's possible to integrate it with Hydra through a clean API. This clear separation of identity from the rest of the OAuth2 framework makes it easier to integrate Hydra with an existing authentication ecosystem.</p>"
"2019-11",Kuma,Platforms,Assess,"<p><strong><a href=""https://kuma.io"">Kuma</a></strong> is a platform-agnostic <a href=""/radar/techniques/service-mesh"">service mesh</a> for <a href=""/radar/platforms/kubernetes"">Kubernetes</a>, VMs and bare metal environments. Kuma is implemented as a control plane on top of <a href=""https://www.envoyproxy.io/"">Envoy</a> and as such can instrument any Layer 4/Layer 7 traffic to secure, observe, route and enhance connectivity between services. Most of the service mesh implementations are targeted natively at the Kubernetes ecosystem which in itself is not bad but hinders the adoption of service mesh for existing non-Kubernetes applications. Rather than waiting for large platform transformation efforts to be complete, you can now use Kuma and modernize the network infrastructure.</p>"
"2019-11",MicroK8s,Platforms,Assess,"<p>We talked about <a href=""/radar/platforms/kubernetes"">Kubernetes</a> in the past and it continues to be the default choice for deploying and managing containers in production clusters. However, it's getting increasingly difficult to provide a similar experience offline for developers. Among other options, we've found <strong><a href=""https://microk8s.io/"">MicroK8s</a></strong> to be quite useful. To install the <a href=""https://snapcraft.io/microk8s"">MicroK8s snap</a>, pick a release channel (stable, candidate, beta or edge), and you can get Kubernetes running with a few commands. You can also keep track of mainstream releases and choose to upgrade your setup automatically.</p>"
"2019-11",Oculus Quest,Platforms,Assess,"<p>We've long tracked AR/VR (Augmented/Virtual Reality) in our Radar, but its appeal has been limited to specific platforms and tethering options. The <strong>Oculus Quest</strong> changes the game, becoming one of the first consumer mass-market standalone VR headsets that requires no tethering or support outside a smartphone. This device opens the door for a huge jump in potential exposure to VR applications, whose demand will in turn drive the market toward more aggressive innovation. We applaud the democratization of VR this device helps usher in and can't wait to see what's on the horizon.</p>"
"2019-11",ONNX,Platforms,Assess,"<p>The tools and frameworks ecosystem around neural networks have been evolving rapidly. The interoperability between them, however, has been a challenge. It's not uncommon in the ML industry to quickly prototype and train the model in one tool and then deploy it in a different tool for inference. Because the internal format of these tools aren't compatible, we need to implement and maintain messy convertors to make the models compatible. The Open Neural Network Exchange format <strong><a href=""https://onnx.ai/"">ONNX</a></strong> addresses this problem. In ONNX, the neural networks are represented as graphs using standard operator specifications, and together with a serialization format for trained weights, neural network models can be <a href=""https://onnx.ai/supported-tools"">transferred from one tool to another</a>. This opens up lots of possibilities, including <a href=""https://github.com/onnx/models"">Model Zoo</a>, a collection of pretrained models in ONNX format.</p>"
"2019-11",Rootless containers,Platforms,Assess,"<p>Ideally, containers should be managed and run by the respective container runtime without root privileges. This is not trivial but when achieved, it reduces the attack surface and avoids whole classes of security problems, notably privilege escalation out of the container. The community has discussed this as <strong>rootless containers</strong> for quite a while, and it is part of the open container runtime specification and its standard implementation <a href=""https://github.com/opencontainers/runc#rootless-containers"">runc</a>, which underpins <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. Now, Docker 19.03 introduces rootless containers as an experimental feature. Although fully functional, the feature doesn't yet work with several other features such as cgroups resource controls and <a href=""https://wiki.ubuntu.com/AppArmor"">AppArmor</a> security profiles.</p>"
"2019-11",Snowflake,Platforms,Assess,"<p>We often relate data warehousing to a central infrastructure that is hard to scale and manage with the growing demands around data. <strong><a href=""https://www.snowflake.com"">Snowflake</a></strong>, however, is a new SQL Data Warehouse as a Service solution built from the ground up for the cloud. With a bunch of neatly crafted features such as database-level atomicity, structured and semi-structured data support, in-database analytics functions and above all with a clear separation of storage, compute and services layer, Snowflake addresses most of the challenges faced in data warehousing.</p>"
"2019-11",Teleport,Platforms,Assess,"<p><strong><a href=""https://gravitational.com/teleport/"">Teleport</a></strong> is a security gateway for remotely accessing cloud native infrastructures. One of Teleport's interesting <a href=""https://gravitational.com/teleport/features/"">features</a> is its ability to double as a Certificate Authority (CA) for your infrastructure. You can issue short-lived certificates and build richer role-based access control (RBAC) for your <a href=""/radar/platforms/kubernetes"">Kubernetes</a> infrastructure (or for just SSH). With increased focus on infrastructure security it's important to keep track of changes. However, not all events require the same level of auditing. With Teleport you can stick with logging for most of the events but go the extra mile by recording the user screen for more privileged root sessions.</p>"
"2019-11",Micronaut,languages-and-frameworks,Trial,"<p><strong><a href=""https://micronaut.io/"">Micronaut</a></strong> is a JVM framework for building services using Java, <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> or Groovy. It distinguishes itself through a small memory footprint and short startup time; it achieves these improvements by avoiding runtime reflection for <a href=""https://martinfowler.com/articles/injection.html"">dependency injection (DI)</a> and proxy generation, a common shortcoming of traditional frameworks, and instead uses a DI/<a href=""https://en.wikipedia.org/wiki/Aspect-oriented_programming"">AOP</a> container which performs dependency injection at compile time. This makes it attractive not just for standard server-side microservices but also in the context of, for example, the Internet of Things, Android applications and serverless functions. Micronaut uses Netty and has first-class support for reactive programming. It also includes features such as service discovery and circuit breaking that make it cloud-native friendly. Micronaut is a very promising entrant to the full-stack framework for the JVM space, and we're seeing it in more and more projects in production, prompting us to move it to Trial.</p>"
"2019-11",React Hooks,languages-and-frameworks,Trial,"<p>Earlier this year, <strong><a href=""https://reactjs.org/docs/hooks-intro.html"">React Hooks</a></strong> were introduced to the popular JavaScript framework. They make it possible to use state and other React features without writing a class, offering a cleaner approach than higher-order components or render-props for use cases. Libraries such as <a href=""/radar/languages-and-frameworks/material-ui"">Material UI</a> and <a href=""/radar/languages-and-frameworks/apollo"">Apollo</a> have already switched to using Hooks. There are some issues with testing Hooks, especially with Enzyme, which contributed to our reassessment of <a href=""/radar/languages-and-frameworks/enzyme"">Enzyme</a> as the tool of choice.</p>"
"2019-11",React Testing Library,languages-and-frameworks,Trial,"<p>The JavaScript world moves pretty fast, and as we gain more experience using a framework our recommendations change. The <strong><a href=""https://testing-library.com/"">React Testing Library</a></strong> is a good example of a framework that with deeper usage has eclipsed the alternatives to become the sensible default when testing React-based frontends. Our teams like the fact that tests written with this framework are less brittle than with alternative frameworks such as <a href=""/radar/languages-and-frameworks/enzyme"">Enzyme</a> because you're encouraged to test component relationships individually as opposed to testing all implementation details.</p>"
"2019-11",Styled components,languages-and-frameworks,Trial,"<p>Using tagged template literals <strong><a href=""https://www.styled-components.com/"">styled components</a></strong> make it possible to put the CSS needed to style a React component directly into the JavaScript code that creates the component. This greatly reduces the pain with managing CSS and obviates the need for naming conventions or other means of avoiding naming conflicts in CSS. Developers can see the styling when looking at the component definition, and they don't have to memorize several megabytes worth of CSS. Of course, placing the CSS into the JavaScript code can make it harder to get a consistent view across the styling of different components, which is why we recommend understanding the trade-offs with this approach.</p>"
"2019-11",TensorFlow,languages-and-frameworks,Trial,"<p>With its 2.0 release, <strong><a href=""https://www.tensorflow.org/"">TensorFlow</a></strong> retains its prominence as the industry’s leading machine learning framework. TensorFlow began as a numerical processing package that gradually expanded to include libraries supporting a variety of ML approaches and execution environments, ranging from mobile CPU to large GPU clusters. Along the way, a slew of frameworks became available to simplify the tasks of network creation and training. At the same time, other frameworks, notably <a href=""/radar/languages-and-frameworks/pytorch"">PyTorch</a>, offered an imperative programming model that made debugging and execution simpler and easier. TensorFlow 2.0 now defaults to imperative flow (eager execution) and adopts <a href=""/radar/languages-and-frameworks/keras"">Keras</a> as the single high-level API. While these changes modernize TensorFlow's usability and make it more competitive with PyTorch, it is a significant rewrite that often breaks backward compatibility — many tools and serving frameworks in the TensorFlow ecosystem won't immediately work with the new version. For the time being, consider whether you want to design and experiment in TensorFlow 2.0 but revert to version 1 to serve and run your models in production.</p>"
"2019-11",Fairseq,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/pytorch/fairseq"">Fairseq</a></strong> is a sequence-to-sequence modelling toolkit by Facebook AI Research that allows researchers and developers to train custom models for translation, summarization, language modeling and other NLP tasks. For users of <a href=""/radar/languages-and-frameworks/pytorch"">PyTorch</a>, this is a good choice. It provides reference implementations of various sequence-to-sequence models; supports distributed training across multiple GPUs and machines; is very extensible; and has a bunch of pretrained models, including <a href=""https://github.com/pytorch/fairseq/blob/master/examples/roberta/README.md"">RoBERTa</a> which is an optimization on top of <a href=""/radar/techniques/bert"">BERT</a>.</p>"
"2019-11",Flair,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/zalandoresearch/flair"">Flair</a></strong> is a simple Python-based framework for NLP processing. It allows users to do standard NLP tasks such as <a href=""https://en.wikipedia.org/wiki/Named-entity_recognition"">named entity recognition (NER)</a>, <a href=""https://en.wikipedia.org/wiki/Part-of-speech_tagging"">part-of-speech tagging (PoS)</a>, <a href=""https://en.wikipedia.org/wiki/Word-sense_disambiguation"">word-sense disambiguation</a> and classification and performs well on a range of NLP tasks. Flair presents a simple and unified interface for a variety of word and document embeddings, including <a href=""/radar/techniques/bert"">BERT</a>, Elmo and its own Flair embeddings. It also has multilingual support. The framework itself is built on top of <a href=""/radar/languages-and-frameworks/pytorch"">PyTorch</a>. We're using it in some of our projects and like its ease of use and powerful abstractions.</p>"
"2019-11",Yocto Project,Tools,Trial,"<p>Increasingly we're seeing powerful Internet of Things devices that run Linux rather than a special embedded OS. In order to reduce resource usage and decrease the attack surface, it makes sense to build a custom Linux distribution that only contains the tools and dependencies needed to run the software on the device. In this context the <strong><a href=""https://www.yoctoproject.org/"">Yocto Project</a></strong> has renewed relevance as a tool to create a Linux distribution tailored to the needs of a specific case. The learning curve is steep and due to its flexibility, it can be easy to do the wrong thing. However, over the many years of its existence, the Yocto Project has attracted an active community that can help. Compared to similar tools, it's easier to integrate into a CD workflow and, unlike Android Things or Ubuntu core for example, it's not tied to a specific ecosystem.</p>"
"2019-11",Gatsby.js,languages-and-frameworks,Assess,"<p><strong><a href=""https://www.gatsbyjs.org/"">Gatsby.js</a></strong> is a framework to write web applications in an architectural style known as <a href=""/radar/techniques/jamstack"">JAMstack</a>. Part of the application is generated at build time and deployed as a static site, while the remainder of the functionality is implemented as a <a href=""https://en.wikipedia.org/wiki/Progressive_web_applications"">progressive web application (PWA)</a> running in the browser. Such applications work without code running on the server side. Usually, though, the PWA makes calls to third-party APIs and SaaS solutions for content management, for example. In the case of Gatsby.js, all client and build time code is written using React. The framework includes some optimizations to make the web application feel fast. It provides code and data splitting out of the box to minimize load times and speeds up performance when navigating the application by prefetching resources. APIs are called via <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> and several plugins simplify integration with existing services.</p>"
"2019-11",GraphQL,languages-and-frameworks,Assess,"<p>We've seen many successful <strong><a href=""https://github.com/facebook/graphql"">GraphQL</a></strong> implementations on our projects. We've seen some interesting patterns of use too, including <a href=""/radar/techniques/graphql-for-server-side-resource-aggregation"">GraphQL for server-side resource aggregation</a>. That said, we've concerns about misuse of this framework and some of the problems that can occur. Examples include performance gotchas around N+1 queries and lots of boilerplate code needed when adding new models, leading to complexity. There are workarounds to these gotchas such as query caching. Even though it's not a silver bullet, we still think it's worth assessing as part of your architecture.</p>"
"2019-11",KotlinTest,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/kotlintest/kotlintest"">KotlinTest</a></strong> is a stand-alone testing tool for the <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> ecosystem that our teams have come to like. It allows <a href=""/radar/techniques/property-based-unit-testing"">property-based testing</a>, a technique we've highlighted in the Radar before. Key advantages are that it offers a variety of testing styles in order to structure the test suites and that it comes with a comprehensive set of matchers, which allow for expressive tests in an elegant internal DSL.</p>"
"2019-11",NestJS,languages-and-frameworks,Assess,"<p><strong><a href=""https://nestjs.com/"">NestJS</a></strong> is a server-side Node.js framework written in <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a>. By integrating the rich ecology of the Node.js community, NestJS provides an out-of-the-box application architecture. The mental model to develop NestJS is similar to the server-side version of Angular or the TypeScript version of Spring Boot, so the learning curve for developers is low. NestJS supports protocols such as <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a>, Websocket and ORM libraries.</p>"
"2019-11",Paged.js,languages-and-frameworks,Assess,"<p>When using HTML and related technologies to produce books and other print output, the question of pagination must be considered. This includes page counters, repeated elements in headers and footers, as well as mechanisms to avoid awkward page breaks. <strong><a href=""https://www.pagedmedia.org/paged-js/"">Paged.js</a></strong> is an open-source library that implements a series of polyfills for the <a href=""https://www.w3.org/TR/css-page-3/"">Paged Media</a> and <a href=""https://www.w3.org/TR/css-gcpm-3/"">Generated Content for Paged Media</a> CSS modules. It is still experimental but fills an important gap in the ""write once, publish everywhere"" story for HTML.</p>"
"2019-11",Quarkus,languages-and-frameworks,Assess,"<p><strong><a href=""https://quarkus.io/"">Quarkus</a></strong> is a cloud-native, container-first framework by Red Hat for writing Java applications. It has a very fast startup time (tens of milliseconds) and has low memory utilization which makes it a good candidate for FaaS or frequent scaling up and down in a container orchestrator. Like <a href=""/radar/languages-and-frameworks/micronaut"">Micronaut</a>, Quarkus achieves this by using ahead-of-time compilation techniques to do dependency injection at compile time and avoid the runtime costs of reflection. It also works well with <a href=""/radar/platforms/graalvm"">GraalVM</a>'s Native Image which further reduces startup time. Quarkus supports both imperative and reactive models. Along with Micronaut and <a href=""https://helidon.io/#/"">Helidon</a>, Quarkus is leading the charge on the new generation of Java frameworks which attempt to address startup performance and memory without sacrificing developer effectiveness. It's gained a lot of community attention and is worth keeping an eye on.</p>"
"2019-11",SwiftUI,languages-and-frameworks,Assess,"<p>Apple has taken a big step forward with their new <strong><a href=""https://developer.apple.com/xcode/swiftui/"">SwiftUI</a></strong> framework for implementing user interfaces on macOS and iOS platforms. We like that SwiftUI moves beyond the somewhat kludgy relationship between Interface Builder and XCode and adopts a coherent, declarative and code-centric approach. You can now view your code and the resulting visual interface side by side in XCode 11, making for a much better developer experience. The SwiftUI framework also draws inspiration from the <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> world that has dominated web development in recent years. Immutable values in view models and an asynchronous update mechanism make for a unified reactive programming model. This gives developers an entirely native alternative to similar reactive frameworks such as <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> or <a href=""/radar/languages-and-frameworks/flutter"">Flutter</a>. Although SwiftUI definitely represents the future of Apple UI development, it is quite new and it will take time to smooth out the rough edges. We look forward to improved documentation and a community of developers who can establish a set of practices for testing and other engineering concerns.</p>"
"2019-11",Testcontainers,languages-and-frameworks,Assess,"<p>Creating reliable environments for running automated tests is a perennial problem, particularly as the number of components that modern systems depend on keeps increasing. <strong><a href=""https://www.testcontainers.org/"">Testcontainers</a></strong> is a Java library that helps mitigate this challenge by managing dockerized dependencies for your tests. This is particularly useful for spinning up repeatable database instances or similar infrastructure, but it can also be used in web browsers for UI testing. Our teams have found this library to be helpful for making integration tests more reliable with these programmable, lightweight and disposable containers.</p>"
"2019-11",Enzyme,languages-and-frameworks,Hold,"<p>We don't always move deprecated tools to Hold in the Radar, but our teams feel strongly that <strong><a href=""http://airbnb.io/enzyme/"">Enzyme</a></strong> has been replaced for unit testing <a href=""/radar/languages-and-frameworks/react-js"">React</a> UI components by <a href=""https://testing-library.com/docs/intro"">React Testing Library</a>. Teams using Enzyme have found that its focus on testing component internals leads to brittle, unmaintainable tests.</p>"
"2019-11",ESLint,Tools,Adopt,"<p><strong><a href=""https://eslint.org/"">ESLint</a></strong> is being used as a standard in many of our projects. As a linting tool for JavaScript it has multiple rule sets, recommended rules and plugins in order to extend to frameworks or JavaScript flavors. We've seen it leveraged heavily to help teams create and enforce norms in their code by allowing for real-time analysis of code during development. It can be used to standardize coding practices by enforcing best practices and code styling, and identify vulnerabilities in your code. It does so by integrating well with most IDEs and giving live feedback while coding. It's styling rules in particular will automatically fix the linting errors, making the process seamless and effective without incurring additional development cost. Developers can quickly get up to speed with the rules thanks to the community documentation, which does a good job of explaining coding patterns. As ESLint becomes more common and powerful, it has gained traction in the industry, and this is illustrated by the <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a> team's move to support and work with ESLint rather than investing in TSLint.</p>"
"2019-11",React Styleguidist,Tools,Adopt,"<p><strong><a href=""https://github.com/styleguidist/react-styleguidist"">React Styleguidist</a></strong> is a development environment for React components. It includes a dev server with hot reloading capabilities and generates an HTML style guide for sharing with teams. The style guide shows a live version of all components in one place with documentation and a list of their props. We've mentioned React Styleguidist as a <a href=""/radar/tools/ui-dev-environments"">UI dev environment</a> before, and over time it has become our default choice among similar tools in this space.</p>"
"2019-11",Bitrise,Tools,Trial,"<p>Building, testing and deploying mobile applications entails complex steps, especially when we consider a pipeline from source code repository to app stores. All of these steps can be automated with scripts and build pipelines in generic CI/CD tools. However, our teams have found <strong><a href=""https://www.bitrise.io"">Bitrise</a></strong>, a domain-specific CD tool for mobile applications, useful for mobile applications when there was no need to integrate with build pipelines for back-end systems. Bitrise is easy to set up and provides a comprehensive set of prebuilt steps for most mobile development needs.</p>"
"2019-11",Dependabot,Tools,Trial,"<p>Keeping dependencies up to date is a chore, but for security reasons it's important to respond to updates in a timely manner. You can use tools to make this process as painless and automated as possible. In practical use our teams have had good experiences with <strong><a href=""http://dependabot.com/"">Dependabot</a></strong>. It integrates with GitHub repositories and automatically checks dependencies for new versions. When required, Dependabot will open a pull request with upgraded dependencies.</p>"
"2019-11",Detekt,Tools,Trial,"<p><strong><a href=""https://github.com/arturbosch/detekt"">Detekt</a></strong> is a static code analysis tool for <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a>. It provides code smell analysis and complexity reports based on highly configurable rule sets. It can be run from the command line and, using plugins, via <a href=""/radar/tools/gradle"">Gradle</a>, <a href=""https://www.sonarqube.org/"">SonarQube</a> and IntelliJ. Our teams have found great value in using Detekt to maintain high code quality. When analysis and report generation are integrated into a build pipeline, it's obviously important that the reports are checked on a regular basis and the team sets aside time to act on the findings.</p>"
"2019-11",Figma,Tools,Trial,"<p>One of the great pain points in interaction and visual design is the lack of tools built for collaboration. This is where <strong><a href=""https://www.figma.com/"">Figma</a></strong> comes in. It has the same functionalities of design programs such as Sketch and Invision, but by being able to collaborate with another person at the same time, it helps you discover new ideas together with real-time collaboration capabilities. Our teams find Figma very useful, especially in remote and distributed design work enablement and facilitation. In addition to its collaboration capabilities, Figma also offers an API that helps to improve the <a href=""/radar/techniques/designops"">DesignOps</a> process.</p>"
"2019-11",Jib,Tools,Trial,"<p>Building containerized applications can require complex configurations in development environments and on build agents. If you're building a Java application and use Docker, you might consider using Google's <strong><a href=""https://github.com/GoogleContainerTools/jib"">Jib</a></strong>. Jib is an open-source plugin supporting both Maven and Gradle. The Jib plugin uses information from your build config to build your application directly as a Docker image without requiring a Dockerfile or Docker daemon. Jib optimizes around image layering, promising to speed up subsequent builds.</p>"
"2019-11",Loki,Tools,Trial,"<p><strong><a href=""https://loki.js.org"">Loki</a></strong> is a visual regression tool that works with <a href=""https://storybook.js.org/"">Storybook</a>, which we mentioned previously in the context of <a href=""/radar/tools/ui-dev-environments"">UI dev environments</a>. With a few lines of configuration, Loki can be used to test all UI components. The preferred mode of operation is using Chrome in a Docker container as this avoids one-pixel differences when tests are run in nonidentical environments. Our experience has been that the tests are very stable, but updates to Storybook tend to cause tests to fail with minor differences. It also seems impossible to test components which use <code>position: fixed</code> but you can work around that by wrapping the component with a <code>fixed</code>.</p>"
"2019-11",Trivy,Tools,Trial,"<p>Build pipelines that create and deploy containers should include <a href=""/radar/techniques/container-security-scanning"">container security scanning</a>. Our teams particularly like <strong><a href=""https://github.com/aquasecurity/trivy"">Trivy</a></strong>, a vulnerability scanner for containers, because it's easier to set up than other tools, thanks to it shipping as a stand-alone binary. Other benefits of Trivy are that it's open-source software and that it supports <a href=""/radar/techniques/distroless-docker-images"">distroless containers</a>.</p>"
"2019-11",Twistlock,Tools,Trial,"<p><strong><a href=""https://www.twistlock.com/"">Twistlock</a></strong> is a commercial product with build-time and run-time security vulnerability detection and prevention capabilities. These capabilities span protecting VMs, container schedulers and containers to various registries and repositories that applications rely on. Twistlock has helped our teams accelerate development of regulated applications, where application infrastructure and architecture require compliance with, for example, Payment Card Industry (PCI) standards and the Health Insurance Portability and Accountability Act (HIPAA). Our teams have enjoyed the developer experience that Twistlock provides: the ability to run provisioning as code, the easy integration with other common observability platforms, and the out-of-the-box benchmarks to measure the infrastructure against industry-consensus best practices. We run Twistlock with regular runtime scans over our cloud-native applications, particularly when regulatory compliance is required.</p>"
"2019-11",Aplas,Tools,Assess,"<p>It's often very difficult to get a handle on our software estates as they grow ever more complex. <strong><a href=""https://aplas.com/public"">Aplas</a></strong> is a new software mapping tool that can be used to create visualizations of our software landscapes in the form of maps. The tool works by ingesting metadata about your existing systems and then displaying a map over which various views can be projected. Ingestion is either a manual process or one that can be automated via APIs. We're pretty excited to see this product evolve and to see what's possible with the automated collection of metadata. It should be possible, for example, to expose <a href=""/radar/techniques/architectural-fitness-function"">architectural fitness functions</a> such as <a href=""/radar/techniques/run-cost-as-architecture-fitness-function"">run cost</a> to create visualizations of how much is being spent on cloud infrastructure. Understanding which systems talk to other systems via which technology is another problem we often face and Aplas can visualize it for us.</p>"
"2019-11",asdf-vm,Tools,Assess,"<p><strong><a href=""https://asdf-vm.com"">asdf-vm</a></strong> is a command-line tool to manage runtime versions of multiple languages, per project. It's similar to other command-line version management tools, such as <a href=""https://rvm.io/"">RVM</a> for Ruby and <a href=""https://github.com/nvm-sh/nvm"">nvm</a> for Node.js, with the advantage of an extensible plugin architecture to handle multiple languages. Its list of current <a href=""https://asdf-vm.com/#/plugins-all"">plugins</a> include many languages as well as tools such as <a href=""https://github.com/rajatvig/asdf-bazel"">Bazel</a> or <a href=""https://github.com/RykHawthorn/asdf-tflint"">tflint</a>, whose runtime version you may need to manage per project.</p>"
"2019-11",AWSume,Tools,Assess,"<p><strong><a href=""https://github.com/trek10inc/awsume"">AWSume</a></strong> is a convenient script to manage AWS session tokens and assume role credentials from the command line. We find AWSume quite handy when we deal with multiple AWS accounts at the same time. Instead of specifying profiles individually in every command, the script reads from the CLI cache and exports them to environment variables. As a result, both the commands and AWS SDKs pick up the right credentials.</p>"
"2019-11",dbt,Tools,Assess,"<p>Data transformation is an essential part of data-processing workflows: filtering, grouping or joining multiple sources into a format that is suitable for analyzing data or feeding machine-learning models. <strong><a href=""https://www.getdbt.com"">dbt</a></strong> is an open-source tool and a commercial SaaS product that provides simple and effective transformation capabilities for data analysts. The current frameworks and tooling for data transformation fall either into the group of <em>powerful and flexible</em> — requiring intimate understanding of the programming model and languages of the framework such as <a href=""/radar/platforms/apache-spark"">Apache Spark</a> — or in the group of dumb drag-and-drop UI tools that don't lend themselves to reliable engineering practices such as automated testing and deployment. dbt fills a niche: it uses SQL — an interface widely understood — to model simple batch transformations, while it provides command-line tooling that encourages good engineering practices such as versioning, automated testing and deployment; essentially it implements SQL-based transformation modeling as code. dbt currently supports multiple <a href=""https://docs.getdbt.com/docs/supported-databases"">data sources</a>, including <a href=""/radar/platforms/snowflake"">Snowflake</a> and Postgres, and provides various <a href=""https://docs.getdbt.com/docs/running-dbt-in-production"">execution options</a>, such as <a href=""/radar/tools/airflow"">Airflow</a> and Apache's own cloud offering. Its transformation capability is limited to what SQL offers, and it doesn't support real-time streaming transformations at the time of writing.</p>"
"2019-11",Docker Notary,Tools,Assess,"<p><strong><a href=""https://docs.docker.com/notary/"">Docker Notary</a></strong> is an OSS tool that enables signing of assets such as images, files and containers. This means that the provenance of assets can be asserted which is superuseful in regulated environments and better practice everywhere. As an example, when a container is created, it's signed by a private key and a hash, tied to the publisher's identity, stored as metadata. Once published, the provenance of the container (or other asset) can be checked using the image hash and the publisher's public key. There are publicly available, trusted registries such as the <a href=""https://docs.docker.com/ee/dtr/"">Docker Trusted Registry</a>, but it's also possible to run your own. Our teams have reported some spiky edges running local Notary servers and suggest using a registry that includes Notary where possible.</p>"
"2019-11",Facets,Tools,Assess,"<p>Given the growing amount of weighty decisions that are derived from large data sets, either directly or as training input for machine learning models, it's important to understand the gaps, flaws and potential biases in your data. Google's <strong><a href=""https://pair-code.github.io/facets/"">Facets</a></strong> project provides two helpful tools in this space: Facets Overview and Facets Dive. Facets Overview visualizes the distribution of values for features in a data set, can show training and validation set skew and can be used to compare multiple data sets; Facets Dive is for drilling down and visualizing individual data points in large data sets, using different visual dimensions to explore the relationships between attributes. They're both useful tools in carrying out <a href=""/radar/techniques/ethical-bias-testing"">ethical bias testing</a>.</p>"
"2019-11",Falco,Tools,Assess,"<p>With increased adoption of <a href=""/radar/platforms/kubernetes"">Kubernetes</a> as container orchestrator, the security toolset around containers and Kubernetes is evolving rapidly. <strong><a href=""https://falco.org/"">Falco</a></strong> is one such container-native tool aimed at addressing runtime security. Falco leverages <a href=""https://sysdig.com/blog/fascinating-world-linux-system-calls/"">Sysdig's Linux kernel instrumentation</a> and system call profiling and lets us gain deep insights into system behavior and helps us detect abnormal activities in applications, containers, underlying host or Kubernetes orchestrator itself. We like Falco's capability to detect threats without injecting third-party code or sidecar containers.</p>"
"2019-11",in-toto,Tools,Assess,"<p>We're seeing increased use of <a href=""/radar/techniques/binary-attestation"">Binary attestation</a> for securing the software supply chain, particularly within regulated industries. The currently favored approaches seem to involve either building a custom system for implementing the binary verification or relying on a cloud vendor's service. We're encouraged to see the open-source <strong><a href=""https://github.com/in-toto/in-toto"">in-toto</a></strong> enter this space. in-toto is a framework for cryptographically verifying every component and step along the path to production for a software artifact. The project includes a number of integrations into many widely used build, container auditing and deployment tools. A software supply chain tool can be a critical piece of an organization's security apparatus, so we like that as an open-source project, in-toto's behavior is transparent, and its own integrity and supply chain can be verified by the community. We'll have to wait and see if it'll gain a critical mass of users and contributors to compete in this space.</p>"
"2019-11",Kubeflow,Tools,Assess,"<p><strong><a href=""https://www.kubeflow.org/"">Kubeflow</a></strong> is interesting for two reasons. First, it is an innovative use of <a href=""/radar/tools/kubernetes-operators"">Kubernetes Operators</a> which we've spotlighted in our April 2019 edition of the Radar. Second, it provides a way to encode and version machine-learning workflows so that they can be more easily ported from one execution environment to another. Kubeflow consists of several components, including Jupyter notebooks, data pipelines, and control tools. Several of these components are packaged as Kubernetes operators to draw on Kubernetes's ability to react to events generated by pods implementing various stages of the workflow. By packaging the individual programs and data as containers, entire workflows can be ported from one environment to another. This can be useful when moving a useful but computationally challenging workflow developed in the cloud to a custom supercomputer or tensor processing unit cluster.</p>"
"2019-11",MemGuard,Tools,Assess,"<p>If your application handles sensitive information (such as cryptographic keys) as plain text in memory, there's a high probability that someone could potentially exploit it as an attack vector and compromise the information. Most of the cloud-based solutions often use <a href=""https://en.wikipedia.org/wiki/Hardware_security_module"">hardware security modules (HSM)</a> to avoid such attacks. However, if you're in a situation where you need to do this in a self-hosted manner without access to HSMs, then we've found <strong><a href=""https://github.com/awnumar/memguard"">MemGuard</a></strong> to be quite useful. MemGuard acts as a secured software enclave for storage of sensitive information in memory. Although MemGuard is not a replacement for HSMs, it does deploy a number of security tactics such as protection against cold boot attacks, avoiding interference with garbage collection and fortifying with guard pages to reduce the likelihood of sensitive data being exposed.</p>"
"2019-11",Open Policy Agent (OPA),Tools,Assess,"<p>Defining and enforcing security policies uniformly across a diverse technology landscape is a challenge. Even for simple applications, you have to control access to their components — such as container orchestrators, services and data stores to keep the services' state — using their components' built-in security policy configuration and enforcement mechanisms.</p><p>We're excited about <strong><a href=""https://www.openpolicyagent.org/"">Open Policy Agent (OPA)</a></strong>, an open-source technology that attempts to solve this problem. OPA lets you define fine-grained access control and flexible policies as code, using the <a href=""https://www.openpolicyagent.org/docs/latest/policy-language/"">Rego</a> policy definition language. Rego enforces the policies in a distributed and unobtrusive manner outside of the application code. At the time of this writing, OPA implements uniform and flexible policy definition and enforcement to secure access to Kubernetes APIs, microservices APIs through <a href=""https://www.envoyproxy.io/"">Envoy</a> sidecar and <a href=""/radar/tools/apache-kafka"">Kafka</a>. It can also be used as a sidecar to any service to verify access policies or filter response data. <a href=""https://www.styra.com/"">Styra</a>, the company behind OPA, provides commercial solutions for centralized visibility to distributed policies. We like to see OPA mature through the <a href=""https://www.cncf.io/blog/2019/04/02/toc-votes-to-move-opa-into-cncf-incubator/"">CNCF incubation program</a> and continue to build support for more challenging policy enforcement scenarios such as diverse data stores.</p>"
"2019-11",Pumba,Tools,Assess,"<p><strong><a href=""https://github.com/alexei-led/pumba"">Pumba</a></strong> is a chaos testing and network emulation tool for Docker. Pumba can kill, stop, remove or pause Docker containers. Pumba can also emulate networks and simulate different network failures such as delays, packet loss and bandwidth rate limits. Pumba uses the <a href=""https://en.wikipedia.org/wiki/Tc_(Linux)"">tc</a> tool for network emulation which means it needs to be available in our containers or we need to run Pumba in a sidecar container with tc. Pumba is particularly useful when we want to run some automated chaos tests against a distributed system running on a bunch of containers locally or in the build pipeline.</p>"
"2019-11",Skaffold,Tools,Assess,"<p>Google brings us <strong><a href=""https://skaffold.dev/"">Skaffold</a></strong>, an open-source tool to automate local development workflows, including deployment on <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. Skaffold detects changes in source code and triggers workflows to build, tag and deploy into a K8s cluster including capturing application logs back to the command line. The workflows are pluggable with different build and deployment tools, but this comes with an opinionated default configuration to make it easier to get started.</p>"
"2019-11",What-If Tool,Tools,Assess,"<p>The machine learning world has shifted emphasis slightly from exploring what models are capable of understanding to how they do it. Concerns about introducing bias or overgeneralizing a model's applicability have resulted in interesting new tools such as <strong><a href=""https://pair-code.github.io/what-if-tool/"">What-If Tool</a></strong> (WIT). This tool helps data scientists to dig into a model's behavior and to visualize the impact various features and data sets have on the output. Introduced by Google and available either through <a href=""https://www.tensorflow.org/tensorboard"">Tensorboard</a> or <a href=""/radar/tools/jupyter"">Jupyter</a> notebooks, WIT simplifies the tasks of comparing models, slicing data sets, visualizing facets and editing individual data points. Although WIT makes it easier to perform these analyses, they still require a deep understanding of the mathematics and theory behind the models. It is a tool for data scientists to gain deeper insights into model behavior. Naive users shouldn't expect any tool to remove the risk or minimize the damage done by a misapplied or poorly trained algorithm.</p>"
"2019-11",Azure Data Factory for orchestration,Tools,Hold,"<p><a href=""https://azure.microsoft.com/en-us/services/data-factory/"">Azure Data Factory</a> (ADF) is currently Azure's default product for orchestrating data-processing pipelines. It supports data ingestion, copying data from and to different storage types on prem or on Azure and executing transformation logic. While we've had a reasonable experience with ADF for simple migrations of data stores from on prem to cloud, we discourage the use of <strong>Azure Data Factory for orchestration</strong> of complex data-processing pipelines. Our experience has been challenging due to several factors, including limited coverage of capabilities that can be implemented through coding first, as it appears that ADF is prioritizing enabling <a href=""/radar/platforms/low-code-platforms"">low-code platform</a> capabilities first; poor debuggability and error reporting; limited observability as ADF logging capabilities don't integrate with other products such as Azure Data Lake Storage or Databricks, making it difficult to get an end-to-end observability in place; and availability of data source-triggering mechanisms only to certain regions. At this time, we encourage using other open-source orchestration tools (e.g., <a href=""/radar/tools/airflow"">Airflow</a>) for complex data pipelines and limit ADF for data copying or snapshotting. We're hoping that ADF will address these concerns to support for more complex data-processing workflows and prioritize access to capabilities through code first.</p>"
"2020-05",Applying product management to internal platforms,Techniques,Adopt,"<p>More and more companies are building internal platforms to roll out new digital solutions quickly and efficiently. Companies that succeed with this strategy are <strong>applying product management to internal platforms</strong>. This means establishing empathy with internal consumers (the development teams) and collaborating with them on the design. Platform product managers create roadmaps and ensure the platform delivers value to the business and enhances the developer experience. Unfortunately, we're also seeing less successful approaches, where teams create a platform in the void, based on unverified assumptions and without internal customers. These platforms, often despite aggressive internal tactics, end up being underutilized and a drain on the organization's delivery capability. As usual, good product management is all about building products that consumers love.</p>"
"2020-05",Infrastructure as code,Techniques,Adopt,"<p>Although <strong>infrastructure as code</strong> is a relatively old technique (we’ve featured it in the Radar in 2011), it has become vitally important in the modern cloud era where the act of setting up infrastructure has become the passing of configuration instructions to a cloud platform. When we say ""as code"" we mean that all the good practices we've learned in the software world should be applied to infrastructure. Using source control, adhering to the <a href=""https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"">DRY principle</a>, modularization, maintainability, and using automated testing and deployment are all critical practices. Those of us with a deep software and infrastructure background need to empathize with and support colleagues who do not. Saying ""treat infrastructure like code"" isn't enough; we need to ensure the hard-won learnings from the software world are also applied consistently throughout the infrastructure realm.</p>"
"2020-05",Micro frontends,Techniques,Adopt,"<p>We've seen significant benefits from introducing <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>, which have allowed teams to scale the delivery of independently deployed and maintained services. Unfortunately, we've also seen many teams create a front-end monolith — a large, entangled browser application that sits on top of the back-end services — largely neutralizing the benefits of microservices. <strong>Micro frontends</strong> have continued to gain in popularity since they were first introduced. We've seen many teams adopt some form of this architecture as a way to manage the complexity of multiple developers and teams contributing to the same user experience. In June of last year, one of the originators of this technique published an <a href=""https://martinfowler.com/articles/micro-frontends.html"">introductory article</a> that serves as a reference for micro frontends. It shows how this style can be implemented using various web programming mechanisms and builds out an example application using <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>. We're confident this style will grow in popularity as larger organizations try to decompose UI development across multiple teams.</p>"
"2020-05",Pipelines as code,Techniques,Adopt,"<p>The <strong>pipelines as code</strong> technique emphasizes that the configuration of delivery pipelines that build, test and deploy our applications or infrastructure should be treated as code; they should be placed under source control and modularized in reusable components with automated testing and deployment. As organizations move to decentralized autonomous teams building <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a> or <a href=""/radar/techniques/micro-frontends"">micro frontends</a>, the need for engineering practices in managing pipelines as code increases to keep building and deploying software consistent within the organization. This need has given rise to delivery pipeline templates and tooling that enable a standardized way to build and deploy services and applications. Such tools use the <em>declarative delivery pipelines</em> of applications, adopting a pipeline blueprint to execute the underlying tasks for various stages of a delivery lifecycle such as build, test and deployment; and they abstract away implementation details. The ability to build, test and deploy pipelines as code should be one of the evaluation criteria for choosing a CI/CD tool.</p>"
"2020-05",Pragmatic remote pairing,Techniques,Adopt,"<p>We firmly believe that <a href=""https://martinfowler.com/articles/on-pair-programming.html"">pair programming</a> improves the quality of code, spreads knowledge throughout a team and allows overall faster delivery of software. In a post COVID-19 world, however, many software teams will be distributed or fully remote, and in this situation we recommend <strong>pragmatic remote pairing</strong>: adjusting pairing practices to what's possible given the tools at hand. Consider tools such as <a href=""/radar/tools/visual-studio-live-share"">Visual Studio Live Share</a> for efficient, low-latency collaboration. Only resort to pixel-sharing if both participants reside in relative geographic proximity and have high-bandwidth internet connections. Pair developers who are in similar time zones rather than expecting pairing to work between participants regardless of their location. If pairing isn't working for logistical reasons, fall back to practices such as individual programming augmented via code reviews, pull-request collaboration (but beware <a href=""/radar/techniques/long-lived-branches-with-gitflow"">long-lived branches with Gitflow</a>) or shorter pairing sessions for critical parts of the code. We've engaged in remote pairing for years, and we've found it to be effective if done with a dose of pragmatism.</p>"
"2020-05",Simplest possible feature toggle,Techniques,Adopt,"<p>Unfortunately, <a href=""https://martinfowler.com/articles/feature-toggles.html"">feature toggles</a> are less common than we'd like, and quite often we see people mixing up its types and use cases. It's quite common to come across teams that use heavyweight platforms such as <a href=""https://launchdarkly.com/"">LaunchDarkly</a> to implement feature toggles, including release toggles, to benefit from <a href=""https://martinfowler.com/articles/continuousIntegration.html"">Continuous Integration</a>, when all you need are if/else conditionals. Therefore, unless you need A/B testing or <a href=""https://martinfowler.com/bliki/CanaryRelease.html"">canary release</a> or hand over feature release responsibility to business folks, we encourage you to use the <strong>simplest possible feature toggle</strong> instead of unnecessarily complex feature toggle frameworks.</p>"
"2020-05",Koin,languages-and-frameworks,Trial,"<p>As <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a> is used increasingly for both mobile and server-side development, the associated ecosystem continues to evolve. <strong><a href=""https://insert-koin.io/"">Koin</a></strong> is a Kotlin framework that handles one of the routine problems in software development: dependency injection. Although you can choose from a variety of dependency injection frameworks for Kotlin, our teams have come to prefer the simplicity of Koin. Koin avoids using annotations and injects either through constructors or by mimicking Kotlin's lazy initialization so that objects are injected only when needed. This is in contrast to the statically compiled <a href=""/radar/languages-and-frameworks/dagger"">Dagger</a> injection framework for Android. Our developers like the lightweight nature of this framework and its built-in testability.</p>"
"2020-05",Continuous delivery for machine learning (CD4ML),Techniques,Trial,"<p>Applying machine learning to make the business applications and services intelligent is more than just training models and serving them. It requires implementing end-to-end and continuously repeatable cycles of training, testing, deploying, monitoring and operating the models. <strong><a href=""https://martinfowler.com/articles/cd4ml.html"">Continuous delivery for machine learning (CD4ML)</a></strong> is a technique that enables reliable end-to-end cycles of development, deploying and monitoring machine learning models. The underpinning technology stack to enable CD4ML includes tooling for accessing and discovering data, version control of artefacts (such as data, model and code), continuous delivery pipelines, automated environment provisioning for various deployments and experiments, model performance assessment and tracking, and model operational observability. Companies can choose their own tool set depending on their existing tech stack. CD4ML emphasizes automation and removing manual handoffs. CD4ML is our de facto approach for developing ML models.</p>"
"2020-05",Ethical bias testing,Techniques,Trial,"<p>Over the past year, we've seen a shift in interest around machine learning and deep neural networks in particular. Until now, tool and technique development has been driven by excitement over the remarkable capabilities of these models. Currently, though, there is rising concern that these models could cause unintentional harm. For example, a model could be trained inadvertently to make profitable credit decisions by simply excluding disadvantaged applicants. Fortunately, we're seeing a growing interest in <strong>ethical bias testing</strong> that will help to uncover potentially harmful decisions. Tools such as <a href=""https://github.com/marcotcr/lime"">lime</a>, <a href=""https://aif360.mybluemix.net/"">AI Fairness 360</a> or <a href=""/radar/tools/what-if-tool"">What-If Tool</a> can help uncover inaccuracies that result from underrepresented groups in training data and visualization tools such as <a href=""https://ai.googleblog.com/2017/07/facets-open-source-visualization-tool.html"">Google Facets</a> or <a href=""https://pair-code.github.io/facets/"">Facets Dive</a> can be used to discover subgroups within a corpus of training data. We've used lime (local interpretable model-agnostic explanations) in addition to this technique in order to understand the predictions of any machine-learning classifier and what classifiers (or models) are doing.</p>"
"2020-05",GraphQL for server-side resource aggregation,Techniques,Trial,"<p>We see more and more tools such as <a href=""https://www.apollographql.com/docs/apollo-server/federation/introduction/"">Apollo Federation</a> that can aggregate multiple GraphQL endpoints into a single graph. However, we caution against misusing <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a>, especially when turning it into a server-to-server protocol. Our practice is to use <strong><a href=""/radar/techniques/graphql-for-server-side-resource-aggregation"">GraphQL for server-side resource aggregation</a></strong> only. When using this pattern, the microservices continue to expose well-defined RESTful APIs, while under-the-hood aggregate services or <a href=""/radar/techniques/bff-backend-for-frontends"">BFF (Backend for Frontends)</a> patterns use GraphQL resolvers as the implementation for stitching resources from other services. The shape of the graph is driven by domain-modeling exercises to ensure ubiquitous language is limited to subgraphs where needed (in the case of one-microservice-per-bounded-context). This technique simplifies the internal implementation of aggregate services or BFFs, while encouraging good modeling of services to avoid <a href=""/radar/techniques/anemic-rest"">anemic REST</a>.</p>"
"2020-05",Micro frontends for mobile,Techniques,Trial,"<p>Since introducing it in the Radar in 2016, we've seen widespread adoption of <a href=""/radar/techniques/micro-frontends"">micro frontends</a> for web UIs. Recently, however, we've seen projects extend this architectural style to include <strong>micro frontends for mobile</strong> applications as well. When the application becomes sufficiently large and complex, it becomes necessary to distribute the development over multiple teams. This presents the challenge of maintaining team autonomy while integrating their work into a single app. Although we've seen teams writing their own frameworks to enable this development style, existing modularization frameworks such as <a href=""/radar/languages-and-frameworks/atlas-and-beehive"">Atlas and Beehive</a> can also simplify the problem of integrating multiteam app development.</p>"
"2020-05",Platform engineering product teams,Techniques,Trial,"<p>The adoption of cloud and DevOps — while increasing the productivity of teams who can now move more quickly with reduced dependency on centralized operations teams and infrastructure — also has constrained teams that lack the skills to self-manage a full application and operations stack. Some organizations have tackled this challenge by creating <strong>platform engineering product teams</strong>. These teams maintain an internal platform that enables delivery teams to deploy and operate systems with reduced lead time and stack complexity. The emphasis here is on API-driven self-service and supporting tools, with delivery teams still responsible for supporting what they deploy onto the platform. Organizations that consider establishing such a platform team should be very cautious not to accidentally create a <a href=""/radar/techniques/separate-devops-team"">separate DevOps team</a>, nor should they simply relabel their <a href=""/radar/platforms/superficial-private-cloud"">existing hosting and operations structure</a> as a platform. If you're wondering how to best set up platform teams, we've been using the concepts from <a href=""https://teamtopologies.com/"">Team Topologies</a> to split platform teams in our projects into enablement teams, core ""platform within a platform"" teams and stream-focused teams.</p>"
"2020-05",Security policy as code,Techniques,Trial,"<p>Security policies are rules and procedures that protect our systems from threats and disruption. For example, access control policies define and enforce who can access which services and resources under what circumstances; or network security policies can dynamically limit the traffic rate to a particular service. The complexity of the technology landscape today demands treating <strong>security policy as code</strong>: define and keep policies under version control, automatically validate them, automatically deploy them and monitor their performance. Tools such as <a href=""/radar/tools/open-policy-agent-opa"">Open Policy Agent</a> or platforms such as <a href=""/radar/platforms/istio"">Istio</a> provide flexible policy definition and enforcement mechanisms that support the practice of security policy as code.</p>"
"2020-05",Tailwind CSS,languages-and-frameworks,Assess,"<p>CSS tools and frameworks offer predesigned components for fast results; after a while, however, they can complicate customization. <strong><a href=""https://tailwindcss.com/"">Tailwind CSS</a></strong> proposes an interesting approach by providing lower-level utility CSS classes to create building blocks without opinionated styles and aiming for easy customization. The breadth of the low-level utilities allows you to avoid writing any classes or CSS on your own which leads to a more maintainable codebase in the long term. It seems that Tailwind CSS offers the right balance between reusability and customization to create visual components.</p>"
"2020-05",Semi-supervised learning loops,Techniques,Trial,"<p><strong>Semi-supervised learning loops</strong> are a class of iterative machine-learning workflows that take advantage of the relationships to be found in unlabeled data. These techniques may improve models by combining labeled and unlabeled data sets in various ways. In other cases they compare models trained on different subsets of the data. Unlike either unsupervised learning where a machine infers classes in unlabeled data or supervised techniques where the training set is entirely labeled, semi-supervised techniques take advantage of a small set of labeled data and a much larger set of unlabeled data. Semi-supervised learning is also closely related to active learning techniques where a human is directed to selectively label ambiguous data points. Since expert humans that can accurately label data are a scarce resource and labeling is often the most time-consuming activity in the machine-learning workflow, semi-supervised techniques lower the cost of training and make machine learning feasible for a new class of users. We're also seeing the application of weakly supervised techniques where machine-labeled data is used but is trusted less than the data labeled by humans.</p>"
"2020-05",Transfer learning for NLP,Techniques,Trial,"<p>We had this technique in Assess previously. The innovations in the NLP landscape continue at a great pace, and we're able to leverage these innovations in our projects thanks to the ubiquitous <strong>transfer learning for NLP</strong>. The GLUE benchmark (a suite of language understanding tasks) scores have seen dramatic progress over the past couple of years with average scores moving from 70.0 at launch to some of the leaders crossing 90.0 as of April 2020. A lot of our projects in the NLP domain are able to make significant progress by starting from pretrained models from ELMo, <a href=""/radar/techniques/bert"">BERT</a>, and <a href=""/radar/languages-and-frameworks/ernie"">ERNIE</a>, among others, and then fine-tuning them based on the project needs.</p>"
"2020-05","Use ""remote native"" processes and approaches",Techniques,Trial,"<p><a href=""https://www.martinfowler.com/articles/remote-or-co-located.html"">Distributed teams come in many shapes and setups</a>; delivery teams in a 100% single-site co-located setup, however, have become the exception for us. Most of our teams are either multisite teams or have at least some team members working off-site. Therefore, <strong>using ""remote native"" processes and approaches</strong> by default can help significantly with the overall team flow and effectiveness. This starts with making sure that everybody has access to the necessary remote systems. Moreover, using tools such as <a href=""/radar/tools/visual-studio-live-share"">Visual Studio Live Share</a>, <a href=""/radar/tools/mural"">MURAL</a> or <a href=""https://gsuite.google.com/products/jamboard/"">Jamboard</a> turn online workshops and remote pairing into routines instead of ineffective exceptions. But ""remote native"" goes beyond a lift-and-shift of co-location practices to the digital world: Embracing more asynchronous communication, even more discipline around decision documentation, and ""everybody always remote"" meetings are other approaches our teams practice by default to optimize for location fluidity.</p>"
"2020-05",Zero trust architecture (ZTA),Techniques,Trial,"<p>The technology landscape of organizations today is increasingly more complex with assets — data, functions, infrastructure and users — spread across security boundaries, such as local hosts, multiple cloud providers and a variety of SaaS vendors. This demands a paradigm shift in enterprise security planning and systems architecture, moving from static and slow-changing security policy management, based on trust zones and network configurations, to dynamic, fine-grained security policy enforcement based on temporal access privileges.</p><p><strong>Zero trust architecture (ZTA)</strong> is an organization's strategy and journey to implement zero-trust security principles for all of their assets — such as devices, infrastructure, services, data and users — and includes implementing practices such as securing all access and communications regardless of the network location, enforcing policies as code based on the least privilege and as granular as possible, and continuous monitoring and automated mitigation of threats. Our Radar reflects many of the enabling techniques such as <a href=""/radar/techniques/security-policy-as-code"">security policy as code</a>, <a href=""/radar/techniques/sidecars-for-endpoint-security"">sidecars for endpoint security</a> and <a href=""/radar/techniques/beyondcorp"">BeyondCorp</a>. If you're on your journey toward ZTA, refer to the <a href=""https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207-draft2.pdf"">NIST ZTA publication</a> to learn more about principles, enabling technology components and migration patterns as well as Google's publication on <a href=""https://cloud.google.com/security/beyondprod"">BeyondProd</a>.</p>"
"2020-05",Data mesh,Techniques,Assess,"<p><strong><a href=""https://martinfowler.com/articles/data-monolith-to-mesh.html"">Data mesh</a></strong> is an architectural and organizational paradigm that challenges the age-old assumption that we must centralize big analytical data to use it, have data all in one place or be managed by a centralized data team to deliver value. Data mesh claims that for big data to fuel innovation, its ownership must be federated among domain data owners who are accountable for providing their data as products (with the support of a self-serve data platform to abstract the technical complexity involved in serving data products); it must also adopt a new form of federated governance through automation to enable interoperability of domain-oriented data products. Decentralization, along with interoperability and focus on the experience of data consumers, are key to the democratization of innovation using data.</p><p>If your organization has a large number of domains with numerous systems and teams generating data or a diverse set of data-driven use cases and access patterns, we suggest you assess data mesh. Implementation of data mesh requires investment in building a self-serve data platform and embracing an organizational change for domains to take on the long-term ownership of their data products, as well as an incentive structure that rewards domains serving and utilizing data as a product.</p>"
"2020-05",Legacy migration feature parity,Techniques,Hold,"<p>We find that more and more organizations need to replace aging legacy systems to keep up with the demands of their customers (both internal and external). One antipattern we keep seeing is <strong>legacy migration feature parity</strong> , the desire to retain feature parity with the old. We see this as a huge missed opportunity. Often the old systems have bloated over time, with many features unused by users (50% according to a <a href=""https://www.standishgroup.com/sample_research_files/Exceeding%20Value_Layout.pdf"">2014 Standish Group report</a>) and business processes that have evolved over time. Replacing these features is a waste. Our advice: Convince your customers to take a step back and understand what their users currently <em>need</em> and prioritize these needs against business outcomes and metrics — which often is easier said than done. This means conducting user research and applying modern product development practices rather than simply replacing the existing ones.</p>"
"2020-05",Decentralized identity,Techniques,Assess,"<p>Since the birth of the internet, the technology landscape has experienced an accelerated evolution toward decentralization. While protocols such as HTTP and architectural patterns such as <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a> or <a href=""/radar/techniques/data-mesh"">data mesh</a> enable decentralized implementations, identity management remains centralized. The emergence of distributed ledger technology (DLT), however, provides the opportunity to enable the concept of <strong>decentralized identity</strong>. In a decentralized identity system, entities — that is, discrete identifiable units such as people, organizations and things — are free to use any shared root of trust. In contrast, conventional identity management systems are based on centralized authorities and registries such as corporate directory services, certificate authorities or domain name registries.</p><p>The development of <a href=""https://www.w3.org/TR/did-core/"">decentralized identifiers</a> — globally unique, persistent and <em>self-sovereign identifiers</em> that are cryptographically verifiable — is a major enabling standard. Although scaled implementations of decentralized identifiers in the wild are still rare, we're excited by the premise of this movement and have started using the concept in our architecture. For the latest experiments and industry collaborations, check out <a href=""https://identity.foundation/"">Decentralized Identity Foundation</a>.</p>"
"2020-05",Declarative data pipeline definition,Techniques,Assess,"<p>Many data pipelines are defined in a large, more or less imperative script written in Python or Scala. The script contains the logic of the individual steps as well as the code chaining the steps together. When faced with a similar situation in Selenium tests, developers discovered the Page Object pattern, and later many behavior-driven development (BDD) frameworks implemented a split between step definitions and their composition. Some teams are now experimenting with bringing the same thinking to data engineering. A separate <strong>declarative data pipeline definition</strong>, maybe written in YAML, contains only the declaration and sequence of steps. It states input and output data sets but refers to scripts if and when more complex logic is needed. With <a href=""https://github.com/binaryaffairs/a-la-mode"">A La Mode</a>, we're seeing the first open source tool appear in this space.</p>"
"2020-05",DeepWalk,Techniques,Assess,"<p><strong><a href=""https://github.com/phanein/deepwalk"">DeepWalk</a></strong> is an algorithm that helps apply machine learning on graphs. When working on data sets that are represented as graphs, one of the key problems is to extract features from the graph. This is where DeepWalk can help. It uses SkipGram to construct node embeddings by viewing the graph as a language where each node is a unique word in the language and random walks of finite length on the graph constitutes a sentence. These embeddings can then be used by various ML models. DeepWalk is one of the techniques we're trialling on some of our projects where we've needed to apply machine learning on graphs.</p>"
"2020-05",Managing stateful systems via container orchestration,Techniques,Assess,"<p>We recommend caution in <strong>managing stateful systems via container orchestration</strong> platforms such as Kubernetes. Some databases are not built with native support for orchestration — they don't expect a scheduler to kill and relocate them to a different host. Building a highly available service on top of such databases is not trivial, and we still recommend running them on bare metal hosts or a virtual machine (VM) rather than to force-fit them into a container orchestration platform.</p>"
"2020-05",Preflight builds,Techniques,Assess,"<p>Even though we strongly advocate in favor of CI rather than <a href=""/radar/techniques/gitflow"">Gitflow</a>, we know that <a href=""https://trunkbaseddevelopment.com/committing-straight-to-the-trunk/"">committing straight to the trunk</a> and running the CI on a master branch can be ineffective if the team is too big, the builds are slow or flaky, or the team lacks the discipline to run the full test suite locally. In this situation a red build can block multiple devs or pairs of devs. Instead of fixing the underlying root cause — slow builds, the inability to run tests locally or monolithic architectures that necessitate many people working in the same area — teams usually rely on feature branches to bypass these issues. We discourage feature branches, given they may require significant effort to resolve merge conflicts, and they introduce longer feedback loops and potential bugs during conflict resolution. Instead, we propose using <strong>preflight builds</strong> as an alternative: these are pull request–based builds for “micro branches” that live only for the duration of the pipeline run, with the branch opened for every commit. To help automate this workflow, we've come across bots such as <a href=""https://bors.tech/"">Bors</a>, which automates merging to master and branch deletion in case the mini branch build succeeds. We're assessing this flow, and you should too; but don't use this to solve the wrong problem, as it can lead to misuse of branches and may cause more harm than benefit.</p>"
"2020-05",Cloud lift and shift,Techniques,Hold,"<p>It is rather curious, that after over a decade of industry experience with cloud migration, we still feel it's necessary to call out <strong>cloud lift and shift</strong>; a practice that views cloud simply as a hosting solution, resulting in the replication of an existing architecture, security practices and IT operational models in the cloud. This fails to realize the cloud's promises of agility and digital innovation. A cloud migration requires intentional change across multiple axes toward a cloud-native state, and depending on the unique migration circumstances, each organization might end up somewhere on the spectrum from cloud lift and shift to cloud native. Systems architecture, for example, is one of the pillars of delivery agility and often requires change. The temptation to simply <a href=""https://cloud.google.com/migrate/anthos/docs/anthos-migrate-benefits"">lift and shift existing systems as containers</a> to the cloud can be strong. While this tactic can speed up cloud migration, it falls short when it comes to creating agility and delivering features and value. Enterprise security in the cloud is fundamentally different from traditional perimeter-based security through firewalls and zoning, and it demands a journey toward <a href=""/radar/techniques/zero-trust-architecture-zta"">zero trust architecture</a>. The IT operating model too has to be reformed to safely provide cloud services through self-serve automated platforms and empower teams to take more of the operational responsibility and gain autonomy. Last but not least, organizations must build a foundation to enable continuous change, such as creating pipelines with continuous testing of applications and infrastructure as a part of the migration. These will help the migration process, result in a more robust and well-factored system and give organizations a way to continue to evolve and improve their systems.</p>"
"2020-05",Matomo,Platforms,Assess,"<p><strong><a href=""https://matomo.org"">Matomo</a></strong> (formerly Piwik) is an open source web analytics platform that provides you with full control over your data. You can self-host Matomo and secure your web analytics data from third parties. Matomo also makes it easy to integrate web analytics data with your in-house data platform and lets you build usage models that are tailored to your needs.</p>"
"2020-05",Log aggregation for business analytics,Techniques,Hold,"<p>Several years ago, a new generation of log aggregation platforms emerged that were capable of storing and searching over vast amounts of log data to uncover trends and insights in operational data. <a href=""/radar/tools/splunk"">Splunk</a> was the most prominent but by no means the only example of these tools. Because these platforms provide broad operational and security visibility across the entire estate of applications, administrators and developers have grown increasingly dependent on them. This enthusiasm spread as stakeholders discovered that they could use <strong>log aggregation for business analytics</strong>. However, business needs can quickly outstrip the flexibility and usability of these tools. Logs intended for technical observability are often inadequate to infer deep customer understanding. We prefer either to use tools and metrics designed for customer analytics or to take a more event-driven approach to observability where both business and operational events are collected and stored in a way they can be replayed and processed by more purpose-built tools.</p>"
"2020-05",Long-lived branches with Gitflow,Techniques,Hold,"<p>Five years ago we highlighted the problems with <strong>long-lived branches with Gitflow</strong>. Essentially, long-lived branches are the opposite of continuously integrating all changes to the source code, and in our experience continuous integration is the better approach for most kinds of software development. Later we extended our caution to <a href=""/radar/techniques/gitflow"">Gitflow</a> itself, because we saw teams using it almost exclusively with long-lived branches. Today, we still see teams in settings where continuous delivery of web-based systems is the stated goal being drawn to long-lived branches. So we were delighted that the author of Gitflow has now added a note to his <a href=""https://nvie.com/posts/a-successful-git-branching-model/"">original article</a>, explaining that Gitflow was not intended for such use cases.</p>"
"2020-05",Snapshot testing only,Techniques,Hold,"<p>The value of snapshot testing is undeniable when working with legacy systems by ensuring that the system continues to work and the legacy code doesn't break. However, we're seeing the common, rather harmful practice of using <strong>snapshot testing only</strong> as the primary test mechanism. Snapshot tests validate the exact result generated in the DOM by a component, not the component's behavior; therefore, it can be weak and unreliable, fostering the ""only delete the snapshot and regenerate it"" bad practice. Instead, you should test the logic and behavior of the components emulating what users would do. This mindset is encouraged by tools in the <a href=""https://testing-library.com/docs/guiding-principles"">Testing Library</a> family.</p>"
"2020-05",.NET Core,Platforms,Adopt,"<p>We previously had <strong>.NET Core</strong> in Adopt, indicating that it had become our default for .NET projects. But we felt it's worth again calling attention to .NET Core. With the release of .NET Core 3.<em>x</em> last year, the bulk of the features from .NET Framework have now been ported into .NET Core. With the announcement that <a href=""https://devblogs.microsoft.com/dotnet/introducing-net-5"">.NET Framework is on its last release</a>, Microsoft have reinforced the view that <a href=""https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/"">.NET Core is the future of .NET</a>. Microsoft has done a lot of work to make .NET Core <a href=""https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/"">container friendly</a>. Most of our .NET Core–based projects target Linux and are often deployed as containers. The upcoming <a href=""https://devblogs.microsoft.com/dotnet/introducing-net-5/"">.NET 5</a> release looks promising, and we're looking forward to it.</p>"
"2020-05",Istio,Platforms,Adopt,"<p>If you're building and operating a scaled <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a> architecture and have embraced <a href=""/radar/platforms/kubernetes"">Kubernetes</a>, adopting <a href=""/radar/techniques/service-mesh"">service mesh</a> to manage all cross-cutting aspects of running the architecture is a default position. Among various implementations of service mesh, <strong><a href=""https://istio.io"">Istio</a></strong> has gained majority adoption. It has a rich feature set, including service discovery, traffic management, service-to-service and origin-to-service security, observability (including telemetry and distributed tracing), rolling releases and resiliency. Its user experience has been improved in its latest releases, because of its ease of installation and control panel architecture. Istio has lowered the bar for implementing large-scale microservices with operational quality for many of our clients, while admitting that operating your own Istio and Kubernetes instances requires adequate knowledge and internal resources which is not for the fainthearted.</p>"
"2020-05",Anka,Platforms,Trial,"<p><strong><a href=""https://ankadoc.bitbucket.io/"">Anka</a></strong> is a set of tools to create, manage, distribute, build and test macOS reproducible virtual environments for iOS and macOS. It brings Docker-like experience to macOS environments: instant start, CLI to manage virtual machines and registry to version and tag virtual machines for distribution. We've used Anka to build a macOS private cloud for a client. This tool is worth considering when virtualizing iOS and macOS environments.</p>"
"2020-05",Argo CD,Platforms,Trial,"<p>Without making a judgment of the GitOps technique, we'd like to talk about <strong><a href=""https://argoproj.github.io/argo-cd/"">Argo CD</a></strong> within the scope of deploying and monitoring applications in <a href=""/radar/platforms/kubernetes"">Kubernetes</a> environments. Based on its ability to automate the deployment of the desired application state in the specified target environments in Kubernetes and our good experience with troubleshooting failed deployments, verifying logs and monitoring deployment status, we recommend you give Argo CD a try. You can even see graphically what is going on in the cluster, how a change is propagated and how pods are created and destroyed in real time.</p>"
"2020-05",Crowdin,Platforms,Trial,"<p>Most of the projects with multilingual support start with development teams building features in one language and managing the rest through offline translation via emails and spreadsheets. Although this simple setup works, things can quickly get out of hand. You may have to keep answering the same questions for different language translators, sucking the energy out of the collaboration between translators, proofreaders and the development team. <strong><a href=""https://crowdin.com"">Crowdin</a></strong> is one of a handful of platforms that help in streamlining the localization workflow of your project. With Crowdin the development team can continue building features, while the platform streamlines the text that needs translation into an online workflow. We like that Crowdin nudges the teams to continuously and incrementally incorporate translations rather than managing them in large batches toward the end.</p>"
"2020-05",MeiliSearch,Platforms,Assess,"<p><strong><a href=""https://github.com/meilisearch/MeiliSearch"">MeiliSearch</a></strong> is a fast, easy-to-use and easy-to-deploy text search engine. Over the years Elasticsearch has become the popular choice for scalable text searches. However, if you don't have the volume of data that warrants a distributed solution but still want to provide a fast typo-tolerant search engine, then we recommend assessing MeiliSearch.</p>"
"2020-05",eBPF,Platforms,Trial,"<p>For several years now, the Linux kernel has included the extended Berkeley Packet Filter (<strong>eBPF</strong>) virtual machine and provided the ability to attach eBPF filters to particular sockets. But <em>extended</em> BPF goes far beyond packet filtering and allows custom scripts to be triggered at various points within the kernel with very little overhead. Although this technology isn't new, it's now coming into its own with the increasing use of microservices deployed as orchestrated containers. Service-to-service communications can be complex in these systems, making it difficult to correlate latency or performance issues back to an API call. We're now seeing tools released with prewritten eBPF scripts for collecting and visualizing packet traffic or reporting on CPU utilization. With the rise of <a href=""/radar/platforms/kubernetes"">Kubernetes</a>, we’re seeing a new generation of security enforcement and instrumentation based on eBPF scripts that help tame the complexity of a large microservices deployment.</p>"
"2020-05",Firebase,Platforms,Trial,"<p>Google's <strong><a href=""https://firebase.google.com/"">Firebase</a></strong> has undergone significant evolution since we mentioned it as part of a <a href=""/radar/techniques/serverless-architecture"">serverless architecture</a> in 2016. Firebase is a comprehensive platform for building mobile and web apps in a way that's supported by Google's underlying scalable infrastructure. We particularly like Firebase App Distribution, which makes it easy to publish test versions of an app via a CD pipeline, and Firebase Remote Config, which allows configuration changes to be dynamically pushed to apps without needing to republish them.</p>"
"2020-05",Hot Chocolate,Platforms,Trial,"<p>The <a href=""/radar/languages-and-frameworks/graphql"">GraphQL</a> ecosystem and community keep growing. <strong><a href=""https://hotchocolate.io/"">Hot Chocolate</a></strong> is a GraphQL server for .NET (Core and Classic). It lets you build and host schemas and then serve queries against them using the same base components of GraphQL — data loader, resolver, schema, operations and types. The team behind Hot Chocolate has recently added schema stitching, which allows for a single entry point to query across multiple schemas aggregated from different locations. Despite the potential to misuse this approach, our teams are happy with Hot Chocolate — it’s well documented, and we're able to deliver value quickly to our clients.</p>"
"2020-05",Hydra,Platforms,Trial,"<p>Not everyone needs a self-hosted OAuth2 solution, but if you do, have a look at <strong><a href=""https://www.ory.sh/hydra/"">Hydra</a></strong> — a fully compliant open source OAuth2 server and OpenID connect provider. Hydra has in-memory storage support for development and a relational database (PostgreSQL) for production use cases. Hydra as such is stateless and easy to scale horizontally in platforms such as <a href=""/radar/platforms/kubernetes"">Kubernetes</a>. Depending on your performance requirement, you may have to tune the number of database instances while scaling Hydra instances. And because Hydra doesn't provide any identity management solutions out of the box, you can integrate whatever flavor of identity management you have with Hydra through a clean API. This clear separation of identity from the rest of the OAuth2 framework makes it easier to integrate Hydra with an existing authentication ecosystem.</p>"
"2020-05",OpenTelemetry,Platforms,Trial,"<p><strong><a href=""https://opentelemetry.io/"">OpenTelemetry</a></strong> is an open source observability project that merges <a href=""https://opentracing.io/"">OpenTracing</a> and <a href=""https://github.com/census-instrumentation"">OpenCensus</a>. The OpenTelemetry project includes <a href=""https://github.com/open-telemetry/opentelemetry-specification"">specification</a>, libraries, agents, and other components needed to capture telemetry from services to better observe, manage and debug them. It covers the three pillars of observability — distributed tracing, metrics and logging (currently in beta) — and its specification connects these three pieces through <a href=""https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/correlationcontext/api.md"">correlations</a>; thus you can use <em>metrics</em> to pinpoint a problem, locate the corresponding <em>traces</em> to discover where the problem occured, and ultimately study the corresponding <em>logs</em> to find the exact root cause. OpenTelemetry components can be connected to back-end observability systems such as <a href=""/radar/tools/prometheus"">Prometheus</a> and <a href=""/radar/tools/jaeger"">Jaeger</a> among <a href=""https://opentelemetry.io/registry/?s=exporter"">others</a>. Formation of OpenTracing is a positive step toward the convergence of standardization and the simplification of tooling.</p>"
"2020-05",Snowflake,Platforms,Trial,"<p><strong><a href=""https://www.snowflake.com"">Snowflake</a></strong> has proven to be a robust SaaS big data storage, warehouse or lake solution for many of our clients. It has a superior architecture to scale storage, compute, and services to load, unload and use data. It's also very flexible: it supports storage of structured, semi-structured and unstructured data; provides a growing list of <a href=""https://docs.snowflake.com/en/user-guide/conns-drivers.html"">connectors</a> for different access patterns such as Spark for data science and SQL for analytics; and runs on multiple cloud providers. Our advice to many of our clients is to use managed services for their utility technology such as big data storage; however, if the risk and regulations prohibit the use of managed services, then Snowflake is a good candidate for companies with large volumes of data and heavy processing workloads. Although we've been successful using Snowflake in our medium-sized engagements, we've yet to experience Snowflake in large ecosystems where data need to be owned across segments of the organization.</p>"
"2020-05",Stratos,Platforms,Assess,"<p>Ultraleap (previously Leap Motion) has been a leader in the XR space for some time, creating remarkable hand-tracking hardware that allows a user's hands to make the leap into virtual reality. <strong><a href=""https://www.ultraleap.com/haptics/"">Stratos</a></strong> is Ultraleap's underlying haptics, sensors and software platform, and it can use targeted ultrasound to create haptic feedback in mid-air. A use case is responding to a driver's hand gesture to change the air conditioning in the car and providing haptic feedback as part of the interface. We're excited to see this technology and what creative technologists might do to incorporate it into their use cases.</p>"
"2020-05",Trillian,Platforms,Assess,"<p><strong><a href=""https://github.com/google/trillian"">Trillian</a></strong> is a cryptographically verifiable, centralized data store. For trustless, decentralized environments, you can use blockchain-based distributed ledgers. For enterprise environments, however, where the cost of CPU-heavy consensus protocols is unwarranted, we recommend you give Trillian a try.</p>"
"2020-05",Tamer,languages-and-frameworks,Assess,"<p>If you need to ingest data from relational databases into a Kafka topic, consider <strong><a href=""https://github.com/laserdisc-io/tamer"">Tamer</a></strong>, which labels itself ""a domesticated JDBC source connector for Kafka."" Despite being a relatively new framework, we've found Tamer to be more efficient than the Kafka JDBC connector, especially when huge amounts of data are involved.</p>"
"2020-05",Anthos,Platforms,Assess,"<p>We see a shift from accidental hybrid or whole-of-estate cloud migration plans to intentional and sophisticated hybrid, poly or portable cloud strategies, where organizations apply multidimensional principles to establish and execute their cloud strategy: where to host their various data and functional assets based on risk, ability to control and performance profiles; how to utilize their on-premise infrastructure investments while reducing the cost of operations; and how to take advantage of multiple cloud providers and their unique differentiated services without creating complexity and friction for users building and operating applications.</p><p><strong><a href=""https://cloud.google.com/anthos"">Anthos</a></strong> is Google's answer to enable hybrid and multicloud strategies by providing a high-level management and control plane on top of a set of open source technologies such as <a href=""https://cloud.google.com/anthos/gke"">GKE</a>, <a href=""https://cloud.google.com/anthos/service-mesh"">Service Mesh</a> and a Git-based <a href=""https://cloud.google.com/anthos/config-management"">Configuration Management</a>. It enables running portable workloads and other assets on different hosting environments, including Google Cloud and on-premises hardware. Although other cloud providers have comparative offerings, Anthos intends to go beyond a hybrid cloud to a portable cloud enabler using open source components, but that is yet to be seen. We're seeing a rising interest in Anthos. While Google's approach in managed hybrid cloud environments seems promising, it’s not a magic bullet and requires changes in both existing cloud and on-premise assets. Our advice for clients considering Anthos is to make measured tradeoffs between selecting services from the Google Cloud ecosystem and other options, to maintain their right level of neutrality and control.</p>"
"2020-05",Apache Pulsar,Platforms,Assess,"<p><strong><a href=""https://pulsar.apache.org/en/"">Apache Pulsar</a></strong> is an open source pub-sub messaging/streaming platform, competing in a similar space with <a href=""/radar/tools/apache-kafka"">Apache Kafka</a>. It provides expected functionality — such as low-latency async and sync message delivery and scalable persistent storage of messages — as well as various client libraries. What has excited us to evaluate Pulsar is its ease of scalability, particularly in large organizations with multiple segments of users. Pulsar natively supports multitenancy, georeplication, role-based access control and segregation of billing. We're also looking to Pulsar to solve the problem of a never-ending log of messages for our large-scale data systems where events are expected to persist indefinitely and subscribers are able to start consuming messages retrospectively. This is supported through a <a href=""https://pulsar.apache.org/docs/en/concepts-tiered-storage/"">tiered storage</a> model. Although Pulsar is a promising platform for large organizations, there is room for improvement. Its current installation requires administering <a href=""https://pulsar.apache.org/docs/en/administration-zk-bk/"">ZooKeeper and BookKeeper</a> among other pieces of technology. We hope that with its growing adoption, users can soon count on wider community support.</p>"
"2020-05",Cosmos,Platforms,Assess,"<p>The performance of blockchain technology has been greatly improved since we <a href=""/radar/techniques/blockchain-beyond-bitcoin"">initially assessed</a> this area in the Radar. However, there's still no single blockchain that could achieve ""internet-level"" throughput. As various blockchain platforms develop, we're seeing new data and value silos. That's why cross-chain tech has always been a key topic in the blockchain community: the future of blockchain may be a network of independent parallel blockchains. This is also the vision of <strong><a href=""https://cosmos.network/"">Cosmos</a></strong>. Cosmos releases <a href=""/radar/platforms/tendermint"">Tendermint</a> and CosmosSDK to let developers customize independent blockchains. These parallel blockchains could exchange value through the Inter-Blockchain Communication (IBC) protocol and Peg-Zones. Our teams have had great experiences with CosmosSDK, and the IBC protocol is maturing. This architecture could solve blockchain interoperability and scalability issues.</p>"
"2020-05",Google BigQuery ML,Platforms,Assess,"<p>Often training and predicting outcomes from machine learning models require code to take the data to the model. <strong><a href=""https://cloud.google.com/bigquery-ml/docs"">Google BigQuery ML</a></strong> inverts this by bringing the model to the data. <a href=""https://cloud.google.com/bigquery"">Google BigQuery</a> is a data warehouse designed to serve large-scale queries using SQL, for analytical use cases. Google BigQuery ML extends this function and its SQL interface to create, train and evaluate machine learning models using its data sets; and eventually run model predictions to create new BigQuery data sets. It supports a limited set of models out of the box, such as linear regression for forecasting or binary and multiclass regression for classification. It also supports, with limited functionality, importing previously trained <a href=""/radar/languages-and-frameworks/tensorflow"">TensorFlow</a> models. Although BigQuery ML and its SQL-based approach lower the bar for using machine learning to make predictions and recommendations, particularly for quick explorations, this comes with a difficult trade-off: compromising on other aspects of model training such as <a href=""/radar/techniques/ethical-bias-testing"">ethical bias testing</a>, <a href=""/radar/techniques/explainability-as-a-first-class-model-selection-criterion"">explainability</a> and <a href=""/radar/techniques/continuous-delivery-for-machine-learning-cd4ml"">continuous delivery for machine learning</a>.</p>"
"2020-05",JupyterLab,Platforms,Assess,"<p><strong><a href=""https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html"">JupyterLab</a></strong> is the next-generation web-based user interface for Project <a href=""/radar/tools/jupyter"">Jupyter</a>. If you've been using Jupyter Notebooks, JupyterLab is worth a try; it gives you an interactive environment for Jupyter notebooks, code and data. We see it as an evolution of Jupyter Notebook: it provides a better experience by extending its original capabilities of allowing code, visualization and documentation to exist in one place.</p>"
"2020-05",Marquez,Platforms,Assess,"<p><strong><a href=""https://marquezproject.github.io/marquez/"">Marquez</a></strong> is a relatively young open source project for collecting and serving metadata information about a data ecosystem. It represents a simple data model to capture metadata such as lineage, upstream and downstream data processing jobs and their status, and a flexible set of tags to capture the attributes of data sets. It provides a simple <a href=""https://marquezproject.github.io/marquez/openapi.html#"">RESTful API</a> to manage the metadata which eases the integration of Marquez to other tool sets within the data ecosystem.</p><p>We've used Marquez as a starting point and easily extended it to fit our needs such as enforcing security policies as well as changes to its domain language. If you're looking for a small and simple tool to bootstrap storage and visualization of your data-processing jobs and data sets, Marquez is a good place to start.</p>"
"2020-05",Node overload,Platforms,Hold,"<p>Technologies, especially wildly popular ones, have a tendency to be overused. What we're seeing at the moment is <strong>Node overload</strong>, a tendency to use Node.js indiscriminately or for the wrong reasons. Among these, two stand out in our opinion. Firstly, we frequently hear that Node should be used so that all programming can be done in one programming language. Our view remains that <a href=""/radar/techniques/polyglot-programming"">polyglot programming</a> is a better approach, and this still goes <a href=""/radar/languages-and-frameworks/javascript-as-a-first-class-language"">both ways</a>. Secondly, we often hear teams cite performance as a reason to choose Node.js. Although there are myriads of more or less sensible benchmarks, this perception is rooted in history. When Node.js became popular, it was the first major framework to embrace a nonblocking programming model which made it very efficient for IO-heavy tasks. (We mentioned this in our write-up of Node.js in 2012.) Due to its single-threaded nature, Node.js was never a good choice for compute-heavy workloads, though, and now that capable nonblocking frameworks also exist on other platforms — some with elegant, modern APIs — performance is no longer a reason to choose Node.js.</p>"
"2020-05",React Hooks,languages-and-frameworks,Adopt,"<p><strong><a href=""https://reactjs.org/docs/hooks-intro.html"">React Hooks</a></strong> have introduced a new approach to managing stateful logic; given React components have always been closer to functions than classes, Hooks have embraced this and brought state to the functions, instead of taking function as methods to the state with classes. Based on our experience, Hooks improve reuse of functionality among components and code readability. Given Hooks’ testability improvements, using <a href=""https://reactjs.org/docs/test-renderer.html"">React Test Renderer</a> and <a href=""/radar/languages-and-frameworks/react-testing-library"">React Testing Library</a>, and their growing community support, we consider them our approach of choice.</p>"
"2020-05",React Testing Library,languages-and-frameworks,Adopt,"<p>The JavaScript world moves pretty fast, and as we gain more experience using a framework our recommendations change. The <strong><a href=""https://testing-library.com/"">React Testing Library</a></strong> is a good example of a framework that with deeper usage has eclipsed the alternatives to become the sensible default when testing React-based frontends. Our teams like the fact that tests written with this framework are less brittle than with alternative frameworks such as <a href=""/radar/languages-and-frameworks/enzyme"">Enzyme</a>, because you're encouraged to test component relationships individually as opposed to testing all implementation details. This mindset is brought by <a href=""https://testing-library.com/"">Testing Library</a> which React Testing Library is part of and which provides a whole family of libraries for <a href=""/radar/languages-and-frameworks/angular"">Angular</a> and <a href=""/radar/languages-and-frameworks/vue-js"">Vue.js</a>, for example.</p>"
"2020-05",Vue.js,languages-and-frameworks,Adopt,"<p><strong><a href=""https://vuejs.org/"">Vue.js</a></strong> has become one of the successfully applied, loved and trusted frontend JavaScript frameworks among our community. Although there are other, well-adopted alternatives, such as <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>, the simplicity of Vue.js in API design, its clear segregation of directives and components (one file per component idiom) and its simpler state management have made it a compelling option among others.</p>"
"2020-05",CSS-in-JS,languages-and-frameworks,Trial,"<p>Since we first mentioned <strong>CSS-in-JS</strong> as an emerging technique in 2017, it has become much more popular, a trend we also see in our work. With some solid production experience under our belts, we can now recommend CSS-in-JS as a technique to trial. A good starting point is the <a href=""/radar/languages-and-frameworks/styled-components"">styled components</a> framework, which we mentioned in our previous Radar. Next to all the positives, though, there usually is a downside when using CSS-in-JS: the calculation of styles at runtime can cause a <a href=""https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/"">noticeable lag for end users</a>. With <a href=""https://linaria.now.sh/"">Linaria</a> we're now seeing a new class of frameworks that were created with this issue in mind. Linaria employs a number of techniques to shift most of the performance overhead to build time. Alas, this does come with its own set of trade-offs, most notably a lack of dynamic style support in IE11.</p>"
"2020-05",Exposed,languages-and-frameworks,Trial,"<p>Through their extended use of <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a>, our development teams have gained experience with more frameworks designed specifically for Kotlin rather than using Java frameworks with Kotlin. Although it's been around for a while, <strong><a href=""https://github.com/JetBrains/Exposed"">Exposed</a></strong> has caught our attention as a lightweight object-relational mapper (ORM). Exposed has two flavors of database access: a typesafe internal DSL wrapping SQL and an implementation of the data access object (DAO) pattern. It supports features expected from a mature ORM such as handling of many-to-many references, eager loading, and support for joins across entities. We also like that the implementation works without proxies and doesn't rely on reflection, which is certainly beneficial to performance.</p>"
"2020-05",GraphQL Inspector,languages-and-frameworks,Trial,"<p><strong><a href=""https://github.com/kamilkisiela/graphql-inspector"">GraphQL Inspector</a></strong> lets you compare changes between two GraphQL schemas. We've <a href=""/radar/languages-and-frameworks/graphql"">cautioned against the use of GraphQL</a> in the past, and we're happy to see some improvements in tooling around GraphQL since. Most of our teams continue to use <a href=""/radar/techniques/graphql-for-server-side-resource-aggregation"">GraphQL for server-side resource aggregation</a>, and by integrating GraphQL Inspector in their CI pipelines, we've been able to catch potential breaking changes in the GraphQL schema.</p>"
"2020-05",Karate,languages-and-frameworks,Trial,"<p>Given our experience that tests are the only API specifications that really matter, we're always on the lookout for new tools that might help with testing. <strong><a href=""https://intuit.github.io/karate/"">Karate</a></strong> is an API testing framework whose unique feature is that tests are written in Gherkin-based syntax without relying on a general-purpose programming language to implement test behavior. Karate uses a domain-specific language for describing HTTP-based API tests. Our teams like the readable specification that they get with this tool and recommend to keep tests with Karate in the upper levels of the <a href=""https://martinfowler.com/articles/practical-test-pyramid.html"">testing pyramid</a> and not overload its use by making very detailed assertions.</p>"
"2020-05",NestJS,languages-and-frameworks,Trial,"<p>The growth in popularity of Node.js and trends such as <a href=""/radar/platforms/node-overload"">Node overload</a> have led to the application of Node.js for developing business applications. We often see problems, such as scalability and maintainability, with large JavaScript-based applications. <strong><a href=""https://nestjs.com/"">NestJS</a></strong> is a <a href=""/radar/languages-and-frameworks/typescript"">TypeScript-first</a> framework that makes the development of Node.js applications safer and less error prone. NestJS is opinionated and comes with SOLID principles and an Angular-inspired architecture out of the box. When building Node.js microservices, NestJS is one of the frameworks that our teams commonly use to empower developers to create testable, scalable, loosely coupled and easily maintainable applications.</p>"
"2020-05",PyTorch,languages-and-frameworks,Trial,"<p>Our teams have continued to use and appreciate the <strong><a href=""http://pytorch.org/"">PyTorch</a></strong> machine learning framework, and several teams prefer PyTorch over <a href=""/radar/languages-and-frameworks/tensorflow"">TensorFlow</a>. PyTorch exposes the inner workings of ML that TensorFlow hides, making it easier to debug, and contains constructs that programmers are familiar with such as loops and actions. Recent releases have improved performance of PyTorch, and we've been using it successfully in production projects.</p>"
"2020-05",Rust,languages-and-frameworks,Trial,"<p><strong><a href=""http://www.rust-lang.org/"">Rust</a></strong> is continuously gaining in popularity. We've had heated discussions about which is better, Rust or C++/Go, without a clear winner. However, we're glad to see Rust has improved significantly, with more built-in APIs being added and stabilized, including <a href=""https://blog.rust-lang.org/2019/11/07/Async-await-stable.html"">advanced async support</a>, since we mentioned it in our previous Radar. In addition, Rust has also inspired the design of new languages. For example, the <a href=""https://developers.libra.org/docs/move-overview"">Move language</a> on Libra borrows Rust's way of managing memory to manage resources, ensuring that digital assets can never be copied or implicitly discarded.</p>"
"2020-05",Sarama,languages-and-frameworks,Trial,"<p><strong><a href=""https://github.com/Shopify/sarama"">Sarama</a></strong> is a Go client library for <a href=""/radar/tools/apache-kafka"">Apache Kafka</a>. If you’re developing your APIs in Go, you'll find Sarama quite easy to set up and manage as it doesn't depend on any native libraries. Sarama has two types of APIs — a high-level API for easily producing and consuming messages and a low-level API for controlling bytes on the wire.</p>"
"2020-05",SwiftUI,languages-and-frameworks,Trial,"<p>Apple has taken a big step forward with their new <strong><a href=""https://developer.apple.com/xcode/swiftui/"">SwiftUI</a></strong> framework for implementing user interfaces on the macOS and iOS platforms. We like that SwiftUI moves beyond the somewhat kludgy relationship between Interface Builder and Xcode and adopts a coherent, declarative and code-centric approach. You can now view your code and the resulting visual interface side by side in Xcode 11, making for a much better developer experience. The SwiftUI framework also draws inspiration from the <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> world that has dominated web development in recent years. Immutable values in view models and an asynchronous update mechanism make for a unified reactive programming model. This gives developers an entirely native alternative to similar reactive frameworks such as <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> or <a href=""/radar/languages-and-frameworks/flutter"">Flutter</a>. SwiftUI definitely represents the future of Apple UI development, and although new, it has shown its benefits. We've been having great experience with it — and its shallow learning curve. It's worth noting that you should know your customer's use case before jumping into using SwiftUI, given that it doesn't support iOS 12 or below.</p>"
"2020-05",Clinic.js Bubbleprof,languages-and-frameworks,Assess,"<p>With the aim of improving performance in our code, profiling tools are very useful to identify bottlenecks or delays in code which are hard to identify, especially in asynchronous operations. <strong><a href=""https://clinicjs.org/bubbleprof/"">Clinic.js Bubbleprof</a></strong> represents visually the async operations in Node.js processes, drawing a map of delays in the application's flow. We like this tool because it helps developers to easily identify and prioritize what to improve in the code.</p>"
"2020-05",Deequ,languages-and-frameworks,Assess,"<p>There are still some tool gaps when applying good software engineering practices in data engineering. Attempting to automate data quality checks between different steps in a data pipeline, one of our teams was surprised when they found only a few tools in this space. They settled on <strong><a href=""https://github.com/awslabs/deequ"">Deequ</a></strong>, a library for writing tests that resemble unit tests for data sets. Deequ is built on top of <a href=""/radar/platforms/apache-spark"">Apache Spark</a>, and even though it's published by AWS Labs it can be used in environments other than <a href=""/radar/platforms/aws"">AWS</a>.</p>"
"2020-05",ERNIE,languages-and-frameworks,Assess,"<p>In the previous edition of the Radar we had <a href=""/radar/techniques/bert"">BERT</a> — which is a key milestone in the NLP landscape. Last year, Baidu released <strong><a href=""https://github.com/PaddlePaddle/ERNIE/"">ERNIE</a></strong> 2.0 (Enhanced Representation through kNowledge IntEgration) which outperformed BERT on seven GLUE language understanding tasks and on all nine of the Chinese NLP tasks. ERNIE, like BERT, provides unsupervised pretrained language models, which can be fine-tuned by adding output layers to create state-of-the-art models for a variety of NLP tasks. ERNIE differs from traditional pretraining methods in that it is a continual pretraining framework. Instead of training with a small number of pretraining objectives, it could constantly introduce a large variety of pretraining tasks to help the model efficiently learn language representations. We're pretty excited about the advancements in NLP and are looking forward to experimenting with ERNIE on our projects.</p>"
"2020-05",MediaPipe,languages-and-frameworks,Assess,"<p><strong><a href=""https://github.com/google/mediapipe"">MediaPipe</a></strong> is a framework for building MultiModal (such as video, audio, time series data, etc.), cross-platform (for example, Android, iOS, Web, and edge devices) and applied ML pipelines. It provides multiple capabilities, including face detection, hand tracking, gesture detection and object detection. Although MediaPipe is primarily deployed to mobile devices, it's started to show up in the browser thanks to WebAssembly and XNNPack ML Inference Library. We're exploring MediaPipe for some AR use cases and like what we see so far.</p>"
"2020-05",Wire,languages-and-frameworks,Assess,"<p>The Golang community has had its fair share of dependency injection skeptics, partly because they confused the <a href=""https://martinfowler.com/articles/injection.html"">pattern</a> with specific frameworks, and developers with a system-programming background naturally dislike runtime overhead caused by reflection. Then along came <strong><a href=""https://github.com/google/wire"">Wire</a></strong>, a compile-time dependency injection tool that can generate code and wire components together. Wire has no additional runtime overhead, and the static dependency graph is easier to reason about. Whether you handwrite your code or use frameworks, we recommend using dependency injection to encourage modular and testable designs.</p>"
"2020-05",XState,languages-and-frameworks,Assess,"<p>We've featured several state management libraries in the Radar before, but <strong><a href=""https://xstate.js.org/docs/"">XState</a></strong> takes a slightly different approach. It's a simple JavaScript and <a href=""/radar/languages-and-frameworks/typescript"">TypeScript</a> framework for creating finite state machines and visualizing them as state charts. It integrates with the more popular reactive JavaScript frameworks (<a href=""/radar/languages-and-frameworks/vue-js"">Vue.js</a>, <a href=""/radar/languages-and-frameworks/ember-js"">Ember.js</a>, <a href=""/radar/languages-and-frameworks/react-js"">React.js</a> and <a href=""https://rxjs.dev/"">RxJS</a>) and is based on the W3C standard for finite state machines. Another notable feature is the serialization of machine definitions. One thing that we've found helpful when creating finite state machines in other contexts (particularly when writing game logic) is the ability to visualize states and their possible transitions; we like the fact that it's really easy to do this with XState's <a href=""https://xstate.js.org/viz/"">visualizer</a>.</p>"
"2020-05",Enzyme,languages-and-frameworks,Hold,"<p>We don't always move deprecated tools to Hold in the Radar, but our teams feel strongly that <strong><a href=""http://airbnb.io/enzyme/"">Enzyme</a></strong> has been replaced for unit testing <a href=""/radar/languages-and-frameworks/react-js"">React</a> UI components by <a href=""https://testing-library.com/docs/intro"">React Testing Library</a>. Teams using Enzyme have found that its focus on testing component internals leads to brittle, unmaintainable tests.</p>"
"2020-05",Cypress,Tools,Adopt,"<p><strong><a href=""http://www.cypress.io/"">Cypress</a></strong> is still a favorite among our teams where developers manage end-to-end tests themselves, as part of a healthy <a href=""https://martinfowler.com/articles/practical-test-pyramid.html#End-to-endTests"">test pyramid</a>, of course. We decided to call it out again in this Radar because recent versions of Cypress have added <a href=""https://cypress.io/blog/2020/02/06/introducing-firefox-and-edge-support-in-cypress-4-0/"">support for Firefox</a>, and we strongly suggest testing on multiple browsers. The dominance of Chrome and Chromium-based browsers has led to a worrying trend of teams seemingly only testing with Chrome which can lead to <a href=""https://twitter.com/mike_conley/status/1245797292453609478"">nasty surprises</a>.</p>"
"2020-05",Figma,Tools,Adopt,"<p><strong><a href=""https://www.figma.com/"">Figma</a></strong> has demonstrated to be the go-to tool for collaborative design, not only for designers but for multidisciplinary teams too; it allows developers and other roles to view and comment on designs through the browser without the desktop version. Compared to its competitors (e.g., Invision or Sketch) which have you use more than one tool for versioning, collaborating and design sharing, Figma puts together all of these features in one tool that makes it easier for our teams to discover new ideas together. Our teams find Figma very useful, especially in remote and distributed design work enablement and facilitation. In addition to its real-time design and collaboration capabilities, Figma also offers an API that helps to improve the <a href=""/radar/techniques/designops"">DesignOps</a> process.</p>"
"2020-05",Dojo,Tools,Trial,"<p>A few years ago, Docker — and containers in general — radically changed how we think about packaging, deploying and running our applications. But despite this improvement in production, developers still spend a lot of time setting up development environments and regularly run into ""but it works on my machine"" style problems. <strong><a href=""https://github.com/kudulab/dojo"">Dojo</a></strong> aims to fix this by creating standard development environments, versioned and released as Docker images. Several of our teams use Dojo to streamline developing, testing and building code from local development through production pipelines.</p>"
"2020-05",DVC,Tools,Trial,"<p>In 2018 we mentioned <strong><a href=""https://dvc.org/"">DVC</a></strong> in conjunction with the <a href=""/radar/techniques/versioning-data-for-reproducible-analytics"">versioning data for reproducible analytics</a>. Since then it has become a favorite tool for managing experiments in machine learning (ML) projects. Since it's based on Git, DVC is a familiar environment for software developers to bring their engineering practices to ML practice. Because it versions the code that processes data along with the data itself and tracks stages in a pipeline, it helps bring order to the modeling activities without interrupting the analysts’ flow.</p>"
"2020-05",Experiment tracking tools for machine learning,Tools,Trial,"<p>The day-to-day work of machine learning often boils down to a series of experiments in selecting a modeling approach and the network topology, training data and optimizing or tweaking the model. Data scientists must use experience and intuition to hypothesize changes and then measure the impact those changes have on the overall performance of the model. As this practice has matured, our teams have found an increasing need for <strong>experiment tracking tools for machine learning</strong>. These tools help investigators keep track of the experiments and work through them methodically. Although no clear winner has emerged, tools such as <a href=""https://mlflow.org/"">MLflow</a> and platforms such as <a href=""https://comet.ml"">Comet</a> or <a href=""https://neptune.ml"">Neptune</a> have introduced rigor and repeatability into the entire machine learning workflow.</p>"
"2020-05",Goss,Tools,Trial,"<p>We mentioned <strong><a href=""https://github.com/aelsabbahy/goss"">Goss</a></strong>, a tool for <a href=""/radar/techniques/provisioning-testing"">provisioning testing</a>, in passing in previous Radars, for example, when describing the technique of <a href=""/radar/techniques/tdd-ing-containers"">TDD'ing containers</a>. Although Goss isn't always an alternative to <a href=""/radar/tools/serverspec"">Serverspec</a>, simply because it doesn't offer the same amount of features, you may want to consider it when its features meet your needs, especially since it comes as a small, self-contained binary (rather than requiring a Ruby environment). A common anti-pattern with using tools such as Goss is double-entry bookkeeping, where each change in the actual infrastructure as code files requires a corresponding change in the test assertions. Such tests are maintenance heavy and because of the close correspondence between code and test, failures mostly occur when an engineer updates one side and forgets the other. And these tests rarely catch genuine problems.</p>"
"2020-05",Jaeger,Tools,Trial,"<p><strong><a href=""https://github.com/jaegertracing/jaeger"">Jaeger</a></strong> is an open source distributed tracing system. Similar to <a href=""/radar/tools/zipkin"">Zipkin</a>, it's been inspired by the Google <a href=""https://ai.google/research/pubs/pub36356"">Dapper</a> paper and complies with <a href=""/radar/platforms/opentelemetry"">OpenTelemetry</a>. We've used Jaeger successfully with <a href=""/radar/platforms/istio"">Istio</a> and <a href=""https://www.envoyproxy.io/"">Envoy</a> on Kubernetes and like its <a href=""https://github.com/jaegertracing/jaeger-ui"">UI</a>. Jaeger exposes tracing metrics in the <a href=""/radar/tools/prometheus"">Prometheus</a> format so they can be made available to other tools. However, a new generation of tools such as <a href=""/radar/tools/honeycomb"">Honeycomb</a> integrates traces and metrics into a single observability stream for simpler aggregate analysis. Jaeger joined <a href=""https://www.cncf.io/blog/2017/09/13/cncf-hosts-jaeger/"">CNCF</a> in 2017 and has recently been elevated to CNCF's highest level of maturity, indicating its widespread deployment into production systems.</p>"
"2020-05",k9s,Tools,Trial,"<p>We continue to be ardent supporters of <a href=""/radar/techniques/infrastructure-as-code"">infrastructure as code</a>, and we continue to believe that a robust monitoring solution is a prerequisite for operating distributed applications. Sometimes an interactive tool such as the AWS web console can be a useful addition. It allows us to explore all kinds of resources in an ad-hoc fashion without having to remember every single obscure command. Using an interactive tool to make manual modifications on the fly is still a questionable practice, though. For <a href=""/radar/platforms/kubernetes"">Kubernetes</a> we now have <strong><a href=""https://k9scli.io/"">k9s</a></strong>, which provides an interactive interface for basically everything that kubectl can do. And to boot, it's not a web application but runs inside a terminal window, evoking fond memories of <a href=""https://en.wikipedia.org/wiki/Midnight_Commander"">Midnight Commander</a> for some of us.</p>"
"2020-05",kind,Tools,Trial,"<p><strong><a href=""https://github.com/kubernetes-sigs/kind"">kind</a></strong> is a tool for running local <a href=""/radar/platforms/kubernetes"">Kubernetes</a> clusters using Docker container nodes. With <a href=""https://github.com/kubernetes/test-infra/tree/master/kubetest"">kubetest</a> integration, kind makes it easy to do end-to-end testing on Kubernetes. We've used kind to create ephemeral Kubernetes clusters to test Kubernetes resources such as Operators and Custom Resource Definitions (CRDs) in our CI pipelines.</p>"
"2020-05",mkcert,Tools,Trial,"<p><strong><a href=""https://github.com/FiloSottile/mkcert"">mkcert</a></strong> is a convenient tool for creating locally trusted development certificates. Using certificates from real certificate authorities (CAs) for local development can be challenging if not impossible (for hosts such as example.test, localhost or 127.0.0.1). In such situations self-signed certificates may be your only option. mkcert lets you generate self-signed certificates and installs the local CA in the system root store. For anything other than local development and testing, we strongly recommend using certificates from real CAs to avoid trust issues.</p>"
"2020-05",MURAL,Tools,Trial,"<p><strong><a href=""https://www.mural.co/"">MURAL</a></strong> describes itself as a ""digital workspace for visual collaboration"" and allows teams to interact with a shared workspace based on a whiteboard/sticky notes metaphor. Its features include voting, commenting, notes and ""follow the presenter."" We particularly like the template feature that allows a facilitator to design and then reuse guided sessions with a team. Each of the major collaboration suites have a tool in this space (for example, <a href=""https://jamboard.google.com/"">Google Jamboard</a> and <a href=""https://www.microsoft.com/en-ca/microsoft-365/microsoft-whiteboard/digital-whiteboard-app"">Microsoft Whiteboard</a>) and these are worth investigating, but we've found MURAL to be slick, effective and flexible.</p>"
"2020-05",Open Policy Agent (OPA),Tools,Trial,"<p><strong><a href=""https://www.openpolicyagent.org/"">Open Policy Agent (OPA)</a></strong> has rapidly become a favorable component of many distributed cloud-native solutions that we build for our clients. OPA provides a uniform framework and <a href=""https://www.openpolicyagent.org/docs/latest/#rego"">language</a> for declaring, enforcing and controlling policies for various components of a cloud-native solution. It's a great example of a tool that implements <a href=""/radar/techniques/security-policy-as-code"">security policy as code</a>. We've had a smooth experience using OPA in multiple scenarios, including deploying resources to K8s clusters, enforcing access control across services in a <a href=""/radar/techniques/service-mesh"">service mesh</a> and fine-grained security controls as code for accessing application resources. A recent commercial offering, <a href=""https://www.styra.com/"">Styra's Declarative Authorization Service (DAS)</a>, eases the adoption of OPA for enterprises by adding a management tool, or control plane, to OPA for K8s with a prebuilt policy library, impact analysis of the policies and logging capabilities. We look forward to maturity and extension of OPA beyond operational services to (big) data-centric solutions.</p>"
"2020-05",Optimal Workshop,Tools,Trial,"<p>UX research demands data collection and analysis to make better decisions about the products we need to build. Our teams find <strong><a href=""https://www.optimalworkshop.com"">Optimal Workshop</a></strong> useful because it makes it easy to validate prototypes and configure tests for data collection and thus make better decisions. Features such as first-click, card sorting, or a heatmap of user interaction help to both validate prototypes and improve website navigation and information display. It's an ideal tool for distributed teams since it allows them to conduct remote research.</p>"
"2020-05",Phrase,Tools,Trial,"<p>As mentioned in our description of <a href=""/radar/platforms/crowdin"">Crowdin</a>, you now have a choice of platforms to manage the translation of a product into multiple languages instead of emailing large spreadsheets. Our teams report positive experiences with <strong><a href=""https://phrase.com/"">Phrase</a></strong>, emphasizing that it's easy to use for all key user groups. Translators use a convenient browser-based UI. Managers can add new fields and synchronize translations with other teams in the same UI. Developers can access Phrase locally and from a build pipeline. A feature that deserves a specific mention is the ability to apply versioning to translations through tags, which makes it possible to compare the look of different translations inside the actual product.</p>"
"2020-05",ScoutSuite,Tools,Trial,"<p><strong><a href=""https://github.com/nccgroup/ScoutSuite"">ScoutSuite</a></strong> is an expanded and updated tool based on Scout2 (featured in the Radar in 2018) that provides security posture assessment across <a href=""/radar/platforms/aws"">AWS</a>, <a href=""/radar/platforms/azure"">Azure</a>, <a href=""/radar/platforms/google-cloud-platform"">GCP</a> and other cloud providers. It works by automatically aggregating configuration data for an environment and applying rules to audit the environment. We've found this very useful across projects for doing point-in-time security assessments.</p>"
"2020-05",Visual regression testing tools,Tools,Trial,"<p>Since we first mentioned <strong>visual regression testing tools</strong> in 2014, the use of the technique has spread and the tools landscape has evolved. <a href=""/radar/tools/backstopjs"">BackstopJS</a> remains an excellent choice with new features being added regularly, including support for running inside Docker containers. <a href=""/radar/tools/loki"">Loki</a> was featured in our previous Radar. <a href=""https://applitools.com/"">Applitools</a>, <a href=""https://crossbrowsertesting.com/"">CrossBrowserTesting</a> and <a href=""https://percy.io/"">Percy</a> are SaaS solutions. Another notable mention is <a href=""https://github.com/rsmbl"">Resemble.js</a>, an image diffing library. Although most teams use it indirectly as part of BackstopJS, some of our teams have been using it to analyze and compare images of web pages directly. In general, our experience shows that visual regression tools are less useful in the early stages when the interface goes through significant changes, but they certainly prove their worth as the product matures and the interface stabilizes.</p>"
"2020-05",Visual Studio Live Share,Tools,Trial,"<p><strong><a href=""https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack"">Visual Studio Live Share</a></strong> is a suite of extensions for <a href=""/radar/tools/visual-studio-code"">Visual Studio Code</a> and Visual Studio. At a time when teams are searching for good remote collaboration options, we want to call attention to the excellent tooling here. Live Share provides a good, low-latency remote-pairing experience, and requires significantly less bandwidth than the brute-force approach of sharing your entire desktop. Importantly, developers can work with their preferred configuration, extensions and key mappings during a pairing session. In addition to real-time collaboration for editing and debugging code, Live Share allows voice calls and sharing terminals and servers.</p>"
"2020-05",Apache Superset,Tools,Assess,"<p><strong><a href=""https://superset.apache.org/"">Apache Superset</a></strong> is a great business intelligence (BI) tool for data exploration and visualization to work with large data lake and data warehouse setups. It works, for example, with <a href=""/radar/platforms/presto"">Presto</a>, <a href=""https://aws.amazon.com/athena/"">Amazon Athena</a> and <a href=""https://aws.amazon.com/redshift/"">Amazon Redshift</a> and can be nicely integrated with enterprise authentication. Moreover, you don't have to be a data engineer to use it; it’s meant to benefit all engineers exploring data in their everyday work. It's worth pointing out that Apache Superset is currently undergoing incubation at the Apache Software Foundation (ASF), meaning it's not yet fully endorsed by ASF.</p>"
"2020-05",AsyncAPI,Tools,Assess,"<p>Open standards are one of the foundational pillars of building distributed systems. For example, the <a href=""https://github.com/OAI"">OpenAPI (formerly Swagger)</a> specification, as an industry standard to define RESTful APIs, has been instrumental to the success of distributed architectures such as <a href=""https://martinfowler.com/articles/microservices.html"">microservices</a>. It has enabled a proliferation of tooling to support building, testing and monitoring RESTful APIs. However, such standardizations have been largely missing in distributed systems for <a href=""https://martinfowler.com/articles/201701-event-driven.html"">event-driven APIs</a>.</p><p><strong><a href=""https://www.asyncapi.com/"">AsyncAPI</a></strong> is an open source initiative to create a much needed event-driven and asynchronous API standardization and development tooling. The <a href=""https://www.asyncapi.com/docs/specifications/2.0.0/"">AsyncAPI specification</a>, inspired by the OpenAPI specification, describes and documents event-driven APIs in a machine-readable format. It's protocol agnostic, so it can be used for APIs that work over many protocols, including MQTT, WebSockets, and Kafka. We're eager to see the ongoing improvements of AsyncAPI and further maturity of its tooling ecosystem.</p>"
"2020-05",ConfigCat,Tools,Assess,"<p>If you're looking for a service to support dynamic feature toggles (and bear in mind that simple feature toggles work well too), check out <strong><a href=""https://configcat.com/"">ConfigCat</a></strong>. We'd describe it as ""like LaunchDarkly but cheaper and a bit less fancy"" and find that it does most of what we need. ConfigCat supports simple feature toggles, user segmentation, and A/B testing and has a generous free tier for low-volume use cases or those just starting out.</p>"
"2020-05",Gitpod,Tools,Assess,"<p>You can build most software following a simple two-step process: check out a repository, and then run a single build script. The process of setting up a full coding environment can still be cumbersome, though. <strong><a href=""https://www.gitpod.io/"">Gitpod</a></strong> addresses this by providing cloud-based, ""ready-to-code"" environments for Github or GitLab repositories. It offers an IDE based on Visual Studio Code that runs inside the web browser. By default, these environments are launched on the Google Cloud Platform, although you can also deploy on-premise solutions. We see the immediate appeal, especially for open source software where this approach can lower the bar for casual contributors. However, it remains to be seen how viable this approach will be in corporate environments.</p>"
"2020-05",Gloo,Tools,Assess,"<p>With the increasing adoption of <a href=""/radar/platforms/kubernetes"">Kubernetes</a> and <a href=""/radar/techniques/service-mesh"">service mesh</a>, API gateways have been experiencing an existential crisis in cloud-native distributed systems. After all, many of their capabilities (such as traffic control, security, routing and observability) are now provided by the cluster’s ingress controller and mesh gateway. <strong><a href=""https://www.solo.io/products/gloo/"">Gloo</a></strong> is a lightweight API gateway that embraces this change; it uses <a href=""https://www.envoyproxy.io/"">Envoy</a> as its gateway technology, while providing added value such as a cohesive view of the APIs to the external users and applications. It also provides an administrative interface for controlling Envoy gateways and runs and integrates with multiple service mesh implementations such as <a href=""https://linkerd.io/"">Linkerd</a>, <a href=""/radar/platforms/istio"">Istio</a> and <a href=""https://aws.amazon.com/app-mesh/"">AWS App Mesh</a>. While its open source implementation provides the basic capabilities expected from an API gateway, its enterprise edition has a more mature set of security controls such as API key management or integration with <a href=""/radar/tools/open-policy-agent-opa"">OPA</a>. Gloo is a promising lightweight API gateway that plays well with the ecosystem of cloud-native technology and architecture, while avoiding the API gateway trap of enabling business logic to glue APIs for the end user.</p>"
"2020-05",Lens,Tools,Assess,"<p>One of the strengths of <a href=""/radar/platforms/kubernetes"">Kubernetes</a> is its flexibility and range of configuration possibilities along with the API-driven, programmable configuration mechanisms and command-line visibility and control using manifest files. However, that strength can also be a weakness: when deployments are complex or when managing multiple clusters, it can be difficult to get a clear picture of the overall status through command-line arguments and manifests alone. <strong><a href=""https://k8slens.dev/"">Lens</a></strong> attempts to solve this problem with an integrated environment for viewing the current state of the cluster and its workloads, visualizing cluster metrics and changing configurations through an embedded text editor. Rather than a simple point-and-click interface, Lens brings together the tools an administrator would run from the command line into a single, navigable interface. This tool is one of several approaches that are trying to tame the complexity of Kubernetes management. We've yet to see a clear winner in this space, but Lens strikes an interesting balance between a graphical UI and command-line–only tools.</p>"
"2020-05",Manifold,Tools,Assess,"<p><strong><a href=""https://github.com/uber/manifold"">Manifold</a></strong> is a model-agnostic visual debugger for machine learning (ML). Model developers spend a significant amount of time on iterating and improving an existing model rather than creating a new one. By shifting the focus from model space to data space, Manifold supplements the existing performance metrics with a visual characteristics of the data set that influences the model performance. We think Manifold will be a useful tool to assess in the ML ecosystem.</p>"
"2020-05",Sizzy,Tools,Assess,"<p>Building web applications that look just as intended on a large number of devices and screen sizes can be cumbersome. <strong><a href=""https://sizzy.co/"">Sizzy</a></strong> is a SaaS solution that shows many viewports in a single browser window. The application is rendered in all viewports simultaneously and interactions with the application are also synched across the viewports. In our experience interacting with an application in this way can make it easier to spot potential issues earlier, before a <a href=""/radar/tools/visual-regression-testing-tools"">visual regression testing tool</a> flags the issue in the build pipeline. We should mention, though, that some of our developers who tried Sizzy for a while did, on balance, prefer to work with the tooling provided by Chrome.</p>"
"2020-05",Snowpack,Tools,Assess,"<p><strong><a href=""https://www.snowpack.dev/"">Snowpack</a></strong> is an interesting new entrant in the field of JavaScript build tools. The key improvement over other solutions is that Snowpack makes it possible to build applications with modern frameworks such as <a href=""/radar/languages-and-frameworks/react-js"">React.js</a>, <a href=""/radar/languages-and-frameworks/vue-js"">Vue.js</a>, and <a href=""/radar/languages-and-frameworks/angular"">Angular</a> without the need for a bundler. Cutting out the bundling step dramatically improves the feedback cycle during development because changes become available in the browser almost immediately. For this magic to work, Snowpack transforms the dependencies in <code>node_modules</code> into single JavaScript files in a new <code>web_modules</code> directory, from where they can be imported as an ECMAScript module (ESM). For IE11 and other browsers that don't support ESM, a workaround is available. Unfortunately, because no browser today can import CSS from JavaScript, using CSS modules is <a href=""https://www.snowpack.dev/#importing-css"">not straightforward</a>.</p>"
"2020-05",tfsec,Tools,Assess,"<p>Security is everyone's concern and capturing risks early is always better than facing problems later on. In the <a href=""/radar/techniques/infrastructure-as-code"">infrastructure as code</a> space, where <a href=""/radar/tools/terraform"">Terraform</a> is an obvious choice to manage cloud environments, we now also have <strong><a href=""https://github.com/liamg/tfsec"">tfsec</a></strong>, which is a static analysis tool that helps to scan Terraform templates and find any potential security issues. It comes with preset rules for different cloud providers including <a href=""/radar/platforms/aws"">AWS</a> and <a href=""/radar/platforms/azure"">Azure</a>. We always like tools that help to mitigate security risks, and tfsec not only excels in identifying security risks, it's also easy to install and use.</p>"